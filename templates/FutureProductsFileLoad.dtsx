<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/2/2016 9:00:49 AM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="POLA-20358P"
  DTS:CreatorName="KANSAS\spola"
  DTS:DelayValidation="True"
  DTS:DTSID="{489DFE61-707D-4132-B73E-7CA1E00EB51A}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.7001.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="FutureProductsFileLoad"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="273"
  DTS:VersionGUID="{17656518-24DA-4143-B1C4-B56A91C2941C}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DelayValidation="True"
      DTS:DTSID="{0490F795-653E-48FD-9B0D-5785F42A178B}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:PropertyExpression
        DTS:Name="ExcelFilePath">@[User::vProcessingFullPathName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLEDB_ETLAudit"
      DTS:CreationName="DTS.LogProviderSQLServer.3"
      DTS:DelayValidation="True"
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{A18BC808-F30E-4556-AB87-74A0FA2A9F2A}"
      DTS:ObjectName="BIxPress Log Provider">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{DDA504A2-9033-4915-B8CA-071C8A8B3BAD}"
      DTS:ObjectName="pAuditTable">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">ExceptionData</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="20"
      DTS:DTSID="{65A9219F-FEFF-41B3-97B0-4DC27CA5CC33}"
      DTS:ObjectName="pChildPackageID">
      <DTS:Property
        DTS:DataType="20"
        DTS:Name="ParameterValue">-1</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{34C67C51-34BF-4A84-A790-668B33936D28}"
      DTS:ObjectName="pFileExtension">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">.xlsx</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{5BEE97B3-0422-417F-8523-5A788918249A}"
      DTS:ObjectName="pFilePath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">\\kansas.us\qfs\Finance\FP&amp;A\Data Warehouse\Product Tables\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{8B73B331-51E6-47FA-B890-8202A7313712}"
      DTS:ObjectName="pFilePrefixName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">FutureProducts</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{5E00E521-617B-4AAD-818B-216CC669C6AC}"
      DTS:ObjectName="pInitialSourceFileName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">FutureProducts</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{209D16CD-2430-44F9-AF98-0E3E49282BDC}"
      DTS:ObjectName="pJobInstanceParentID">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{77016121-706C-47C8-BD4F-3DAC6CDDA404}"
      DTS:ObjectName="pSourceTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">FutureProducts</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{58B6964C-A26A-4BBB-9801-3AB7CCF6BA10}"
      DTS:ObjectName="pTargetTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">FutureProducts</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{939313AD-705E-49C5-A75A-548B26CA5A84}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vAuditDateTime"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="7">12:00:00 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0BDDCEB1-B782-41AF-89EA-376FEA8B12C5}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vCreateAllIndexSQL"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{09C77FFB-9D46-489B-9770-503E6B4FFDA5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vCurJobID"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7A61C9CE-BB74-4204-835B-C39F6DB9B0C9}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vCurJobInstanceID"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CC5D5178-2D95-4C62-861D-F1A3CF58704E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vCurUserID"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{324A0457-1DB2-440D-8D65-42AFD1C500F3}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vDeletedRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CAD24B59-F3EB-42E9-9E6A-92220970B84B}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vDeletedTotalRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{23B59AC0-11AA-479B-851E-6634FB58F542}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vDeleteXLSXFiles"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{48E3E15F-F44D-4FED-85D5-331869C1E05C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vDropAllIndexSQL"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1F3DDB88-FD14-4575-B7F3-93A5EB741BE9}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vEnvironmentTEXT"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{005443DC-5D57-4270-A125-45BD8717EC8B}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::pFileArchiveFullPath]+REVERSE(SUBSTRING(REVERSE( @[User::vProcessingFileName] ),FINDSTRING(REVERSE(@[User::vProcessingFileName] ),&quot;.&quot;,1)+1,LEN(@[User::vProcessingFileName])- FINDSTRING(REVERSE(@[User::vProcessingFileName] ),&quot;.&quot;,1)))&#xA;+&quot;_&quot;+ Right(&quot;0&quot; +(DT_STR,4,1252) datepart(&quot;yyyy&quot;, getdate()),2)  &#xA;+ Right(&quot;0&quot; +(DT_STR,2,1252) datepart(&quot;mm&quot;, getdate()) ,2)&#xA;+ Right(&quot;0&quot; +(DT_STR,2,1252) datepart(&quot;dd&quot;, getdate()),2)+&quot;_&quot;+Right(&quot;0&quot; + (DT_STR,2,1252) DatePart(&quot;hh&quot;,getdate()),2) &#xA;+ Right(&quot;0&quot; + (DT_STR,2,1252) DatePart(&quot;mi&quot;,getdate()),2) &#xA;+ Right(&quot;0&quot; + (DT_STR,4,1252) DatePart(&quot;ss&quot;,getdate()),2)+REVERSE(SUBSTRING(REVERSE( @[User::vProcessingFileName] ),1,FINDSTRING(REVERSE(@[User::vProcessingFileName] ),&quot;.&quot;,1)))"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vFileArchiveFullPath">
      <DTS:VariableValue
        DTS:DataType="8">\\kansas.us\qfs\Finance\FP&amp;A\Data Warehouse\Product Tables\Archive\FutureProducts_180424_103421</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B1F81CF4-07F0-4325-9747-1A7B3C770B9D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFileCreatedDate"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="7">11/2/2016 1:38:00 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FB824F40-1F0E-47C2-BF48-E5CC2D51AFB3}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFileLastModifiedDate"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="7">11/2/2016 1:39:03 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E92117E1-AD16-487D-B864-4FDE76C8D35D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFileList"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B8D11050-283D-4640-9009-827ED5994CA8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vFileTypeExtension"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8">.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{638242ED-02A4-4526-A9A8-FBAB5728DA8C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vInsertedRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{502C420B-ECB1-4EF3-B990-C7E418031C04}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vInsertedTotalFileRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{52F69927-E12E-4733-BEB4-312AD49F0045}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vInsertedTotalRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{78BB25DD-ACD7-4F2B-BD65-498EB5A4CC81}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vJobInstanceSourceID"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{56CDA574-1267-4836-B619-537C8E758D61}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vLastRecordsProcessedDate"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="7">11/2/2016 1:42:00 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5599AFE3-0849-42F1-A14A-55CC83F6AF0F}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="(DT_STR, 4, 1252) DATEPART(&quot;yyyy&quot;, @[System::StartTime]) + &quot;-&quot; +&#xA;&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;mm&quot;, @[System::StartTime]), 2) + &quot;-&quot; +&#xA;&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;dd&quot;, @[System::StartTime]), 2) + &quot; &quot; +&#xA;&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;hh&quot;, @[System::StartTime]), 2) + &quot;:&quot; +&#xA;&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;mi&quot;, @[System::StartTime]), 2) + &quot;:&quot; +&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;ss&quot;, @[System::StartTime]), 2) + &quot;.&quot; +&#xA;RIGHT(&quot;000&quot; + (DT_STR, 3, 1252) DATEPART(&quot;ms&quot;, @[System::StartTime]), 3)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vPackageStartDate">
      <DTS:VariableValue
        DTS:DataType="8">2018-04-24 10:27:03.000</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{89E625E4-67E3-4DD9-AAB7-D2312004FF50}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vProcessedRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5EC30E36-9D7B-470C-87A4-B5DD48623731}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vProcessingFileCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{65E76702-A363-4E5F-B3D8-D4FD8E0BE94B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vProcessingFileName"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8">FutureProducts</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{696C7479-BE5E-4B0C-AC78-8C94F5138C30}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vProcessingFullPathName"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D8033B74-9C85-4662-8EBF-F014FB843DBF}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vRejectedTotalRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{876C58FB-7E40-4462-BA56-7F6FDBB9D263}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;[&quot;+@[$Project::pAuditShema]+&quot;]&quot;+&quot;.&quot;+ &quot;[&quot;+ @[$Package::pAuditTable] +&quot;]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSchemaExceptionTable">
      <DTS:VariableValue
        DTS:DataType="8">[Audit].[ExceptionData]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3BC7BCB7-FC00-4031-A3F6-662297453DEE}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;[&quot;+@[$Project::pTargetSchema]+&quot;]&quot;  + &quot;.&quot; + &quot;[&quot;+@[$Package::pTargetTableName]+&quot;]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSchemaTableName">
      <DTS:VariableValue
        DTS:DataType="8">[dbo].[FutureProducts]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{16C810E0-AC53-4DA5-9228-D2F5A61A2300}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::pSourceDatabase]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSourceServerDatabase">
      <DTS:VariableValue
        DTS:DataType="8">LN_Staging</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7DA3FC17-DE18-46E0-B1C0-54452F1A21E7}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;WITH CTE AS(  SELECT  RN = ROW_NUMBER()OVER(PARTITION BY Product_ID ORDER BY Product_ID)  FROM &quot; + @[User::vSchemaTableName] + &quot;) DELETE FROM CTE WHERE RN &gt;1&#xA;&#xA;SELECT @@ROWCOUNT AS DeletedRows&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLDeleteDuplicates">
      <DTS:VariableValue
        DTS:DataType="8">WITH CTE AS(  SELECT  RN = ROW_NUMBER()OVER(PARTITION BY Product_ID ORDER BY Product_ID)  FROM [dbo].[FutureProducts]) DELETE FROM CTE WHERE RN &gt;1

SELECT @@ROWCOUNT AS DeletedRows</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7BD1FABC-0A42-45DD-B7B7-D87F4BEA1B28}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;SELECT ? = Convert(DateTime2, sysdatetime(),121)&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLGetAuditDateTime">
      <DTS:VariableValue
        DTS:DataType="8">SELECT ? = Convert(DateTime2, sysdatetime(),121)</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{520B3F72-F7C7-49C9-BF38-C40FF0A637BE}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DECLARE @LastRecordsProcessedDate DATETIME&#xA;&#xA;SELECT @LastRecordsProcessedDate = ISNULL(LastRecordsProcessedDate, '1900-01-01')&#xA; FROM Audit.Job&#xA;WHERE JobID = ?&#xA;&#xA;SELECT @LastRecordsProcessedDate AS [LastRecordsProcessedDate]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLGetLastRecordProcessedDate">
      <DTS:VariableValue
        DTS:DataType="8">DECLARE @LastRecordsProcessedDate DATETIME

SELECT @LastRecordsProcessedDate = ISNULL(LastRecordsProcessedDate, '1900-01-01')
 FROM Audit.Job
WHERE JobID = ?

SELECT @LastRecordsProcessedDate AS [LastRecordsProcessedDate]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{15DFEDE9-783D-4319-93C7-6A0DEE22E219}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DECLARE&#xA;@IncludeFileGroup bit = 1,&#xA;@IncludeDrop bit = 1,&#xA;@IncludeFillFactor bit = 0&#xA;&#xA;DECLARE @sTableName VARCHAR(150) = ?&#xA;DECLARE @sIndexDesc varchar(MAX)&#xA;DECLARE @sCreateSql varchar(MAX)&#xA;DECLARE @sDropSql varchar(MAX)&#xA;DECLARE @sCreateAllSql varchar(MAX) = ''&#xA;DECLARE @sDropAllSql varchar(MAX) = ''&#xA;&#xA;--- Get all existing indexes, but NOT the primary keys&#xA;DECLARE Indexes_cursor CURSOR&#xA;FOR SELECT&#xA;SC.Name AS SchemaName&#xA;, SO.Name AS TableName&#xA;, SI.Object_Id AS TableId&#xA;, SI.[Name] AS IndexName&#xA;, SI.Index_ID AS IndexId&#xA;, SI.type_desc AS IndexType&#xA;, FG.[Name] AS FileGroupName&#xA;, CASE WHEN SI.Fill_Factor = 0 THEN 100 ELSE SI.Fill_Factor END Fill_Factor&#xA;,SI.is_primary_key&#xA;,SI.is_unique&#xA;FROM sys.indexes SI&#xA;LEFT JOIN sys.filegroups FG&#xA;ON SI.data_space_id = FG.data_space_id&#xA;INNER JOIN sys.objects SO&#xA;ON SI.object_id = SO.object_id&#xA;INNER JOIN sys.schemas SC&#xA;ON SC.schema_id = SO.schema_id&#xA;WHERE ObjectProperty(SI.Object_Id, 'IsUserTable') = 1&#xA;AND SI.[Name] IS NOT NULL&#xA;--AND SI.is_primary_key = 0&#xA;AND SI.is_unique_constraint = 0&#xA;AND IndexProperty(SI.Object_Id, SI.[Name], 'IsStatistics') = 0&#xA;AND SC.name + '.' + SO.name = @sTableName&#xA;ORDER BY Object_name(SI.Object_Id), SI.Index_ID&#xA;&#xA;DECLARE @SchemaName sysname&#xA;DECLARE @TableName sysname&#xA;DECLARE @TableId int&#xA;DECLARE @IndexType SYSNAME&#xA;DECLARE @IndexName sysname&#xA;DECLARE @FileGroupName sysname&#xA;DECLARE @IndexId int&#xA;DECLARE @FillFactor int&#xA;DECLARE @IsPrimaryKey BIT&#xA;DECLARE @IsUnique BIT&#xA;&#xA;DECLARE @NewLine varchar(4000) SET @NewLine = CHAR(13) + CHAR(10)&#xA;DECLARE @Tab varchar(4000) SET @Tab = Space(4)&#xA;&#xA;-- Loop through all indexes&#xA;OPEN Indexes_cursor&#xA;&#xA;FETCH NEXT&#xA;FROM Indexes_cursor&#xA;INTO @SchemaName, @TableName, @TableId, @IndexName,&#xA;@IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique&#xA;&#xA;WHILE (@@Fetch_Status = 0)&#xA;BEGIN&#xA;&#xA;IF (@IsPrimaryKey = 0)&#xA;BEGIN&#xA;  SET @sIndexDesc = '-- Index ' + @IndexName + ' on table ' + @TableName&#xA;  SET @sDropSql = 'IF EXISTS (SELECT 1' + @NewLine&#xA;  + ' FROM sysindexes si' + @NewLine&#xA;  + ' INNER JOIN sysobjects so' + @NewLine&#xA;  + ' ON so.id = si.id' + @NewLine&#xA;  + ' WHERE si.[Name] = ''' + @IndexName + ''' -- Index Name' + @NewLine&#xA;  + ' AND so.[Name] = ''' + @TableName + ''') -- Table Name' + @NewLine&#xA;  + 'BEGIN' + @NewLine&#xA;  + ' DROP INDEX [' + @IndexName + '] ON'&#xA;  + '[' + @SchemaName + '].[' + @TableName + ']' + @NewLine&#xA;  + 'END' + @NewLine&#xA;&#xA;  SET @sCreateSql = 'CREATE'&#xA;&#xA;  -- Check if the index is unique&#xA;  IF (@IsUnique = 1)&#xA;  BEGIN&#xA;  SET @sCreateSql = @sCreateSql + ' UNIQUE'&#xA;  END&#xA;&#xA;  -- Check if the index is clustered&#xA;  IF (@IndexType = 'CLUSTERED')&#xA;  BEGIN&#xA;  SET @sCreateSql = @sCreateSql + ' CLUSTERED'&#xA;  END&#xA;&#xA;&#xA;  SET @sCreateSql = @sCreateSql + ' INDEX [' + @IndexName + ']&#xA;  ON [' + @SchemaName + '].[' + @TableName + ']' + @NewLine + '(' + @NewLine&#xA;END&#xA;&#xA;ELSE&#xA;BEGIN&#xA;       SET @sDropSql = 'ALTER TABLE ' + @SchemaName + '.'+ @TableName + ' DROP CONSTRAINT ' + @IndexName&#xA;&#xA;       SET @sCreateSql = ''&#xA;       SET @sCreateSql = @sCreateSql + 'ALTER TABLE ' + @SchemaName + '.' + @TableName +  + ' ADD CONSTRAINT ' + @IndexName + ' PRIMARY KEY '&#xA;&#xA;       IF (@IndexType = 'NONCLUSTERED')&#xA;       BEGIN&#xA;       SET @sCreateSql = @sCreateSql + ' NONCLUSTERED'&#xA;       END&#xA;&#xA;       SET @sCreateSql = @sCreateSql + '(' &#xA;END&#xA;&#xA;  -- Get all columns of the index&#xA;  DECLARE IndexColumns_cursor CURSOR&#xA;  FOR SELECT SC.[Name],&#xA;  IC.[is_included_column],&#xA;  IC.is_descending_key&#xA;  FROM sys.index_columns IC&#xA;  INNER JOIN sys.columns SC&#xA;  ON IC.Object_Id = SC.Object_Id&#xA;  AND IC.Column_ID = SC.Column_ID&#xA;  WHERE IC.Object_Id = @TableId&#xA;  AND Index_ID = @IndexId&#xA;  ORDER BY IC.key_ordinal&#xA;&#xA;  DECLARE @IxColumn sysname&#xA;  DECLARE @IxIncl bit&#xA;  DECLARE @Desc bit&#xA;  DECLARE @IxIsIncl bit SET @IxIsIncl = 0&#xA;  DECLARE @IxFirstColumn bit SET @IxFirstColumn = 1&#xA;&#xA;  -- Loop through all columns of the index and append them to the CREATE statement&#xA;  OPEN IndexColumns_cursor&#xA;   FETCH NEXT&#xA;   FROM IndexColumns_cursor&#xA;   INTO @IxColumn, @IxIncl, @Desc&#xA;&#xA;  WHILE (@@Fetch_Status = 0)&#xA;  BEGIN&#xA;   IF (@IxFirstColumn = 1)&#xA;   BEGIN&#xA;    SET @IxFirstColumn = 0&#xA;   END&#xA;   ELSE&#xA;   BEGIN&#xA;    --check to see if it's an included column&#xA;    IF (@IxIsIncl = 0) AND (@IxIncl = 1)&#xA;    BEGIN&#xA;     SET @IxIsIncl = 1&#xA;     SET @sCreateSql = @sCreateSql + @NewLine + ')' +&#xA;      @NewLine + 'INCLUDE' + @NewLine + '(' + @NewLine&#xA;    END&#xA;    ELSE&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ',' + @NewLine&#xA;    END&#xA;    --END IF&#xA;   END&#xA;  --END IF&#xA;&#xA;   SET @sCreateSql = @sCreateSql + @Tab + '[' + @IxColumn + ']'&#xA;   -- check if ASC or DESC&#xA;   IF @IxIsIncl = 0&#xA;   BEGIN&#xA;    IF @Desc = 1&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ' DESC'&#xA;    END&#xA;    ELSE&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ' ASC'&#xA;    END&#xA;    --END IF&#xA;   END&#xA;   --END IF&#xA;   FETCH NEXT&#xA;   FROM IndexColumns_cursor&#xA;   INTO @IxColumn, @IxIncl, @Desc&#xA;  END&#xA;  --END WHILE&#xA;&#xA;  CLOSE IndexColumns_cursor&#xA;  DEALLOCATE IndexColumns_cursor&#xA;&#xA;  SET @sCreateSql = @sCreateSql + @NewLine + ') '&#xA;&#xA;  IF @IncludeFillFactor = 1&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + @NewLine +&#xA;   'WITH (FillFactor = ' + Cast(@FillFactor as varchar(13)) + ')' + @NewLine&#xA;  END&#xA;  --END IF&#xA;&#xA;  IF @IncludeFileGroup = 1&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + 'ON ['+ @FileGroupName + ']' + @NewLine&#xA;  END&#xA;  ELSE&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + @NewLine&#xA;  END&#xA;  --END IF&#xA;&#xA;  SET @sCreateAllSql = @sCreateAllSql + '&#xA;'&#xA;&#xA;  SET @sDropAllSql = @sDropAllSql + '&#xA;'&#xA;&#xA;  IF @IncludeDrop = 1&#xA;  BEGIN&#xA;   SET @sDropAllSql = @sDropAllSql + @sDropSql + '&#xA;'&#xA;  END&#xA;&#xA;  SET @sCreateAllSql = @sCreateAllSql + @sCreateSql + '&#xA;'&#xA;&#xA;  FETCH NEXT&#xA;   FROM Indexes_cursor&#xA;   INTO @SchemaName, @TableName, @TableId, @IndexName,&#xA;   @IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique&#xA;END&#xA;--END WHILE&#xA;CLOSE Indexes_cursor&#xA;DEALLOCATE Indexes_cursor&#xA;&#xA;SELECT ? = @sDropAllSql&#xA;SELECT ? = @sCreateAllSql&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLIndexStatement">
      <DTS:VariableValue
        DTS:DataType="8">DECLARE
@IncludeFileGroup bit = 1,
@IncludeDrop bit = 1,
@IncludeFillFactor bit = 0

DECLARE @sTableName VARCHAR(150) = ?
DECLARE @sIndexDesc varchar(MAX)
DECLARE @sCreateSql varchar(MAX)
DECLARE @sDropSql varchar(MAX)
DECLARE @sCreateAllSql varchar(MAX) = ''
DECLARE @sDropAllSql varchar(MAX) = ''

--- Get all existing indexes, but NOT the primary keys
DECLARE Indexes_cursor CURSOR
FOR SELECT
SC.Name AS SchemaName
, SO.Name AS TableName
, SI.Object_Id AS TableId
, SI.[Name] AS IndexName
, SI.Index_ID AS IndexId
, SI.type_desc AS IndexType
, FG.[Name] AS FileGroupName
, CASE WHEN SI.Fill_Factor = 0 THEN 100 ELSE SI.Fill_Factor END Fill_Factor
,SI.is_primary_key
,SI.is_unique
FROM sys.indexes SI
LEFT JOIN sys.filegroups FG
ON SI.data_space_id = FG.data_space_id
INNER JOIN sys.objects SO
ON SI.object_id = SO.object_id
INNER JOIN sys.schemas SC
ON SC.schema_id = SO.schema_id
WHERE ObjectProperty(SI.Object_Id, 'IsUserTable') = 1
AND SI.[Name] IS NOT NULL
--AND SI.is_primary_key = 0
AND SI.is_unique_constraint = 0
AND IndexProperty(SI.Object_Id, SI.[Name], 'IsStatistics') = 0
AND SC.name + '.' + SO.name = @sTableName
ORDER BY Object_name(SI.Object_Id), SI.Index_ID

DECLARE @SchemaName sysname
DECLARE @TableName sysname
DECLARE @TableId int
DECLARE @IndexType SYSNAME
DECLARE @IndexName sysname
DECLARE @FileGroupName sysname
DECLARE @IndexId int
DECLARE @FillFactor int
DECLARE @IsPrimaryKey BIT
DECLARE @IsUnique BIT

DECLARE @NewLine varchar(4000) SET @NewLine = CHAR(13) + CHAR(10)
DECLARE @Tab varchar(4000) SET @Tab = Space(4)

-- Loop through all indexes
OPEN Indexes_cursor

FETCH NEXT
FROM Indexes_cursor
INTO @SchemaName, @TableName, @TableId, @IndexName,
@IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique

WHILE (@@Fetch_Status = 0)
BEGIN

IF (@IsPrimaryKey = 0)
BEGIN
  SET @sIndexDesc = '-- Index ' + @IndexName + ' on table ' + @TableName
  SET @sDropSql = 'IF EXISTS (SELECT 1' + @NewLine
  + ' FROM sysindexes si' + @NewLine
  + ' INNER JOIN sysobjects so' + @NewLine
  + ' ON so.id = si.id' + @NewLine
  + ' WHERE si.[Name] = ''' + @IndexName + ''' -- Index Name' + @NewLine
  + ' AND so.[Name] = ''' + @TableName + ''') -- Table Name' + @NewLine
  + 'BEGIN' + @NewLine
  + ' DROP INDEX [' + @IndexName + '] ON'
  + '[' + @SchemaName + '].[' + @TableName + ']' + @NewLine
  + 'END' + @NewLine

  SET @sCreateSql = 'CREATE'

  -- Check if the index is unique
  IF (@IsUnique = 1)
  BEGIN
  SET @sCreateSql = @sCreateSql + ' UNIQUE'
  END

  -- Check if the index is clustered
  IF (@IndexType = 'CLUSTERED')
  BEGIN
  SET @sCreateSql = @sCreateSql + ' CLUSTERED'
  END


  SET @sCreateSql = @sCreateSql + ' INDEX [' + @IndexName + ']
  ON [' + @SchemaName + '].[' + @TableName + ']' + @NewLine + '(' + @NewLine
END

ELSE
BEGIN
       SET @sDropSql = 'ALTER TABLE ' + @SchemaName + '.'+ @TableName + ' DROP CONSTRAINT ' + @IndexName

       SET @sCreateSql = ''
       SET @sCreateSql = @sCreateSql + 'ALTER TABLE ' + @SchemaName + '.' + @TableName +  + ' ADD CONSTRAINT ' + @IndexName + ' PRIMARY KEY '

       IF (@IndexType = 'NONCLUSTERED')
       BEGIN
       SET @sCreateSql = @sCreateSql + ' NONCLUSTERED'
       END

       SET @sCreateSql = @sCreateSql + '(' 
END

  -- Get all columns of the index
  DECLARE IndexColumns_cursor CURSOR
  FOR SELECT SC.[Name],
  IC.[is_included_column],
  IC.is_descending_key
  FROM sys.index_columns IC
  INNER JOIN sys.columns SC
  ON IC.Object_Id = SC.Object_Id
  AND IC.Column_ID = SC.Column_ID
  WHERE IC.Object_Id = @TableId
  AND Index_ID = @IndexId
  ORDER BY IC.key_ordinal

  DECLARE @IxColumn sysname
  DECLARE @IxIncl bit
  DECLARE @Desc bit
  DECLARE @IxIsIncl bit SET @IxIsIncl = 0
  DECLARE @IxFirstColumn bit SET @IxFirstColumn = 1

  -- Loop through all columns of the index and append them to the CREATE statement
  OPEN IndexColumns_cursor
   FETCH NEXT
   FROM IndexColumns_cursor
   INTO @IxColumn, @IxIncl, @Desc

  WHILE (@@Fetch_Status = 0)
  BEGIN
   IF (@IxFirstColumn = 1)
   BEGIN
    SET @IxFirstColumn = 0
   END
   ELSE
   BEGIN
    --check to see if it's an included column
    IF (@IxIsIncl = 0) AND (@IxIncl = 1)
    BEGIN
     SET @IxIsIncl = 1
     SET @sCreateSql = @sCreateSql + @NewLine + ')' +
      @NewLine + 'INCLUDE' + @NewLine + '(' + @NewLine
    END
    ELSE
    BEGIN
     SET @sCreateSql = @sCreateSql + ',' + @NewLine
    END
    --END IF
   END
  --END IF

   SET @sCreateSql = @sCreateSql + @Tab + '[' + @IxColumn + ']'
   -- check if ASC or DESC
   IF @IxIsIncl = 0
   BEGIN
    IF @Desc = 1
    BEGIN
     SET @sCreateSql = @sCreateSql + ' DESC'
    END
    ELSE
    BEGIN
     SET @sCreateSql = @sCreateSql + ' ASC'
    END
    --END IF
   END
   --END IF
   FETCH NEXT
   FROM IndexColumns_cursor
   INTO @IxColumn, @IxIncl, @Desc
  END
  --END WHILE

  CLOSE IndexColumns_cursor
  DEALLOCATE IndexColumns_cursor

  SET @sCreateSql = @sCreateSql + @NewLine + ') '

  IF @IncludeFillFactor = 1
  BEGIN
   SET @sCreateSql = @sCreateSql + @NewLine +
   'WITH (FillFactor = ' + Cast(@FillFactor as varchar(13)) + ')' + @NewLine
  END
  --END IF

  IF @IncludeFileGroup = 1
  BEGIN
   SET @sCreateSql = @sCreateSql + 'ON ['+ @FileGroupName + ']' + @NewLine
  END
  ELSE
  BEGIN
   SET @sCreateSql = @sCreateSql + @NewLine
  END
  --END IF

  SET @sCreateAllSql = @sCreateAllSql + '
'

  SET @sDropAllSql = @sDropAllSql + '
'

  IF @IncludeDrop = 1
  BEGIN
   SET @sDropAllSql = @sDropAllSql + @sDropSql + '
'
  END

  SET @sCreateAllSql = @sCreateAllSql + @sCreateSql + '
'

  FETCH NEXT
   FROM Indexes_cursor
   INTO @SchemaName, @TableName, @TableId, @IndexName,
   @IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique
END
--END WHILE
CLOSE Indexes_cursor
DEALLOCATE Indexes_cursor

SELECT ? = @sDropAllSql
SELECT ? = @sCreateAllSql</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DB7101EA-A43C-46BE-A387-411A3A9FB995}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;SELECT [Product_ID]&#xA;      ,[Product_Desc]&#xA;      ,[Product_Line_ID]&#xA;      ,[Product_Line_Desc]&#xA;      ,[Product_Class_ID]&#xA;      ,[Product_Class_Desc]&#xA;      ,[Product_Type_ID]&#xA;      ,[Product_Type_Desc]&#xA;      ,[Product_ItemGroup]&#xA;      ,[Product_Unit]&#xA;      ,[Product_DHI_Flag]&#xA;      ,[Product_Item_Type]&#xA;      ,[Product_Kit_Size]&#xA;      ,[Total Unit Cost]&#xA;      ,[LN_Product_Flag]&#xA;      ,[LoadTimeStamp]&#xA;  FROM [dbo].[FutureProducts_Staging]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLSourceStatement">
      <DTS:VariableValue
        DTS:DataType="8">SELECT [Product_ID]
      ,[Product_Desc]
      ,[Product_Line_ID]
      ,[Product_Line_Desc]
      ,[Product_Class_ID]
      ,[Product_Class_Desc]
      ,[Product_Type_ID]
      ,[Product_Type_Desc]
      ,[Product_ItemGroup]
      ,[Product_Unit]
      ,[Product_DHI_Flag]
      ,[Product_Item_Type]
      ,[Product_Kit_Size]
      ,[Total Unit Cost]
      ,[LN_Product_Flag]
      ,[LoadTimeStamp]
  FROM [dbo].[FutureProducts_Staging]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E38B16B8-117F-4001-90FF-15F57E6B0148}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;TRUNCATE TABLE&quot; +&quot; &quot;+ @[User::vSchemaTableName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLTruncateTargetTable">
      <DTS:VariableValue
        DTS:DataType="8">TRUNCATE TABLE [dbo].[FutureProducts]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{26DA802D-26C5-429A-87DB-B95EFE5A613D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLUpdateETLAuditColumn"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8">LoadTimeStamp</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{89B8B366-2EF4-4B76-A261-99D758E76DA8}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;&#xA;DECLARE @LastRecordsProcessedOnDate DATETIME&#xA;DECLARE @InsertTotalRowCounts INT&#xA;DECLARE @UpdatedTotalRowCounts INT&#xA;DECLARE @TotalRows INT&#xA;&#xA;SET @InsertTotalRowCounts = ?&#xA;SET @UpdatedTotalRowCounts = ?&#xA;SET @TotalRows = @InsertTotalRowCounts + @UpdatedTotalRowCounts&#xA;&#xA;SELECT @LastRecordsProcessedOnDate = ( SELECT  DATEADD(dd, -1, MAX(&quot;+ @[User::vSQLUpdateETLAuditColumn] +&quot;))&#xA;FROM  &quot;+@[$Project::pSourceServer]+&quot;.&quot;+@[$Project::pTargetDatabase]+&quot;.&quot; +@[User::vSchemaTableName]+&quot;&#xA;WHERE&quot;+&quot; &quot;+@[User::vSQLUpdateETLAuditColumn] + &quot;&lt; GETDATE())&#xA;&#xA;IF @TotalRows &gt; 0&#xA;&#xA;BEGIN&#xA;&#xA;  UPDATE [Audit].[Job] &#xA;  SET  LastRunStartDate = ?,&#xA;  LastRunEndDate = GETDATE(), &#xA;  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),&#xA;  JobLastStatus = 'Pass',&#xA;  LastRecordsProcessedDate = @LastRecordsProcessedOnDate&#xA; WHERE JobID = ?&#xA;&#xA;END&#xA;ELSE&#xA;BEGIN &#xA;&#xA;  UPDATE [Audit].[Job] &#xA;  SET  LastRunStartDate = ?,&#xA;  LastRunEndDate = GETDATE(), &#xA;  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),&#xA;  JobLastStatus = 'Pass'&#xA;  WHERE JobID = ?&#xA;&#xA;&#xA;END&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLUpdateETLAuditTable">
      <DTS:VariableValue
        DTS:DataType="8">
DECLARE @LastRecordsProcessedOnDate DATETIME
DECLARE @InsertTotalRowCounts INT
DECLARE @UpdatedTotalRowCounts INT
DECLARE @TotalRows INT

SET @InsertTotalRowCounts = ?
SET @UpdatedTotalRowCounts = ?
SET @TotalRows = @InsertTotalRowCounts + @UpdatedTotalRowCounts

SELECT @LastRecordsProcessedOnDate = ( SELECT  DATEADD(dd, -1, MAX(LoadTimeStamp))
FROM  CRONOS.LN_Staging.[dbo].[FutureProducts]
WHERE LoadTimeStamp&lt; GETDATE())

IF @TotalRows &gt; 0

BEGIN

  UPDATE [Audit].[Job] 
  SET  LastRunStartDate = ?,
  LastRunEndDate = GETDATE(), 
  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),
  JobLastStatus = 'Pass',
  LastRecordsProcessedDate = @LastRecordsProcessedOnDate
 WHERE JobID = ?

END
ELSE
BEGIN 

  UPDATE [Audit].[Job] 
  SET  LastRunStartDate = ?,
  LastRunEndDate = GETDATE(), 
  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),
  JobLastStatus = 'Pass'
  WHERE JobID = ?


END</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A5EACADF-40EC-403F-A026-E9FF86D23EF0}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vTargetTableCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{03088E0D-FFA4-4951-A099-5FEF8B96F47A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vUpdatedTotalRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">7,22,PipelineInitialization,18,OnPipelineRowsSent,24,OnPipelinePrePrimeOutput,25,OnPipelinePostPrimeOutput,24,OnPipelinePreEndOfRowset,25,OnPipelinePostEndOfRowset,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelinePostEndOfRowset"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelinePostPrimeOutput"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelinePreEndOfRowset"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelinePrePrimeOutput"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelineRowsSent"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="PipelineInitialization"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{A18BC808-F30E-4556-AB87-74A0FA2A9F2A}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{236f0086-ebaf-4818-8323-45a2c4b8f561}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{95c92665-41d1-48ca-a0fa-5c7b10ef2906}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Delete XLSX File after Processing into the Database">
          <DTS:ForEachEnumerator
            DTS:CreationName="DTS.ForEachFileEnumerator.3"
            DTS:DTSID="{29a05769-4e3e-4d7d-bf49-598bd8370a11}"
            DTS:ObjectName="{D07F0850-C28A-4379-B65F-70790FE204D0}">
            <DTS:PropertyExpression
              DTS:Name="Directory">@[$Project::pFilePath]</DTS:PropertyExpression>
            <DTS:PropertyExpression
              DTS:Name="FileSpec">"*" + ( @[$Package::pFileExtension] == "" ? ".*" : @[$Package::pFileExtension] )</DTS:PropertyExpression>
            <DTS:ObjectData>
              <ForEachFileEnumeratorProperties>
                <FEFEProperty
                  Folder="\\kansas.us\qfs\IS\Shared\For Darlington\SourcePath\" />
                <FEFEProperty
                  FileSpec="*.xlsx" />
                <FEFEProperty
                  FileNameRetrievalType="1" />
                <FEFEProperty
                  Recurse="0" />
              </ForEachFileEnumeratorProperties>
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database\Delete &quot;Future_Products&quot;"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:DelayValidation="True"
              DTS:Description="File System Task"
              DTS:DTSID="{d096f61a-0344-4593-bacb-cfe47544a413}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete &quot;Future_Products&quot;"
              DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <FileSystemData
                  TaskOperationType="DeleteFile"
                  TaskSourcePath="User::vDeleteXLSXFiles"
                  TaskIsSourceVariable="True"
                  TaskDestinationPath="User::vDeleteXLSXFiles"
                  TaskIsDestinationVariable="True" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{B9486148-745D-4B17-A860-75068C96A788}"
              DTS:ObjectName="{B9486148-745D-4B17-A860-75068C96A788}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::vDeleteXLSXFiles" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{816fa3c2-dfc2-4732-9189-037d069d3593}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Loop Through Directory and Get Matching File for Archiving">
          <DTS:ForEachEnumerator
            DTS:CreationName="DTS.ForEachFileEnumerator.3"
            DTS:DTSID="{ef572546-4630-4167-b464-9b771099d6d5}"
            DTS:ObjectName="{98ECA719-89BB-4A7B-84EC-E2D73FDEF701}">
            <DTS:PropertyExpression
              DTS:Name="Directory">@[$Project::pFilePath]</DTS:PropertyExpression>
            <DTS:PropertyExpression
              DTS:Name="FileSpec">"*"+@[$Package::pFileExtension]</DTS:PropertyExpression>
            <DTS:ObjectData>
              <ForEachFileEnumeratorProperties>
                <FEFEProperty
                  Folder="\\kansas.us\qfs\IS\Shared\For Darlington\SourcePath\" />
                <FEFEProperty
                  FileSpec="*.xlsx" />
                <FEFEProperty
                  FileNameRetrievalType="0" />
                <FEFEProperty
                  Recurse="0" />
              </ForEachFileEnumeratorProperties>
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving\Rename  &quot;Future_Products&quot;"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:DelayValidation="True"
              DTS:Description="File System Task"
              DTS:DTSID="{fee4d8ed-2414-4e3b-a64e-ac8f783cb6b0}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Rename  &quot;Future_Products&quot;"
              DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <FileSystemData
                  TaskOperationType="RenameFile"
                  TaskOverwriteDestFile="True"
                  TaskSourcePath="User::vProcessingFullPathName"
                  TaskIsSourceVariable="True"
                  TaskDestinationPath="User::vFileArchiveFullPath"
                  TaskIsDestinationVariable="True" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{4D67CB8D-4647-42A7-AD2E-77A8F515B8E1}"
              DTS:ObjectName="{4D67CB8D-4647-42A7-AD2E-77A8F515B8E1}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::vProcessingFullPathName" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{9390d8a2-0ff5-4f92-8425-2e79541b4b25}"
          DTS:From="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Completion (Audit)"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{f39709ef-758d-4d4c-9fc2-6b58b73f8a27}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Completion (Audit)">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Completion (Audit)\Mark Job As Complete in Job"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{8d82ff23-1318-45ce-9ccd-ff0a7c71b6f9}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Mark Job As Complete in Job"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">@[User::vSQLUpdateETLAuditTable]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1949006D-7410-4029-A3D7-BCD2F833F331}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStatementSource="&#xA;DECLARE @LastRecordsProcessedOnDate DATETIME&#xA;DECLARE @InsertTotalRowCounts INT&#xA;DECLARE @UpdatedTotalRowCounts INT&#xA;DECLARE @TotalRows INT&#xA;&#xA;SET @InsertTotalRowCounts = ?&#xA;SET @UpdatedTotalRowCounts = ?&#xA;SET @TotalRows = @InsertTotalRowCounts + @UpdatedTotalRowCounts&#xA;&#xA;SELECT @LastRecordsProcessedOnDate = ( SELECT  DATEADD(dd, -1, MAX(LoadTimeStamp))&#xA;FROM  CRONOS.LN_Staging.[dbo].[FutureProducts]&#xA;WHERE LoadTimeStamp&lt; GETDATE())&#xA;&#xA;IF @TotalRows &gt; 0&#xA;&#xA;BEGIN&#xA;&#xA;  UPDATE [Audit].[Job] &#xA;  SET  LastRunStartDate = ?,&#xA;  LastRunEndDate = GETDATE(), &#xA;  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),&#xA;  JobLastStatus = 'Pass',&#xA;  LastRecordsProcessedDate = @LastRecordsProcessedOnDate&#xA; WHERE JobID = ?&#xA;&#xA;END&#xA;ELSE&#xA;BEGIN &#xA;&#xA;  UPDATE [Audit].[Job] &#xA;  SET  LastRunStartDate = ?,&#xA;  LastRunEndDate = GETDATE(), &#xA;  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),&#xA;  JobLastStatus = 'Pass'&#xA;  WHERE JobID = ?&#xA;&#xA;&#xA;END" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="User::vCurJobID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vInsertedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vUpdatedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="5"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="6"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="7"
                SQLTask:DtsVariableName="User::vCurJobID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Completion (Audit)\Mark Job as Complete in JobInstance"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{f0158014-504f-4726-80da-1fc83c19228f}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Mark Job as Complete in JobInstance"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1949006D-7410-4029-A3D7-BCD2F833F331}"
              SQLTask:SqlStatementSource="EXEC [Audit].[logJobInstance] &#xA;@JobInstanceID = ?,&#xA;@RowCreatedNumber = ?, &#xA;@RowUpdatedNumber = ?, &#xA;@RowDeletedNumber = ?, &#xA;@RowRejectedNumber=?, &#xA;@JobSuccessIND = 'S',&#xA;@JobCompleteDTS = 'Today';" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vCurJobInstanceID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vInsertedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vUpdatedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="User::vDeletedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="User::vRejectedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get LastRecordsProcessedDate For Package"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{c64c09d1-a849-48dc-8150-169088784b19}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get LastRecordsProcessedDate For Package"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:PropertyExpression
        DTS:Name="SqlStatementSource">@[User::vSQLGetLastRecordProcessedDate]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{1949006D-7410-4029-A3D7-BCD2F833F331}"
          SQLTask:SqlStatementSource="DECLARE @LastRecordsProcessedDate DATETIME&#xA;&#xA;SELECT @LastRecordsProcessedDate = ISNULL(LastRecordsProcessedDate, '1900-01-01')&#xA; FROM Audit.Job&#xA;WHERE JobID = ?&#xA;&#xA;SELECT @LastRecordsProcessedDate AS [LastRecordsProcessedDate]"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="LastRecordsProcessedDate"
            SQLTask:DtsVariableName="User::vLastRecordsProcessedDate" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::vCurJobID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="3"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Initialization"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:DelayValidation="True"
      DTS:Description="Sequence Container"
      DTS:DTSID="{f983f509-68a8-4e40-a344-ef79998caef1}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Initialization">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Initialization\Validate Connection Managers"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{56c7a8df-c471-4cbb-8d9a-4cf28f8c10a0}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Validate Connection Managers"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_e86b6886cee74e0dafd8605660818f62"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_30969731dc73493ba685eb774d83ed48")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_30969731dc73493ba685eb774d83ed48")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_30969731dc73493ba685eb774d83ed48
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			// TODO: Add your code here
            bool failure = false;
            bool fireAgain = true;
            foreach (var ConnMgr in Dts.Connections)
            {
                if (ConnMgr.DelayValidation != true)
                {
                    Dts.Events.FireInformation(1, "", String.Format("ConnectionManager='{0}', ConnectionString='{1}'", ConnMgr.Name, ConnMgr.ConnectionString), "", 0, ref fireAgain);

                    try
                    {
                        ConnMgr.AcquireConnection(null);
                        Dts.Events.FireInformation(1, "", String.Format("Connection acquired successfully on '{0}'", ConnMgr.Name), "", 0, ref fireAgain);
                    }
                    catch (Exception ex)
                    {
                        Dts.Events.FireError(-1, "", String.Format("Failed to acquire connection to '{0}'. Error Message='{1}'", ConnMgr.Name, ex.Message), "", 0);
                        failure = true;
                    }
                }
            }

            if (failure)
                Dts.TaskResult = (int)ScriptResults.Failure;
            else
                Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_30969731dc73493ba685eb774d83ed48.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_30969731dc73493ba685eb774d83ed48.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_30969731dc73493ba685eb774d83ed48.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_30969731dc73493ba685eb774d83ed48.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_30969731dc73493ba685eb774d83ed48.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_30969731dc73493ba685eb774d83ed48</msb:CodeName>
		<msb:DisplayName>ST_30969731dc73493ba685eb774d83ed48</msb:DisplayName>
		<msb:ProjectId>{D565FCDD-21DA-4F6E-B7CF-CA67E75F7887}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_e86b6886cee74e0dafd8605660818f62.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_30969731dc73493ba685eb774d83ed48.Properties.Settings.get_Default():ST_30969731dc73493ba685eb774d83ed48.Properties.Sett" +
    "ings")]

namespace ST_30969731dc73493ba685eb774d83ed48.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="ST_e86b6886cee74e0dafd8605660818f62.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{EA0BD391-2481-4692-AD42-7CD352362A8C}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_30969731dc73493ba685eb774d83ed48</RootNamespace><AssemblyName>ST_e86b6886cee74e0dafd8605660818f62</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <BinaryItem
                Name="ST_e86b6886cee74e0dafd8605660818f62.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAFYbvFoAAAAAAAAAAOAAAiELAQsAABIAAAAIAAAAAAAAfjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAACQxAABXAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAhBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABg
MQAAAAAAAEgAAAACAAUAmCIAAIwOAAABAAAAAAAAAOAhAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABswBwD7AAAAAgAAERYKFwsCKBYAAApvFwAACm8YAAAKEwQ4twAAABEE
bxkAAAoMCG8aAAAKOqQAAAACKBYAAApvGwAAChdycwAAcHJ1AABwCG8cAAAKCG8dAAAKKB4AAApy
cwAAcBYSAW8fAAAKCBRvIAAACiYCKBYAAApvGwAAChdycwAAcHLVAABwCG8cAAAKKCEAAApycwAA
cBYSAW8fAAAK3jgNAigWAAAKbxsAAAoVcnMAAHByKQEAcAhvHAAACglvIgAACigeAAAKcnMAAHAW
byMAAAomFwreABEEbyQAAAo6Pf///wYsDQIoFgAAChdvJQAACioCKBYAAAoWbyUAAAoqAAEQAAAA
AGIAOJoAOCEAAAEeAigmAAAKKgAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMu
UmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJh
bCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRp
bWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAu
MzAzMTkAAAAABQBsAAAAGAQAACN+AACEBAAAqAYAACNTdHJpbmdzAAAAACwLAACgAQAAI1VTAMwM
AAAQAAAAI0dVSUQAAADcDAAAsAEAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6JTMAFgAAAQAA
ACIAAAAFAAAABgAAAAkAAAABAAAAJgAAAAIAAAAPAAAAAgAAAAIAAAADAAAABAAAAAEAAAAEAAAA
AQAAAAEAAAAAAAoAAQAAAAAABgDBALoACgDdAMgADgA9ARQBBgBZAboABgBvAV4BBgCgAYsBBgBX
Aj0CBgCCAnACBgCZAnACBgC2AnACBgDVAnACBgDuAnACBgAHA3ACBgAiA3ACBgA9A3ACBgBWA3AC
BgCPA28DBgCvA28DBgAEBPEDBgAhBLoABgAmBLoABgBKBHACCgB2BGAECgCPBGAEBgCkBG8DDgDG
BBQBDgDoBBQBEgBBBSEFEgBdBSEFEgCABSEFDgCyBRQBBgDvBboABgAfBroAEgA/BiEFAAAAAAEA
AAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAAowAA
ABEABAAKABEAfwETABEArAEXABEA9gE5AAYGHwJHAFaAJwJKAFaALwJKAFAgAAAAAIMYvAEbAAEA
WCAAAAAAkwjCAR8AAQCRIAAAAACTCNYBJAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggGAj0AAgCz
IAAAAACGGLwBGwACAKcgAAAAAJEYvwSJAAIAvCAAAAAAhgAaAhsAAgDUIQAAAACGGLwBGwACAAAA
AQA3AjkAvAFYAEEAvAFYAEkAvAFYAFEAvAFYAFkAvAFYAGEAvAFYAGkAvAFYAHEAvAFYAHkAvAFY
AIEAvAFYAIkAvAFdAJEAvAEbAJkAvAEbAAkAvAEbAKEAOARiAKEAUwRpACkAvAFuALkAvAF6AMkA
vAEbABEAvAEbANEAvAEbABkA+gSNANkATQWSAOEAcgWXAOkAkgWcAPEAngWhANkAxgWlAPEA0QWq
APEA2gWqAAEB9gWuAPkA/QW1APEADQbAAAEB9gXFAAkBKQaqAPkANQbLABEBTQahANkAVgZdABkA
vAEbAAgAFABOAAgAGABTACkAkwCAAC4AGwBRAS4AIwBRAS4AYwCPAS4ACwDgAC4AEwAoAS4AMwAo
AS4AKwBXAS4AOwBmAS4AQwBRAS4AWwCGAUMAawBTAEkAkwCAAGEAmwBTAIMAqwBTAHUA1AACAAEA
AwADAAAAbwEvAAAA7gE0AAAAEgJCAAIAAgADAAIAAwAFAAEABAAFAAIABQAHAASAAAABAAAABRrr
ZwAAAAAAAM0DAAAEAAAAAAAAAAAAAAABALEAAAAAAAQAAAAAAAAAAAAAAAEAugAAAAAACwAAAAAA
AAAAAAAACgD1AAAAAAALAAAAAAAAAAAAAAAKAAIFAAAAAAAAAAABAAAAZQYAAAUABAAAAAA8TW9k
dWxlPgBTVF9lODZiNjg4NmNlZTc0ZTBkYWZkODYwNTY2MDgxOGY2Mi5kbGwAUmVzb3VyY2VzAFNU
XzMwOTY5NzMxZGM3MzQ5M2JhNjg1ZWI3NzRkODNlZDQ4LlByb3BlcnRpZXMAU2V0dGluZ3MAU2Ny
aXB0TWFpbgBTVF8zMDk2OTczMWRjNzM0OTNiYTY4NWViNzc0ZDgzZWQ0OABTY3JpcHRSZXN1bHRz
AG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVu
dW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkds
b2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJj
ZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UA
Z2V0X0RlZmF1bHQARGVmYXVsdABNYWluAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAHZhbHVlAFN5
c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5S
ZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBB
c3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1i
bHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGls
YXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBT
VF9lODZiNjg4NmNlZTc0ZTBkYWZkODYwNTY2MDgxOGY2MgBTeXN0ZW0uRGlhZ25vc3RpY3MARGVi
dWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVG
cm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwARWRp
dG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJh
dGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAU2Ny
aXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBDb25uZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMA
Q29ubmVjdGlvbkVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgBDb25uZWN0aW9uTWFuYWdlcgBnZXRf
Q3VycmVudABnZXRfRGVsYXlWYWxpZGF0aW9uAEV2ZW50c09iamVjdFdyYXBwZXIAZ2V0X0V2ZW50
cwBnZXRfTmFtZQBnZXRfQ29ubmVjdGlvblN0cmluZwBTdHJpbmcARm9ybWF0AEZpcmVJbmZvcm1h
dGlvbgBBY3F1aXJlQ29ubmVjdGlvbgBFeGNlcHRpb24AZ2V0X01lc3NhZ2UARmlyZUVycm9yAER0
c0VudW1lcmF0b3IATW92ZU5leHQAc2V0X1Rhc2tSZXN1bHQAU1RfMzA5Njk3MzFkYzczNDkzYmE2
ODVlYjc3NGQ4M2VkNDguUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAABxUwBUAF8AMwAw
ADkANgA5ADcAMwAxAGQAYwA3ADMANAA5ADMAYgBhADYAOAA1AGUAYgA3ADcANABkADgAMwBlAGQA
NAA4AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAABAF9DAG8AbgBu
AGUAYwB0AGkAbwBuAE0AYQBuAGEAZwBlAHIAPQAnAHsAMAB9ACcALAAgAEMAbwBuAG4AZQBjAHQA
aQBvAG4AUwB0AHIAaQBuAGcAPQAnAHsAMQB9ACcAAVNDAG8AbgBuAGUAYwB0AGkAbwBuACAAYQBj
AHEAdQBpAHIAZQBkACAAcwB1AGMAYwBlAHMAcwBmAHUAbABsAHkAIABvAG4AIAAnAHsAMAB9ACcA
AXVGAGEAaQBsAGUAZAAgAHQAbwAgAGEAYwBxAHUAaQByAGUAIABjAG8AbgBuAGUAYwB0AGkAbwBu
ACAAdABvACAAJwB7ADAAfQAnAC4AIABFAHIAcgBvAHIAIABNAGUAcwBzAGEAZwBlAD0AJwB7ADEA
fQAnAAEAYQ0ZCLwabkiVTfHTvIiYRwAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAAS
FQQAABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMAgYIAwYRFAQAAAAABAEAAAAEIAEB
DgQgAQEIBgABElERVQQgABJZBiACAQ4SWQQHARIVBSABARFhCAEAAgAAAAAAAwAAAQQgABJtBCAA
EnEEIAASdQQgABJ5AyAAAgQgABJ9AyAADgYAAw4OHBwKIAYBCA4ODggQAgQgARwcBQACDg4cCCAF
AggODg4ICwcFAgISeRKAhRJ1RwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFt
ZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0KAEAI1NUXzMwOTY5NzMxZGM3MzQ5M2Jh
Njg1ZWI3NzRkODNlZDQ4AAAFAQAAAAAOAQAJTWljcm9zb2Z0AAAfAQAaQ29weXJpZ2h0IEAgTWlj
cm9zb2Z0IDIwMTYAAAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEAAEwx
AAAAAAAAAAAAAG4xAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgMQAAAAAAAAAAAAAAAAAAAAAA
AAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAA+AMAAAAAAAAAAAAA+AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAOtnBRoAAAEA62cFGj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBFgDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAADQDAAABADAAMAAw
ADAAMAA0AGIAMAAAADQACgABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAATQBpAGMAcgBvAHMA
bwBmAHQAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMwAw
ADkANgA5ADcAMwAxAGQAYwA3ADMANAA5ADMAYgBhADYAOAA1AGUAYgA3ADcANABkADgAMwBlAGQA
NAA4AAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADYANgA2ADEALgAy
ADYANgAwADMAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AZQA4ADYA
YgA2ADgAOAA2AGMAZQBlADcANABlADAAZABhAGYAZAA4ADYAMAA1ADYANgAwADgAMQA4AGYANgAy
AC4AZABsAGwAAABcABsAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIA
aQBnAGgAdAAgAEAAIABNAGkAYwByAG8AcwBvAGYAdAAgADIAMAAxADYAAAAAAHgAKAABAE8AcgBp
AGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBlADgANgBiADYAOAA4ADYAYwBlAGUA
NwA0AGUAMABkAGEAZgBkADgANgAwADUANgA2ADAAOAAxADgAZgA2ADIALgBkAGwAbAAAAGgAJAAB
AFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMwAwADkANgA5ADcAMwAxAGQAYwA3ADMA
NAA5ADMAYgBhADYAOAA1AGUAYgA3ADcANABkADgAMwBlAGQANAA4AAAARAAPAAEAUAByAG8AZAB1
AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADYANgAxAC4AMgA2ADYAMAAzAAAAAABIAA8A
AQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADYANgAxAC4AMgA2
ADYAMAAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAIAxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Initialization (Audit)"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{c790c9e9-ba36-42ae-a63c-47870741088a}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Initialization (Audit)">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Execute cmd shell and retrieve environment variable information"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{1cd6a7cd-294a-4c9f-bdcc-37674dd2d5b1}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Execute cmd shell and retrieve environment variable information"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_8c23741a9e474b219c30e01d2cefa5cc"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::vEnvironmentTEXT">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_8c23741a9e474b219c30e01d2cefa5cc.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{D4060731-5D6B-4076-8658-D7CD517BBA1F}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_85ad09a2ba584afbbc2c9e71dd29ae45</RootNamespace><AssemblyName>ST_8c23741a9e474b219c30e01d2cefa5cc</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.IO;
using System.Diagnostics;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_1ac71edf38774ce3aaaabd70002d56d2
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            string sCmdOutput = "";

            System.Diagnostics.Process process = new System.Diagnostics.Process();
            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();

            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
            startInfo.RedirectStandardInput = true;
            startInfo.RedirectStandardOutput = true;
            startInfo.RedirectStandardError = true;
            startInfo.UseShellExecute = false;

            startInfo.FileName = "cmd.exe";
            startInfo.Arguments = @"/c set";
            process.StartInfo = startInfo;

            process.Start();

            StreamReader reader = process.StandardOutput;

            string line;
            while ((line = reader.ReadLine()) != null)
            {
                sCmdOutput = sCmdOutput + line + "|";
            }

            sCmdOutput = sCmdOutput.Substring(0, sCmdOutput.Length - 1);

            Dts.Variables["User::vEnvironmentTEXT"].Value = sCmdOutput;
            //MessageBox.Show(sCmdOutput);

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_85ad09a2ba584afbbc2c9e71dd29ae45</msb:CodeName>
		<msb:DisplayName>ST_85ad09a2ba584afbbc2c9e71dd29ae45</msb:DisplayName>
		<msb:ProjectId>{530640B6-CCD4-47CD-A6DE-297942E224C8}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_8c23741a9e474b219c30e01d2cefa5cc.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Settings.get_Default():ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Sett" +
    "ings")]

namespace ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_85ad09a2ba584afbbc2c9e71dd29ae45")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_85ad09a2ba584afbbc2c9e71dd29ae45")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_8c23741a9e474b219c30e01d2cefa5cc.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAA5DtVoAAAAAAAAAAOAAAiELAQsAABIAAAAIAAAAAAAAvjAA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGgwAABTAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAxBAAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACg
MAAAAAAAAEgAAAACAAUAQCIAACgOAAABAAAAAAAAAIghAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwBACzAAAAAgAAEXJzAABwCnMWAAAKC3MXAAAKDAgXbxgAAAoIF28Z
AAAKCBdvGgAACggXbxsAAAoIFm8cAAAKCHJ1AABwbx0AAAoIcoUAAHBvHgAACgcIbx8AAAoHbyAA
AAomB28hAAAKDSsOBhEEcpMAAHAoIgAACgoJbyMAAAolEwQt5wYWBm8kAAAKF1lvJQAACgoCKCYA
AApvJwAACnKXAABwbygAAAoGbykAAAoCKCYAAAoWbyoAAAoqHgIoKwAACioAAAAAALQAAADOyu++
AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNp
b249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRl
MDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFE
ULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAA8BAAAI34AAKgEAAD4BgAA
I1N0cmluZ3MAAAAAoAsAAMgAAAAjVVMAaAwAABAAAAAjR1VJRAAAAHgMAACwAQAAI0Jsb2IAAAAA
AAAAAgAAAVcdogEJAwAAAPolMwAWAAABAAAAIwAAAAUAAAAGAAAACQAAAAEAAAArAAAAAgAAAA8A
AAACAAAAAgAAAAMAAAAEAAAAAQAAAAQAAAABAAAAAQAAAAAACgABAAAAAAAGAMEAugAKAN0AyAAO
AD0BFAEGAFkBugAGAG8BXgEGAKABiwEGAFcCPQIGAIICcAIGAJkCcAIGALYCcAIGANUCcAIGAO4C
cAIGAAcDcAIGACIDcAIGAD0DcAIGAFYDcAIGAI8DbwMGAK8DbwMGAAQE8QMGACEEugAGACYEugAG
AEoEcAIKAHYEYAQKAI8EYAQGAKQEbwMOAMYEFAEKAOgE8QMKAPAE8QMKAAEF8QMGAMAFtgUGAOAF
ugAGAO4FtgUOABcGFAESAHAGUAYSAIgGUAYAAAAAAQAAAAAAAQABAAAAEAAyADwABQABAAEAAAEQ
AGsAPAAJAAMABQABABAAdAB/AA0ABAAIAAMBAACjAAAAEQAEAAoAEQB/ARMAEQCsARcAEQD2ATkA
BgYfAkcAVoAnAkoAVoAvAkoAUCAAAAAAgxi8ARsAAQBYIAAAAACTCMIBHwABAJEgAAAAAJMI1gEk
AAEAmCAAAAAAkwjiASkAAQCgIAAAAACWCAYCPQACALMgAAAAAIYYvAEbAAIApyAAAAAAkRi/BIkA
AgC8IAAAAACGABoCGwACAHshAAAAAIYYvAEbAAIAAAABADcCOQC8AVgAQQC8AVgASQC8AVgAUQC8
AVgAWQC8AVgAYQC8AVgAaQC8AVgAcQC8AVgAeQC8AVgAgQC8AVgAiQC8AV0AkQC8ARsAmQC8ARsA
CQC8ARsAoQA4BGIAoQBTBGkAKQC8AW4AuQC8AXoAyQC8ARsAEQC8ARsA0QC8ARsA2QC8ARsA4QC8
ARsA4QAUBY0A4QAkBZMA4QA+BZMA4QBZBZMA4QBzBZMA4QCHBVgA4QCUBVgA2QCiBZgA2QCwBZ4A
2QDNBaIA+QDnBacAAQH5Ba4A+QACBrIA+QANBrYAGQApBrwACQF6BsIAEQGRBsgAGQGaBs8ACQGk
Bl0AGQC8ARsACAAUAE4ACAAYAFMAKQCTAIAALgAbAFABLgAjAFABLgBjAI4BLgALAN8ALgATACcB
LgAzACcBLgArAFYBLgA7AGUBLgBDAFABLgBbAIUBQwBrAFMASQCTAIAAYQCbAFMAgwCrAFMAdQDU
AAIAAQADAAMAAABvAS8AAADuATQAAAASAkIAAgACAAMAAgADAAUAAQAEAAUAAgAFAAcABIAAAAEA
AAAAGodHAAAAAAAAzQMAAAQAAAAAAAAAAAAAAAEAsQAAAAAABAAAAAAAAAAAAAAAAQC6AAAAAAAL
AAAAAAAAAAAAAAAKAPUAAAAAAAsAAAAAAAAAAAAAAAoAMQYAAAAAAAAAAAEAAACzBgAABQAEAAAA
ADxNb2R1bGU+AFNUXzhjMjM3NDFhOWU0NzRiMjE5YzMwZTAxZDJjZWZhNWNjLmRsbABSZXNvdXJj
ZXMAU1RfODVhZDA5YTJiYTU4NGFmYmJjMmM5ZTcxZGQyOWFlNDUuUHJvcGVydGllcwBTZXR0aW5n
cwBTY3JpcHRNYWluAFNUXzFhYzcxZWRmMzg3NzRjZTNhYWFhYmQ3MDAwMmQ1NmQyAFNjcmlwdFJl
c3VsdHMAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNh
dGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0
LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJh
c2UARW51bQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jl
c291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0
YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1haW4AdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAdmFs
dWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lz
dGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9u
QXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlB
dHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmli
dXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBB
c3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBD
b21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmli
dXRlAFNUXzhjMjM3NDFhOWU0NzRiMjE5YzMwZTAxZDJjZWZhNWNjAFN5c3RlbS5EaWFnbm9zdGlj
cwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0
VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2Rl
bABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJH
ZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0
ZQBQcm9jZXNzAFByb2Nlc3NTdGFydEluZm8AUHJvY2Vzc1dpbmRvd1N0eWxlAHNldF9XaW5kb3dT
dHlsZQBzZXRfUmVkaXJlY3RTdGFuZGFyZElucHV0AHNldF9SZWRpcmVjdFN0YW5kYXJkT3V0cHV0
AHNldF9SZWRpcmVjdFN0YW5kYXJkRXJyb3IAc2V0X1VzZVNoZWxsRXhlY3V0ZQBzZXRfRmlsZU5h
bWUAc2V0X0FyZ3VtZW50cwBzZXRfU3RhcnRJbmZvAFN0YXJ0AFN5c3RlbS5JTwBTdHJlYW1SZWFk
ZXIAZ2V0X1N0YW5kYXJkT3V0cHV0AFN0cmluZwBDb25jYXQAVGV4dFJlYWRlcgBSZWFkTGluZQBn
ZXRfTGVuZ3RoAFN1YnN0cmluZwBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlh
YmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAHNldF9WYWx1ZQBzZXRfVGFza1Jl
c3VsdABTVF84NWFkMDlhMmJhNTg0YWZiYmMyYzllNzFkZDI5YWU0NS5Qcm9wZXJ0aWVzLlJlc291
cmNlcy5yZXNvdXJjZXMAAAAAcVMAVABfADgANQBhAGQAMAA5AGEAMgBiAGEANQA4ADQAYQBmAGIA
YgBjADIAYwA5AGUANwAxAGQAZAAyADkAYQBlADQANQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBS
AGUAcwBvAHUAcgBjAGUAcwAAAQAPYwBtAGQALgBlAHgAZQAADS8AYwAgAHMAZQB0AAADfAAALVUA
cwBlAHIAOgA6AHYARQBuAHYAaQByAG8AbgBtAGUAbgB0AFQARQBYAFQAAAAAAMbfL2w73ntCp76d
T4sac6YACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAASGQUAAQESGQQIABIV
BAgAEhkDBhIMBAAAEgwECAASDAIGCAMGERQEAAAAAAQBAAAABCABAQ4EIAEBCAYAARJREVUEIAAS
WQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMAAAEFIAEBEXUEIAEBAgUgAQEScQMgAAIEIAAS
eQYAAw4ODg4DIAAOAyAACAUgAg4ICAUgABKAhQUgABKAiQYgARKAjRwEIAEBHAoHBQ4SbRJxEnkO
RwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAu
TkVUIEZyYW1ld29yayA0KAEAI1NUXzg1YWQwOWEyYmE1ODRhZmJiYzJjOWU3MWRkMjlhZTQ1AAAF
AQAAAAAOAQAJTWljcm9zb2Z0AAAfAQAaQ29weXJpZ2h0IEAgTWljcm9zb2Z0IDIwMTYAAAgBAAgA
AAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEAAACQMAAAAAAAAAAAAACuMAAAACAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAoDAAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3Jl
ZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAA+AMAAAAAAAAAAAAA+AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAIdHABoAAAEAh0cAGj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBFgDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAADQDAAABADAAMAAw
ADAAMAA0AGIAMAAAADQACgABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAATQBpAGMAcgBvAHMA
bwBmAHQAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AOAA1
AGEAZAAwADkAYQAyAGIAYQA1ADgANABhAGYAYgBiAGMAMgBjADkAZQA3ADEAZABkADIAOQBhAGUA
NAA1AAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADYANgA1ADYALgAx
ADgAMwAxADEAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AOABjADIA
MwA3ADQAMQBhADkAZQA0ADcANABiADIAMQA5AGMAMwAwAGUAMAAxAGQAMgBjAGUAZgBhADUAYwBj
AC4AZABsAGwAAABcABsAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIA
aQBnAGgAdAAgAEAAIABNAGkAYwByAG8AcwBvAGYAdAAgADIAMAAxADYAAAAAAHgAKAABAE8AcgBp
AGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwA4AGMAMgAzADcANAAxAGEAOQBlADQA
NwA0AGIAMgAxADkAYwAzADAAZQAwADEAZAAyAGMAZQBmAGEANQBjAGMALgBkAGwAbAAAAGgAJAAB
AFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AOAA1AGEAZAAwADkAYQAyAGIAYQA1ADgA
NABhAGYAYgBiAGMAMgBjADkAZQA3ADEAZABkADIAOQBhAGUANAA1AAAARAAPAAEAUAByAG8AZAB1
AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADYANQA2AC4AMQA4ADMAMQAxAAAAAABIAA8A
AQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADYANQA2AC4AMQA4
ADMAMQAxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAMAwAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Log Environment"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{50daf53b-b3be-4c3c-b3ec-9dfda862551c}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Log Environment"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1949006D-7410-4029-A3D7-BCD2F833F331}"
              SQLTask:SqlStatementSource="INSERT INTO Audit.Environment (&#xA;                RunningJobsText, &#xA;                EnvironmentText, &#xA;                JobInstanceID) VALUES &#xA;                (?, ?, ?)&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="255" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vEnvironmentTEXT"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="8000" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vCurJobInstanceID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Log Processed  Table JobInstanceSource"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{58f9aa80-65cc-4f4a-82d0-92a02a3f8da7}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Log Processed  Table JobInstanceSource"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1949006D-7410-4029-A3D7-BCD2F833F331}"
              SQLTask:SqlStatementSource="EXEC Audit.LogJobInstanceSource &#xA; @JobInstanceID = ?, &#xA;@SourceNAME = ?,  &#xA;@SourceLocationNAME = ?, &#xA;@JobInstanceSourceID=? output, &#xA;@SourceTypeIND = 'T' " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vCurJobInstanceID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="$Package::pSourceTableName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="500" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vSourceServerDatabase"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="1000" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="User::vJobInstanceSourceID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Populate ETLUser"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{adaeccf1-7c90-483f-86a2-ed5dced83b96}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate ETLUser"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1949006D-7410-4029-A3D7-BCD2F833F331}"
              SQLTask:SqlStatementSource="Exec [Audit].[LogETLUser] @UserNAME = ?, @UserEMAIL = ?, @UserID = ? OUTPUT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::UserName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="256" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="$Project::pNotificationEmail"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="256" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vCurUserID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Populate Joblog"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{d03d3a39-42b9-4cba-a075-62e781a116b7}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate Joblog"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1949006D-7410-4029-A3D7-BCD2F833F331}"
              SQLTask:SqlStatementSource="EXEC [Audit].[LogJobOnBegin] &#xA;@JobName = ?,&#xA;@PackageID = ?,&#xA;@JobID = ? OUTPUT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="255" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::PackageID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="72"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vCurJobID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Populate new Job Instance"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{4ed65fea-589c-462e-bf02-adbd17a10236}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate new Job Instance"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1949006D-7410-4029-A3D7-BCD2F833F331}"
              SQLTask:SqlStatementSource="EXEC [Audit].[logJobInstance] &#xA;@JobID = ?, &#xA;@UserID = ?,&#xA;@JobInstanceParentID = ?,&#xA;@packageVersionID = ?,&#xA;@ExecutionID = ?,&#xA;@JobStartDTS = ?, &#xA;@currentJobInstanceID = ? OUTPUT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vCurJobID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vCurUserID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="$Package::pJobInstanceParentID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="System::VersionGUID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="72"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="System::ExecutionInstanceGUID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="72"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="5"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="6"
                SQLTask:DtsVariableName="User::vCurJobInstanceID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{e5d87b3f-4b28-4ac5-85a9-398184176f5f}"
          DTS:From="Package\Initialization (Audit)\Populate ETLUser"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Initialization (Audit)\Populate Joblog" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{cbea96a0-9595-4433-b518-76d75c8ed9c3}"
          DTS:From="Package\Initialization (Audit)\Populate Joblog"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Initialization (Audit)\Populate new Job Instance" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{37e99a21-ce3a-433d-ad6d-19be34b291cc}"
          DTS:From="Package\Initialization (Audit)\Populate new Job Instance"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Initialization (Audit)\Log Processed  Table JobInstanceSource" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{67d123d8-0713-4816-a3cf-41024b8f274b}"
          DTS:From="Package\Initialization (Audit)\Execute cmd shell and retrieve environment variable information"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Initialization (Audit)\Log Environment" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{7cf2fa0b-0d2e-43f9-95d1-b06567fe9096}"
          DTS:EvalOp="3"
          DTS:Expression="@[$Project::pDebugMode]  == True"
          DTS:From="Package\Initialization (Audit)\Log Processed  Table JobInstanceSource"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Initialization (Audit)\Execute cmd shell and retrieve environment variable information" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:DelayValidation="True"
      DTS:Description="Sequence Container"
      DTS:DTSID="{e2ab7409-d183-4f44-9fc3-ea29e62b0071}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Excel (xls and xlsx) Files from Source to Destination">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{f7ccfd38-c2b7-49df-a2ce-3aafebe5adaa}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Detect index and prepare drop and create index script"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">@[User::vSQLIndexStatement]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B4BFA6BD-2DD7-4AB9-ABF4-B4BEC305BCE0}"
              SQLTask:SqlStatementSource="DECLARE&#xA;@IncludeFileGroup bit = 1,&#xA;@IncludeDrop bit = 1,&#xA;@IncludeFillFactor bit = 0&#xA;&#xA;DECLARE @sTableName VARCHAR(150) = ?&#xA;DECLARE @sIndexDesc varchar(MAX)&#xA;DECLARE @sCreateSql varchar(MAX)&#xA;DECLARE @sDropSql varchar(MAX)&#xA;DECLARE @sCreateAllSql varchar(MAX) = ''&#xA;DECLARE @sDropAllSql varchar(MAX) = ''&#xA;&#xA;--- Get all existing indexes, but NOT the primary keys&#xA;DECLARE Indexes_cursor CURSOR&#xA;FOR SELECT&#xA;SC.Name AS SchemaName&#xA;, SO.Name AS TableName&#xA;, SI.Object_Id AS TableId&#xA;, SI.[Name] AS IndexName&#xA;, SI.Index_ID AS IndexId&#xA;, SI.type_desc AS IndexType&#xA;, FG.[Name] AS FileGroupName&#xA;, CASE WHEN SI.Fill_Factor = 0 THEN 100 ELSE SI.Fill_Factor END Fill_Factor&#xA;,SI.is_primary_key&#xA;,SI.is_unique&#xA;FROM sys.indexes SI&#xA;LEFT JOIN sys.filegroups FG&#xA;ON SI.data_space_id = FG.data_space_id&#xA;INNER JOIN sys.objects SO&#xA;ON SI.object_id = SO.object_id&#xA;INNER JOIN sys.schemas SC&#xA;ON SC.schema_id = SO.schema_id&#xA;WHERE ObjectProperty(SI.Object_Id, 'IsUserTable') = 1&#xA;AND SI.[Name] IS NOT NULL&#xA;--AND SI.is_primary_key = 0&#xA;AND SI.is_unique_constraint = 0&#xA;AND IndexProperty(SI.Object_Id, SI.[Name], 'IsStatistics') = 0&#xA;AND SC.name + '.' + SO.name = @sTableName&#xA;ORDER BY Object_name(SI.Object_Id), SI.Index_ID&#xA;&#xA;DECLARE @SchemaName sysname&#xA;DECLARE @TableName sysname&#xA;DECLARE @TableId int&#xA;DECLARE @IndexType SYSNAME&#xA;DECLARE @IndexName sysname&#xA;DECLARE @FileGroupName sysname&#xA;DECLARE @IndexId int&#xA;DECLARE @FillFactor int&#xA;DECLARE @IsPrimaryKey BIT&#xA;DECLARE @IsUnique BIT&#xA;&#xA;DECLARE @NewLine varchar(4000) SET @NewLine = CHAR(13) + CHAR(10)&#xA;DECLARE @Tab varchar(4000) SET @Tab = Space(4)&#xA;&#xA;-- Loop through all indexes&#xA;OPEN Indexes_cursor&#xA;&#xA;FETCH NEXT&#xA;FROM Indexes_cursor&#xA;INTO @SchemaName, @TableName, @TableId, @IndexName,&#xA;@IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique&#xA;&#xA;WHILE (@@Fetch_Status = 0)&#xA;BEGIN&#xA;&#xA;IF (@IsPrimaryKey = 0)&#xA;BEGIN&#xA;  SET @sIndexDesc = '-- Index ' + @IndexName + ' on table ' + @TableName&#xA;  SET @sDropSql = 'IF EXISTS (SELECT 1' + @NewLine&#xA;  + ' FROM sysindexes si' + @NewLine&#xA;  + ' INNER JOIN sysobjects so' + @NewLine&#xA;  + ' ON so.id = si.id' + @NewLine&#xA;  + ' WHERE si.[Name] = ''' + @IndexName + ''' -- Index Name' + @NewLine&#xA;  + ' AND so.[Name] = ''' + @TableName + ''') -- Table Name' + @NewLine&#xA;  + 'BEGIN' + @NewLine&#xA;  + ' DROP INDEX [' + @IndexName + '] ON'&#xA;  + '[' + @SchemaName + '].[' + @TableName + ']' + @NewLine&#xA;  + 'END' + @NewLine&#xA;&#xA;  SET @sCreateSql = 'CREATE'&#xA;&#xA;  -- Check if the index is unique&#xA;  IF (@IsUnique = 1)&#xA;  BEGIN&#xA;  SET @sCreateSql = @sCreateSql + ' UNIQUE'&#xA;  END&#xA;&#xA;  -- Check if the index is clustered&#xA;  IF (@IndexType = 'CLUSTERED')&#xA;  BEGIN&#xA;  SET @sCreateSql = @sCreateSql + ' CLUSTERED'&#xA;  END&#xA;&#xA;&#xA;  SET @sCreateSql = @sCreateSql + ' INDEX [' + @IndexName + ']&#xA;  ON [' + @SchemaName + '].[' + @TableName + ']' + @NewLine + '(' + @NewLine&#xA;END&#xA;&#xA;ELSE&#xA;BEGIN&#xA;       SET @sDropSql = 'ALTER TABLE ' + @SchemaName + '.'+ @TableName + ' DROP CONSTRAINT ' + @IndexName&#xA;&#xA;       SET @sCreateSql = ''&#xA;       SET @sCreateSql = @sCreateSql + 'ALTER TABLE ' + @SchemaName + '.' + @TableName +  + ' ADD CONSTRAINT ' + @IndexName + ' PRIMARY KEY '&#xA;&#xA;       IF (@IndexType = 'NONCLUSTERED')&#xA;       BEGIN&#xA;       SET @sCreateSql = @sCreateSql + ' NONCLUSTERED'&#xA;       END&#xA;&#xA;       SET @sCreateSql = @sCreateSql + '(' &#xA;END&#xA;&#xA;  -- Get all columns of the index&#xA;  DECLARE IndexColumns_cursor CURSOR&#xA;  FOR SELECT SC.[Name],&#xA;  IC.[is_included_column],&#xA;  IC.is_descending_key&#xA;  FROM sys.index_columns IC&#xA;  INNER JOIN sys.columns SC&#xA;  ON IC.Object_Id = SC.Object_Id&#xA;  AND IC.Column_ID = SC.Column_ID&#xA;  WHERE IC.Object_Id = @TableId&#xA;  AND Index_ID = @IndexId&#xA;  ORDER BY IC.key_ordinal&#xA;&#xA;  DECLARE @IxColumn sysname&#xA;  DECLARE @IxIncl bit&#xA;  DECLARE @Desc bit&#xA;  DECLARE @IxIsIncl bit SET @IxIsIncl = 0&#xA;  DECLARE @IxFirstColumn bit SET @IxFirstColumn = 1&#xA;&#xA;  -- Loop through all columns of the index and append them to the CREATE statement&#xA;  OPEN IndexColumns_cursor&#xA;   FETCH NEXT&#xA;   FROM IndexColumns_cursor&#xA;   INTO @IxColumn, @IxIncl, @Desc&#xA;&#xA;  WHILE (@@Fetch_Status = 0)&#xA;  BEGIN&#xA;   IF (@IxFirstColumn = 1)&#xA;   BEGIN&#xA;    SET @IxFirstColumn = 0&#xA;   END&#xA;   ELSE&#xA;   BEGIN&#xA;    --check to see if it's an included column&#xA;    IF (@IxIsIncl = 0) AND (@IxIncl = 1)&#xA;    BEGIN&#xA;     SET @IxIsIncl = 1&#xA;     SET @sCreateSql = @sCreateSql + @NewLine + ')' +&#xA;      @NewLine + 'INCLUDE' + @NewLine + '(' + @NewLine&#xA;    END&#xA;    ELSE&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ',' + @NewLine&#xA;    END&#xA;    --END IF&#xA;   END&#xA;  --END IF&#xA;&#xA;   SET @sCreateSql = @sCreateSql + @Tab + '[' + @IxColumn + ']'&#xA;   -- check if ASC or DESC&#xA;   IF @IxIsIncl = 0&#xA;   BEGIN&#xA;    IF @Desc = 1&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ' DESC'&#xA;    END&#xA;    ELSE&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ' ASC'&#xA;    END&#xA;    --END IF&#xA;   END&#xA;   --END IF&#xA;   FETCH NEXT&#xA;   FROM IndexColumns_cursor&#xA;   INTO @IxColumn, @IxIncl, @Desc&#xA;  END&#xA;  --END WHILE&#xA;&#xA;  CLOSE IndexColumns_cursor&#xA;  DEALLOCATE IndexColumns_cursor&#xA;&#xA;  SET @sCreateSql = @sCreateSql + @NewLine + ') '&#xA;&#xA;  IF @IncludeFillFactor = 1&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + @NewLine +&#xA;   'WITH (FillFactor = ' + Cast(@FillFactor as varchar(13)) + ')' + @NewLine&#xA;  END&#xA;  --END IF&#xA;&#xA;  IF @IncludeFileGroup = 1&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + 'ON ['+ @FileGroupName + ']' + @NewLine&#xA;  END&#xA;  ELSE&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + @NewLine&#xA;  END&#xA;  --END IF&#xA;&#xA;  SET @sCreateAllSql = @sCreateAllSql + '&#xA;'&#xA;&#xA;  SET @sDropAllSql = @sDropAllSql + '&#xA;'&#xA;&#xA;  IF @IncludeDrop = 1&#xA;  BEGIN&#xA;   SET @sDropAllSql = @sDropAllSql + @sDropSql + '&#xA;'&#xA;  END&#xA;&#xA;  SET @sCreateAllSql = @sCreateAllSql + @sCreateSql + '&#xA;'&#xA;&#xA;  FETCH NEXT&#xA;   FROM Indexes_cursor&#xA;   INTO @SchemaName, @TableName, @TableId, @IndexName,&#xA;   @IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique&#xA;END&#xA;--END WHILE&#xA;CLOSE Indexes_cursor&#xA;DEALLOCATE Indexes_cursor&#xA;&#xA;SELECT ? = @sDropAllSql&#xA;SELECT ? = @sCreateAllSql" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vDropAllIndexSQL"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="8000" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vCreateAllIndexSQL"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="8000" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vSchemaTableName"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="150" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Drop Index"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:DelayValidation="True"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{87112963-8d91-43ce-ae1e-efb3a368c020}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Drop Index"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">@[User::vDropAllIndexSQL]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B4BFA6BD-2DD7-4AB9-ABF4-B4BEC305BCE0}" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\ExSQL Delete Duplicated Rows"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:DelayValidation="True"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{448c1ffc-abd9-40ba-bfbb-8d18747508ba}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="ExSQL Delete Duplicated Rows"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B4BFA6BD-2DD7-4AB9-ABF4-B4BEC305BCE0}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStmtSourceType="Variable"
              SQLTask:SqlStatementSource="User::vSQLDeleteDuplicates"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="DeletedRows"
                SQLTask:DtsVariableName="User::vDeletedTotalRowCount" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Get XLSX File Matching Name Criteria"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:DelayValidation="True"
          DTS:Description="Script Task"
          DTS:DTSID="{990ec370-a260-4792-b3b6-eab3db4b3930}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get XLSX File Matching Name Criteria"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_32d88d309b08420c8b1e3b9d8f841be4"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::vFileTypeExtension,$Project::pFilePath,$Package::pFilePrefixName"
              ReadWriteVariables="User::vFileList,User::vProcessingFileCount">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_99e7405f3f944a70a8621d9b5cc2bf43")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_99e7405f3f944a70a8621d9b5cc2bf43")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Settings.get_Default():ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Sett" +
    "ings")]

namespace ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.IO;
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;
#endregion

namespace ST_99e7405f3f944a70a8621d9b5cc2bf43
{
    // SET COM to FALSE 
    [ComVisible(false)]
    public class BaseClass
    {
        /// <summary>
        /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
        /// or parent of this class.
        /// </summary>
        [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
        [ComVisible(false)]
        public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
        {
            #region Help:  Using Integration Services variables and parameters in a script
            /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

            #endregion

            #region Help:  Firing Integration Services events from a script
            /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
            #endregion

            #region Help:  Using Integration Services connection managers in a script
            /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
            #endregion


            /// <summary>
            /// This method is called when this script task executes in the control flow.
            /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
            /// To open Help, press F1.
            /// </summary>
            public void Main()
            {
                // Adding Error Handling Steps in Code
                try
                   {

                // Original Version 1.1  Script Date: 22/05/2016
                // Revised  Version 1.2 (Quidel Corp) Script Date: 21/09/2016

                // File Processing Script (Code) by; Darlington C. Nwemeh 
                // Purpose: Process Excel Files that match the Expected Files based on the Package or Data to be Processed. 
                // Copyright (c) 2016 Quidel Corporation 

                bool MatchFound = false;
                string sourcePathAndFileName = "";
                string sourceFileName = "";
                int DEFAULTYPEXTENSIONLENGTH = 5; //.xlsx

                // Take the name and file type for a string we can look for
                // This is what we use to find the correct file in our source directory
                string currentDirectory = Dts.Variables["$Project::pFilePath"].Value.ToString();
                string filePatternName = Dts.Variables["$Package::pFilePrefixName"].Value.ToString(); ;
                string fileTypeExtension = Dts.Variables["User::vFileTypeExtension"].Value.ToString(); ;

                // remove invalid characters from the currentDirectory , fileTypeExtension 
                currentDirectory = checkDirectoryEndChar(currentDirectory);
                fileTypeExtension = RemoveInvalidFileNameChars(fileTypeExtension);

                if (fileTypeExtension.Length != DEFAULTYPEXTENSIONLENGTH)
                {
                    Dts.Variables["User::vProcessingFileCount"].Value = 0;
                    Dts.TaskResult = (int)ScriptResults.Success;
                    return;
                }

                DataTable DataFilePathTable = new System.Data.DataTable("dFilePathTable");
                DataFilePathTable.Columns.Add("FileName", Type.GetType("System.String"));
                DataFilePathTable.Columns.Add("FileFullPathName", Type.GetType("System.String"));

                if (System.IO.Directory.Exists(currentDirectory))
                {
                    // remove invalid characters from the file pattern name
                    filePatternName = RemoveInvalidFileNameChars(filePatternName);

                    // Inicialize regular expression
                    Regex r = new Regex(filePatternName, RegexOptions.IgnoreCase);

                    string[] Files = Directory.GetFiles(currentDirectory, "FutureProducts*" + fileTypeExtension);
                    foreach (string File in Files)
                    {
                        // Match the regular expression pattern against a text string.
                        Match m = r.Match(File);
                        sourceFileName = Path.GetFileName(File);

                        if ((m.Success == true) && (string.Compare(filePatternName, sourceFileName.Substring(0, filePatternName.Length)) == 0))
                        {

                            sourcePathAndFileName = File;

                            MatchFound = true;

                            DataFilePathTable.Rows.Add(sourceFileName, sourcePathAndFileName);
                        }
                    }
                }
                else
                {
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                if (MatchFound == false)
                {
                    Dts.Variables["User::vProcessingFileCount"].Value = 0;
                    Dts.TaskResult = (int)ScriptResults.Success;
                    return;
                }
                else
                {
                    Dts.Variables["User::vFileList"].Value = DataFilePathTable.DefaultView.Table;
                    Dts.Variables["User::vProcessingFileCount"].Value = DataFilePathTable.DefaultView.Table.Rows.Count;

                    //PrintFilesDataTable(DataFilePathTable);

                    Dts.TaskResult = (int)ScriptResults.Success;
                    return;
                }
            }

                catch (Exception e)
                {
                    // Raise event so it can be logged by SSIS
                    Dts.Events.FireError(0, "Your Script Task name", "An error occurred: " + e.Message.ToString(), "", 0);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }
            }
            public string checkDirectoryEndChar(string currentDirectory)
            {
                if (!currentDirectory.EndsWith(@"\")) currentDirectory = currentDirectory + @"\";
                return currentDirectory;
            }

            private static void PrintFilesDataTable(System.Data.DataTable dFilePathTable)
            {
                foreach (DataRow dataRow in dFilePathTable.Rows)
                {
                    foreach (var item in dataRow.ItemArray)
                    {
                        MessageBox.Show(item.ToString());
                    }
                }
            }

            public string RemoveInvalidFileNameChars(string fileName)
            {
                char[] invalidFileChars = Path.GetInvalidFileNameChars();
                foreach (char invalidFChar in invalidFileChars)
                {
                    fileName = fileName.Replace(invalidFChar.ToString(), "");
                }
                return fileName;
            }

            #region ScriptResults declaration
            /// <summary>
            /// This enum provides a convenient shorthand within the scope of this class for setting the
            /// result of the script.
            /// 
            /// This code was generated automatically.
            /// </summary>
            enum ScriptResults
            {
                Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
                Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
            };
            #endregion

         }
     }

  }]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_99e7405f3f944a70a8621d9b5cc2bf43</msb:CodeName>
		<msb:DisplayName>ST_99e7405f3f944a70a8621d9b5cc2bf43</msb:DisplayName>
		<msb:ProjectId>{D4822BAE-FB98-4DD9-9F05-D87CFABA8FD6}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_32d88d309b08420c8b1e3b9d8f841be4.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="ST_32d88d309b08420c8b1e3b9d8f841be4.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{95625DA8-4F88-432A-A555-5BA077B95B85}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_99e7405f3f944a70a8621d9b5cc2bf43</RootNamespace><AssemblyName>ST_32d88d309b08420c8b1e3b9d8f841be4</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_32d88d309b08420c8b1e3b9d8f841be4.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAJO7w1oAAAAAAAAAAOAAAiELAQsAABoAAAAIAAAAAAAALjkA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAOA4AABLAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAANBkAAAAgAAAAGgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAcAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAIgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAQ
OQAAAAAAAEgAAAACAAUAMCUAALATAAABAAAAAAAAAHgkAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqHgIoDgAACioAGzAGAKYCAAACAAARFgpycwAAcAtycwAAcAwbDQIoFwAA
Cm8YAAAKcnUAAHBvGQAACm8aAAAKbxsAAAoTBAIoFwAACm8YAAAKcp0AAHBvGQAACm8aAAAKbxsA
AAoTBQIoFwAACm8YAAAKctEAAHBvGQAACm8aAAAKbxsAAAoTBgIRBCgKAAAGEwQCEQYoDAAABhMG
EQZvHAAACgkuMQIoFwAACm8YAAAKcgMBAHBvGQAAChaMIQAAAW8dAAAKAigXAAAKFm8eAAAK3eMB
AAByOQEAcHMfAAAKEwcRB28gAAAKclcBAHByaQEAcCghAAAKbyIAAAomEQdvIAAACnKFAQBwcmkB
AHAoIQAACm8iAAAKJhEEKCMAAAo5ogAAAAIRBSgMAAAGEwURBRdzJAAAChMIEQRypwEAcBEGKCUA
AAooJgAAChMJEQkTDRYTDitmEQ0RDpoTChEIEQpvJwAAChMLEQooKAAACgwRC28pAAAKLD0RBQgW
EQVvHAAACm8qAAAKKCsAAAotJhEKCxcKEQdvLAAAChiNAQAAARMPEQ8WCKIRDxcHohEPby0AAAom
EQ4XWBMOEQ4RDY5pMpIrEQIoFwAAChdvHgAACt3gAAAABi0xAigXAAAKbxgAAApyAwEAcG8ZAAAK
FowhAAABbx0AAAoCKBcAAAoWbx4AAArdrAAAAAIoFwAACm8YAAAKcscBAHBvGQAAChEHby4AAApv
LwAACm8dAAAKAigXAAAKbxgAAApyAwEAcG8ZAAAKEQdvLgAACm8vAAAKbywAAApvMAAACowhAAAB
bx0AAAoCKBcAAAoWbx4AAAreQxMMAigXAAAKbzEAAAoWcucBAHByEwIAcBEMbzIAAApvGwAACigl
AAAKcnMAAHAWbzMAAAomAigXAAAKF28eAAAK3gAqAABBHAAAAAAAAAAAAABiAgAAYgIAAEMAAAAv
AAABcgNyOwIAcG80AAAKLQ0DcjsCAHAoJQAAChABAyoAAAAbMAIAYwAAAAMAABECbywAAApvNQAA
CgwrNghvNgAACnQrAAABCgZvNwAACg0WEwQrFwkRBJoLB28bAAAKKDgAAAomEQQXWBMEEQQJjmky
4ghvOQAACi3C3hQIdTMAAAETBREFLAcRBW86AAAK3CoAARAAAAIADABCTgAUAAAAABMwAwAwAAAA
BAAAESg7AAAKCgYMFg0rHAgJkwsDEgEoPAAACnJzAABwbz0AAAoQAQkXWA0JCI5pMt4DKh4CKD4A
AAoqtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nv
cmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3
N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAA
AAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAKgFAAAj
fgAAFAYAAPQIAAAjU3RyaW5ncwAAAAAIDwAAQAIAACNVUwBIEQAAEAAAACNHVUlEAAAAWBEAAFgC
AAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+iUzABYAAAEAAAA0AAAABgAAAAYAAAANAAAABAAA
AD4AAAACAAAAEQAAAAQAAAACAAAAAwAAAAQAAAABAAAABgAAAAEAAAACAAAAAAAKAAEAAAAAAAYA
ywDEAAoA5wDSAA4ARwEeAQYAYwHEAAYAeQFoAQYAqgGVARIASwI/AgYA5QLLAgYAEAP+AgYAJwP+
AgYARAP+AgYAYwP+AgYAfAP+AgYAlQP+AgYAsAP+AgYAywP+AgYA5AP+AgYAHQT9AwYAPQT9AwYA
kgR/BAYArwTEAAYAtATEAAYA2AT+AgoABAXuBAoAHQXuBAYAMgX9AwYAcwVUBQ4AhwUeAQ4AqQUe
ARYAAgbiBRYAGgbiBQYAPwbEAAYAUQbEABIAcAY/AhIAmQY/AgYAsgaoBgoA4gbDBgoA6AbDBgoA
BQfDBgYACweoBgoAHAfDBhIAQAc/AhIAWwc/AhIAYwc/AhIAhgc/Ag4AqwceAQYAygfEAAYABgjz
BxoATwg6CBoAWgg6CAYAdQjEAAYAoQjEAAAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQAAARAA
awA8AAkAAwAFAAEAEAB0AH4ABQAEAAgAAgAQAKIAAAANAAQACQADAQAArQAAABEABAAOABEAiQET
ABEAtgEXABEAAAI5AAYGhAJSAFaAjAJVAFaAlAJVAFAgAAAAAIMYxgEbAAEAWCAAAAAAkwjMAR8A
AQCRIAAAAACTCOABJAABAJggAAAAAJMI7AEpAAEAoCAAAAAAlggQAj0AAgCzIAAAAACGGMYBGwAC
AKcgAAAAAJEYTQWUAAIAuyAAAAAAhhjGARsAAgDEIAAAAACGACQCGwACAJQjAAAAAIYAKQJHAAIA
tCMAAAAAkQBVAkwAAwA0JAAAAACGAGkCRwAEAHAkAAAAAIYYxgEbAAUAAAABAJwCAAABAKICAAAB
ALMCAAABAMICQQDGAWMASQDGAWMAUQDGAWMAWQDGAWMAYQDGAWMAaQDGAWMAcQDGAWMAeQDGAWMA
gQDGAWMAiQDGAWMAkQDGAWgAmQDGARsAoQDGARsACQDGARsAqQDGBG0AqQDhBHQAKQDGAXkAwQDG
AYUA0QDGARsAEQDGARsA2QDGAZgA4QDGARsAGQC7BaMA6QAMBqgA8QAjBq0A+QAsBrMACQA2BrcA
AQFGBrsA+QBXBr8A6QBhBmgAOQDGAWMAOQCFBsQAqQCRBsoAEQGkBtAAIQG8BtkAKQHGAd4AAQH1
BuYAIQH8BuwAKQEFB/MAQQEQB/oASQEiB/8AAQEuBwMBAQE4BwkBOQBSBw8BUQGkBhUBOQBsBx0B
YQF8ByMBaQGhB7sA6QC/BygBeQHUB7cAcQHgBy4BAQHqB1QBaQESCFkBgQEgCLMAWQEsCF8BiQFn
CGQBgQFsCP8AmQGBCBsAQQGJCHsBoQE2BrcAAQGmCIABGQDGARsACAAUAFkACAAYAF4AKQCTAIsA
LgATANcBLgAbAJ0ALgBjADgCLgALAI8BLgAzANcBLgBbAC8CLgArAAACLgAjAJ0ALgA7AA8CLgBD
AJ0AQwBrAF4ASQCTAIsAYQCbAF4AgwCrAJ0AowCrAJ0AowCzAF4AgAA3AWsBhgECAAEAAwADAAAA
eQEvAAAA+AE0AAAAHAJCAAIAAgADAAIAAwAFAAEABAAFAAIABQAHAASAAAABAAAACxqJQwAAAAAA
AFsEAAAEAAAAAAAAAAAAAAABALsAAAAAAAQAAAAAAAAAAAAAAAEAxAAAAAAACwAAAAAAAAAAAAAA
CgD/AAAAAAAEAAAAAAAAAAAAAAABAD8CAAAAAAsAAAAAAAAAAAAAAAoAwwUAAAAABAAAAAAAAAAA
AAAAAQA6CAAAAAAAAAAAAQAAAK4IAAAFAAQABgAFAAAAADxNb2R1bGU+AFNUXzMyZDg4ZDMwOWIw
ODQyMGM4YjFlM2I5ZDhmODQxYmU0LmRsbABSZXNvdXJjZXMAU1RfOTllNzQwNWYzZjk0NGE3MGE4
NjIxZDliNWNjMmJmNDMuUHJvcGVydGllcwBTZXR0aW5ncwBCYXNlQ2xhc3MAU1RfOTllNzQwNWYz
Zjk0NGE3MGE4NjIxZDliNWNjMmJmNDMAU2NyaXB0TWFpbgBTY3JpcHRSZXN1bHRzAG1zY29ybGli
AFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jh
c2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVt
LlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRp
b24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIA
Z2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1
bHQARGVmYXVsdABNYWluAGNoZWNrRGlyZWN0b3J5RW5kQ2hhcgBTeXN0ZW0uRGF0YQBEYXRhVGFi
bGUAUHJpbnRGaWxlc0RhdGFUYWJsZQBSZW1vdmVJbnZhbGlkRmlsZU5hbWVDaGFycwB2YWx1ZV9f
AFN1Y2Nlc3MARmFpbHVyZQB2YWx1ZQBjdXJyZW50RGlyZWN0b3J5AGRGaWxlUGF0aFRhYmxlAGZp
bGVOYW1lAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRl
AFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlw
dGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21w
YW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0
dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1
dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vydmlj
ZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0
dHJpYnV0ZQBTVF8zMmQ4OGQzMDliMDg0MjBjOGIxZTNiOWQ4Zjg0MWJlNABTeXN0ZW0uRGlhZ25v
c3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50
TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBp
bGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2Vydmlj
ZXMAQ29tVmlzaWJsZUF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUA
U2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZXMAZ2V0X1ZhcmlhYmxlcwBW
YXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUAVG9TdHJpbmcAU3RyaW5nAGdldF9MZW5ndGgASW50
MzIAc2V0X1ZhbHVlAHNldF9UYXNrUmVzdWx0AERhdGFDb2x1bW5Db2xsZWN0aW9uAGdldF9Db2x1
bW5zAEdldFR5cGUARGF0YUNvbHVtbgBBZGQAU3lzdGVtLklPAERpcmVjdG9yeQBFeGlzdHMAU3lz
dGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAFJlZ2V4AFJlZ2V4T3B0aW9ucwBDb25jYXQAR2V0
RmlsZXMATWF0Y2gAUGF0aABHZXRGaWxlTmFtZQBHcm91cABnZXRfU3VjY2VzcwBTdWJzdHJpbmcA
Q29tcGFyZQBEYXRhUm93Q29sbGVjdGlvbgBnZXRfUm93cwBEYXRhUm93AERhdGFWaWV3AGdldF9E
ZWZhdWx0VmlldwBnZXRfVGFibGUASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAZ2V0X0NvdW50
AEV2ZW50c09iamVjdFdyYXBwZXIAZ2V0X0V2ZW50cwBFeGNlcHRpb24AZ2V0X01lc3NhZ2UARmly
ZUVycm9yAEVuZHNXaXRoAFN5c3RlbS5Db2xsZWN0aW9ucwBJRW51bWVyYXRvcgBHZXRFbnVtZXJh
dG9yAGdldF9DdXJyZW50AGdldF9JdGVtQXJyYXkAU3lzdGVtLldpbmRvd3MuRm9ybXMATWVzc2Fn
ZUJveABEaWFsb2dSZXN1bHQAU2hvdwBNb3ZlTmV4dABJRGlzcG9zYWJsZQBEaXNwb3NlAEdldElu
dmFsaWRGaWxlTmFtZUNoYXJzAENoYXIAUmVwbGFjZQBTVF85OWU3NDA1ZjNmOTQ0YTcwYTg2MjFk
OWI1Y2MyYmY0My5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMAAAAAAHFTAFQAXwA5ADkA
ZQA3ADQAMAA1AGYAMwBmADkANAA0AGEANwAwAGEAOAA2ADIAMQBkADkAYgA1AGMAYwAyAGIAZgA0
ADMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAEAJyQAUAByAG8A
agBlAGMAdAA6ADoAcABGAGkAbABlAFAAYQB0AGgAADMkAFAAYQBjAGsAYQBnAGUAOgA6AHAARgBp
AGwAZQBQAHIAZQBmAGkAeABOAGEAbQBlAAAxVQBzAGUAcgA6ADoAdgBGAGkAbABlAFQAeQBwAGUA
RQB4AHQAZQBuAHMAaQBvAG4AADVVAHMAZQByADoAOgB2AFAAcgBvAGMAZQBzAHMAaQBuAGcARgBp
AGwAZQBDAG8AdQBuAHQAAB1kAEYAaQBsAGUAUABhAHQAaABUAGEAYgBsAGUAABFGAGkAbABlAE4A
YQBtAGUAABtTAHkAcwB0AGUAbQAuAFMAdAByAGkAbgBnAAAhRgBpAGwAZQBGAHUAbABsAFAAYQB0
AGgATgBhAG0AZQAAH0YAdQB0AHUAcgBlAFAAcgBvAGQAdQBjAHQAcwAqAAAfVQBzAGUAcgA6ADoA
dgBGAGkAbABlAEwAaQBzAHQAACtZAG8AdQByACAAUwBjAHIAaQBwAHQAIABUAGEAcwBrACAAbgBh
AG0AZQAAJ0EAbgAgAGUAcgByAG8AcgAgAG8AYwBjAHUAcgByAGUAZAA6ACAAAANcAAAAHMmPVBed
vUKp89WeM3NwyAAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZ
BAgAEhUECAASGQMGEgwEAAASDAQIABIMBCABDg4FAAEBEh0CBggDBhEYBAAAAAAEAQAAAAQgAQEO
BCABAQgGAAESVRFZBCAAEl0GIAIBDhJdBAcBEhUFIAEBEWUIAQACAAAAAAADAAABBCABAQIFAQAA
AAAEIAASdQQgABJ5BSABEn0cAyAAHAMgAA4DIAAIBCABARwFIAASgIkFAAESVQ4IIAISgI0OElUE
AAECDgcgAgEOEYCZBQACDg4OBgACHQ4ODgYgARKAnQ4EAAEODgMgAAIFIAIOCAgFAAIIDg4FIAAS
gKkHIAESgK0dHAUgABKAsQQgABIdBSAAEoC5CCAFAggODg4IHAcQAg4OCA4ODhIdEoCVHQ4OEoCd
EoC9HQ4IHRwEIAECDgUgABKAwQQgAB0cBgABEYDJDg8HBhKArRwSgMEdHAgSgM0EAAAdAwUgAg4O
DggHBB0DAx0DCEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlz
cGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNCgBACNTVF85OWU3NDA1ZjNmOTQ0YTcwYTg2MjFkOWI1
Y2MyYmY0MwAADgEACU1pY3Jvc29mdAAAHwEAGkNvcHlyaWdodCBAIE1pY3Jvc29mdCAyMDE2AAAI
AQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBAAg5AAAAAAAAAAAAAB45AAAA
IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQOQAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwA
AAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAD4AwAAAAAAAAAAAAD4AzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAiUMLGgAAAQCJQwsaPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEWAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAANAMAAAEAMAAwADAAMAAw
ADQAYgAwAAAANAAKAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAABNAGkAYwByAG8AcwBvAGYA
dAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA5ADkAZQA3
ADQAMAA1AGYAMwBmADkANAA0AGEANwAwAGEAOAA2ADIAMQBkADkAYgA1AGMAYwAyAGIAZgA0ADMA
AABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANgA2ADYANwAuADEANwAy
ADgAOQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAzADIAZAA4ADgA
ZAAzADAAOQBiADAAOAA0ADIAMABjADgAYgAxAGUAMwBiADkAZAA4AGYAOAA0ADEAYgBlADQALgBk
AGwAbAAAAFwAGwABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgAE0AaQBjAHIAbwBzAG8AZgB0ACAAMgAwADEANgAAAAAAeAAoAAEATwByAGkAZwBp
AG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADMAMgBkADgAOABkADMAMAA5AGIAMAA4ADQA
MgAwAGMAOABiADEAZQAzAGIAOQBkADgAZgA4ADQAMQBiAGUANAAuAGQAbABsAAAAaAAkAAEAUABy
AG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA5ADkAZQA3ADQAMAA1AGYAMwBmADkANAA0AGEA
NwAwAGEAOAA2ADIAMQBkADkAYgA1AGMAYwAyAGIAZgA0ADMAAABEAA8AAQBQAHIAbwBkAHUAYwB0
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANgA2ADcALgAxADcAMgA4ADkAAAAAAEgADwABAEEA
cwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANgA2ADcALgAxADcAMgA4
ADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAMDkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{ede0c855-d7f4-4633-9fe7-3a7f2e89019b}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Loop Through Folder and Get Appropirate File">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{fc93afa6-dbca-48b5-94a1-9cc584ac03b8}"
            DTS:ObjectName="{25261C6D-2B25-4E23-83EA-8845FD38A5A4}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::vFileList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination"
              DTS:CreationName="SSIS.Pipeline.3"
              DTS:DelayValidation="True"
              DTS:Description="Data Flow Task"
              DTS:DTSID="{f387b13c-ceb4-4f05-aa86-6f052ad0a371}"
              DTS:ExecutableType="SSIS.Pipeline.3"
              DTS:LocaleID="-1"
              DTS:MaxErrorCount="5"
              DTS:ObjectName="DFT Load Source Excel File to Destination"
              DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <pipeline
                  version="1">
                  <components>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column"
                      componentClassID="{49928E82-9C4E-49F0-AABE-3812B82707EC}"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Add JobInstance Column"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[JobInstanceID]"
                              dataType="i8"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[JobInstanceID]"
                              name="JobInstanceID"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::vCurJobInstanceID]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::vCurJobInstanceID]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[RowNumber]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[RowNumber]"
                              name="RowNumber"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">1</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">1</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns"
                      componentClassID="{874F7595-FB5F-40FF-96AF-FBFF8250E3EF}"
                      contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;8"
                      description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                      name="Concatenate Rejected Columns"
                      version="8">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Stores the source code of the component"
                          isArray="true"
                          name="SourceCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="30">
                            <arrayElement
                              dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Pipeline;
using System.Text;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[SSISScriptComponentEntryPoint]
public class ScriptMain : UserComponent
{
    private int ColumnCount;
    private ColumnClass[] ColumnNameArray;
    private PipelineBuffer inputBuffer;


    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    private class ColumnClass
    {
        public int Index;
        public string Name;
    }

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */



        ColumnCount = ComponentMetaData.InputCollection[0].InputColumnCollection.Count;
        ColumnNameArray = new ColumnClass[ColumnCount];

        int[] ColumnIndexes = GetColumnIndexes(ComponentMetaData.InputCollection[0].ID);
        int columnIndex = 0;

        foreach (IDTSInputColumn100 item in ComponentMetaData.InputCollection[0].InputColumnCollection)
        {
            ColumnNameArray[columnIndex] = new ColumnClass();
            ColumnNameArray[columnIndex].Name = Convert.ToString(item.Name);
            ColumnNameArray[columnIndex].Index = ColumnIndexes[ComponentMetaData.InputCollection[0].InputColumnCollection.GetObjectIndexByID(item.ID)];
            columnIndex++;
        }

        Array.Sort(
            ColumnNameArray,
            delegate(ColumnClass column1, ColumnClass column2)
            { return column1.Index.CompareTo(column2.Index); }
        );

    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>

    public override void ProcessInput(int InputID, Microsoft.SqlServer.Dts.Pipeline.PipelineBuffer Buffer)
    {
        inputBuffer = Buffer;

        base.ProcessInput(InputID, Buffer);
    }


    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        StringBuilder RawDataTEXT = new StringBuilder(ColumnCount);

        for (int columnIndex = 0; columnIndex < ColumnCount; columnIndex++)
        {
            RawDataTEXT.Append(ColumnNameArray[columnIndex].Name + "=");
            RawDataTEXT.Append(Convert.ToString(inputBuffer[ColumnNameArray[columnIndex].Index]));
            RawDataTEXT.Append(";");
        }

        Row.RawDataTEXT.AddBlobData(System.Text.Encoding.GetEncoding(1252).GetBytes(RawDataTEXT.ToString()));

    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_85d61d00bc4f45c3ae19dc27da6e7c9d.csproj]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{FB578575-549C-4EF3-9DE6-510E3B65E42F}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>SC_85d61d00bc4f45c3ae19dc27da6e7c9d</RootNamespace><AssemblyName>SC_C044E150528741B38924326874DF6332</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.PipelineHost, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Compile Include="main.cs" /><Compile Include="BufferWrapper.cs" /><Compile Include="ComponentWrapper.cs" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><!-- This section defines VSTA properties that describe the host-changable project properties. --><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptComponent" IconIndex="0" /><ProjectClient><HostIdentifier>SSIS_SC110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 EODErrorCode
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
    }
    public bool EODErrorCode_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public Int32 EODErrorColumn
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[1]);
        }
    }
    public bool EODErrorColumn_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String EODErrorDescription
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
    }
    public bool EODErrorDescription_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String EODComponentName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
    }
    public bool EODComponentName_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String EODColumnName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
    }
    public bool EODColumnName_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public Double TotalUnitCost
    {
        get
        {
            return Buffer.GetDouble(BufferColumnIndexes[5]);
        }
    }
    public bool TotalUnitCost_IsNull
    {
        get
        {
            return IsNull(5);
        }
    }

    public Double ProductKitSize
    {
        get
        {
            return Buffer.GetDouble(BufferColumnIndexes[6]);
        }
    }
    public bool ProductKitSize_IsNull
    {
        get
        {
            return IsNull(6);
        }
    }

    public String ProductItemType
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[7]);
        }
    }
    public bool ProductItemType_IsNull
    {
        get
        {
            return IsNull(7);
        }
    }

    public String CopyofProductUnit
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[8]);
        }
    }
    public bool CopyofProductUnit_IsNull
    {
        get
        {
            return IsNull(8);
        }
    }

    public String CopyofProductTypeID
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[9]);
        }
    }
    public bool CopyofProductTypeID_IsNull
    {
        get
        {
            return IsNull(9);
        }
    }

    public String CopyofProductTypeDesc
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[10]);
        }
    }
    public bool CopyofProductTypeDesc_IsNull
    {
        get
        {
            return IsNull(10);
        }
    }

    public String CopyofProductLineID
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[11]);
        }
    }
    public bool CopyofProductLineID_IsNull
    {
        get
        {
            return IsNull(11);
        }
    }

    public String CopyofProductLineDesc
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[12]);
        }
    }
    public bool CopyofProductLineDesc_IsNull
    {
        get
        {
            return IsNull(12);
        }
    }

    public String CopyofProductItemGroup
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[13]);
        }
    }
    public bool CopyofProductItemGroup_IsNull
    {
        get
        {
            return IsNull(13);
        }
    }

    public String CopyofProductID
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[14]);
        }
    }
    public bool CopyofProductID_IsNull
    {
        get
        {
            return IsNull(14);
        }
    }

    public String CopyofProductDHIFlag
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[15]);
        }
    }
    public bool CopyofProductDHIFlag_IsNull
    {
        get
        {
            return IsNull(15);
        }
    }

    public String CopyofProductDesc
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[16]);
        }
    }
    public bool CopyofProductDesc_IsNull
    {
        get
        {
            return IsNull(16);
        }
    }

    public String CopyofProductClassID
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[17]);
        }
    }
    public bool CopyofProductClassID_IsNull
    {
        get
        {
            return IsNull(17);
        }
    }

    public String CopyofProductClassDesc
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[18]);
        }
    }
    public bool CopyofProductClassDesc_IsNull
    {
        get
        {
            return IsNull(18);
        }
    }

    public BlobColumn RawDataTEXT
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[19]];
        }
        set
        {
            this[19] = value;
        }
    }
    public bool RawDataTEXT_IsNull
    {
        get
        {
            return IsNull(19);
        }
        set
        {
            if (value)
            {
                SetNull(19);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Settings.get_Default():SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Sett" +
    "ings")]

namespace SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Project]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_85d61d00bc4f45c3ae19dc27da6e7c9d</msb:CodeName>
		<msb:DisplayName>SC_85d61d00bc4f45c3ae19dc27da6e7c9d</msb:DisplayName>
		<msb:ProjectId>{CBC8C2BE-1849-4169-9168-4AA4BD876C72}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_85d61d00bc4f45c3ae19dc27da6e7c9d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("SC_85d61d00bc4f45c3ae19dc27da6e7c9d")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Stores the binary representation of the component"
                          isArray="true"
                          name="BinaryCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="2">
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_C044E150528741B38924326874DF6332.dll]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAJFq31oAAAAAAAAAAOAAAiELAQsAACgAAAAIAAAAAAAA3kYA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIxGAABPAAAAAGAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA5CYAAAAgAAAAKAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAYAAAAAYAAAAqAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAMAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADA
RgAAAAAAAEgAAAACAAUA0CYAALwfAAABAAAAAAAAABgmAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4CKA0AAAoCAnM5AAAGfQEAAAQCAnM6AAAGfQIAAAQqkgRy
AQAAcBpvDgAACiwVAgUCAygPAAAKDgRzDAAABm8DAAAGKkorBwIDbwQAAAYDbzcAAAYt8SoGKkoC
fAcAAAQDewcAAAQoEgAACioAAAAbMAQANQEAAAEAABECKBMAAAoCAigUAAAKbxUAAAoWjBsAAAFv
FgAACm8XAAAKbxgAAAp9AwAABAICewMAAASNBAAAAn0EAAAEAgIoFAAACm8VAAAKFowbAAABbxYA
AApvGQAACigPAAAKChYLAigUAAAKbxUAAAoWjBsAAAFvFgAACm8XAAAKbxoAAAoNK2oJbxsAAAp0
IQAAAQwCewQAAAQHcwsAAAaiAnsEAAAEB5oIbxwAAAooHQAACn0IAAAEAnsEAAAEB5oGAigUAAAK
bxUAAAoWjBsAAAFvFgAACm8XAAAKCG8eAAAKbx8AAAqUfQcAAAQHF1gLCW8gAAAKLY7eFAl1IwAA
ARMEEQQsBxEEbyEAAArcAnsEAAAEfgYAAAQtERT+BgoAAAZzIgAACoAGAAAEfgYAAAQoAQAAKyoA
AAABEAAAAgCCAHb4ABQAAAAAHgIoJAAACipCAgR9BQAABAIDBCglAAAKKgAAABMwBACMAAAAAgAA
EQJ7AwAABHMmAAAKChYLK1IGAnsEAAAEB5p7CAAABHIRAABwKCcAAApvKAAACiYGAnsFAAAEAnsE
AAAEB5p7BwAABG8pAAAKKCoAAApvKAAACiYGchUAAHBvKAAACiYHF1gLBwJ7AwAABDKlA28zAAAG
IOQEAAAoKwAACgZvLAAACm8tAAAKby4AAAoqHgIoAQAABioeAigvAAAKKioCAwQFKDAAAAoqUgJ7
MQAACgJ7MgAAChaUbzMAAAoqIgIWKDQAAAoqUgJ7MQAACgJ7MgAACheUbzMAAAoqIgIXKDQAAAoq
UgJ7MQAACgJ7MgAAChiUbzUAAAoqIgIYKDQAAAoqUgJ7MQAACgJ7MgAAChmUbzUAAAoqIgIZKDQA
AAoqUgJ7MQAACgJ7MgAAChqUbzUAAAoqIgIaKDQAAAoqUgJ7MQAACgJ7MgAAChuUbzYAAAoqIgIb
KDQAAAoqUgJ7MQAACgJ7MgAAChyUbzYAAAoqIgIcKDQAAAoqUgJ7MQAACgJ7MgAACh2UbzUAAAoq
IgIdKDQAAAoqUgJ7MQAACgJ7MgAACh6UbzUAAAoqIgIeKDQAAAoqVgJ7MQAACgJ7MgAACh8JlG81
AAAKKiYCHwkoNAAACipWAnsxAAAKAnsyAAAKHwqUbzUAAAoqJgIfCig0AAAKKlYCezEAAAoCezIA
AAofC5RvNQAACiomAh8LKDQAAAoqVgJ7MQAACgJ7MgAACh8MlG81AAAKKiYCHwwoNAAACipWAnsx
AAAKAnsyAAAKHw2UbzUAAAoqJgIfDSg0AAAKKlYCezEAAAoCezIAAAofDpRvNQAACiomAh8OKDQA
AAoqVgJ7MQAACgJ7MgAACh8PlG81AAAKKiYCHw8oNAAACipWAnsxAAAKAnsyAAAKHxCUbzUAAAoq
JgIfECg0AAAKKlYCezEAAAoCezIAAAofEZRvNQAACiomAh8RKDQAAAoqVgJ7MQAACgJ7MgAACh8S
lG81AAAKKiYCHxIoNAAACipqAnsxAAAKAnsyAAAKHxOUbykAAAp0BwAAASoqAh8TAyg3AAAKKiYC
HxMoNAAACipeAywJAh8TKDgAAAoqchkAAHBzOQAACnoeAig6AAAKKh4CKDsAAAoqOgIoLwAACgID
fQkAAAQqOgIoLwAACgIDfQoAAAQqHgIoLwAACioAEzACAC0AAAADAAARfgsAAAQtIHK2AABw0AgA
AAIoPQAACm8+AAAKcz8AAAoKBoALAAAEfgsAAAQqGn4MAAAEKh4CgAwAAAQqGn4NAAAEKi5zQAAA
BoANAAAEKh4CKEEAAAoqAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVz
b3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwg
UHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVS
ZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAz
MTkAAAAABQBsAAAA7AoAACN+AABYCwAAoBAAACNTdHJpbmdzAAAAAPgbAAAoAQAAI1VTACAdAAAQ
AAAAI0dVSUQAAAAwHQAAjAIAACNCbG9iAAAAAAAAAAIAAAFXFaIJCQsAAAD6JTMAFgAAAQAAAC0A
AAAJAAAADQAAAEEAAAATAAAAQQAAABEAAAADAAAAAwAAACsAAAAuAAAAAQAAAAEAAAAFAAAAAQAA
AAEAAAABAAAAAAAKAAEAAAAAAAYA+gDZAAoAGgETAQYAIQHZAA4AQwEuARIAggHZAAYAkQHZABIA
9gXZAAoA4AnPCQoAEQr8CQoA6grQCgoAFQsDCwoALAsDCwoASQsDCwoAaAsDCwoAgQsDCwoAmgsD
CwoAtQsDCwoA0AsDCwoA6QsDCwoAIgwCDAoAQgwCDAoAhAwTAQoAiwwTAQYAtAzZAAoA/AwTAQoA
MA0CDAoASw0TARYAqA1/DRYA1w1/DRYAAg5/DRYAGA5/DQoAcw5gDhYAmQ5/DQoAtQ4TAQoA4g4T
AQoA9g4TAQoADQ8BDwoAKQ8BDwoAiA8TAQoAtQ+iDwoA0g8TAQoA1w8TAQoA+w8DCw4AJxAREA4A
QBAREAAAAAABAAAAAAABAAEAAQAQADIAAAAFAAEAAQABABAAQAAAAAgAAwAFAAMAEABLAAAACQAH
AAsAAQAQAFcAAAANAAkADAABABAAZAAAAAkACQA5AAEAEABwAAAACQAKADoAAAAQAHoAhAAJAAsA
OwAAARAAswCEABEADQA/AAYAZAATAAYAcAAXAAEA1wEvAAEA4wEyAAEA8wE3ABEACQ3iAAYAFgIv
AAYAHAJCAAEAvwmEAAEAvwmEABEA8AmOABEAHQqSABEAYQqwAFAgAAAAAIYYWwEbAAEAcCAAAAAA
xgCfAR8AAQCVIAAAAADGAawBKQAFAKggAAAAAMYBwAEpAAYAwCAAAAAAxgD/ARsABwAUIgAAAADG
AAoCGwAHABwiAAAAAMYAnwE7AAcAMCIAAAAAxgDAASkACQDIIgAAAACGGFsBGwAKAKogAAAAAJEA
2wzaAAoA0CIAAAAAhhhbARsADADYIgAAAACGGFsBRQAMAOMiAAAAAIYIIQJPAA8A+CIAAAAAhggy
AlMADwABIwAAAACGCEoCTwAPABYjAAAAAIYIXQJTAA8AHyMAAAAAhgh3AlcADwA0IwAAAACGCI8C
UwAPAD0jAAAAAIYIrgJXAA8AUiMAAAAAhgjDAlMADwBbIwAAAACGCN8CVwAPAHAjAAAAAIYI8QJT
AA8AeSMAAAAAhggKA1sADwCOIwAAAACGCBwDUwAPAJcjAAAAAIYINQNbAA8ArCMAAAAAhghIA1MA
DwC1IwAAAACGCGIDVwAPAMojAAAAAIYIdgNTAA8A0yMAAAAAhgiRA1cADwDoIwAAAACGCKcDUwAP
APEjAAAAAIYIxANXAA8AByQAAAAAhgjcA1MADwARJAAAAACGCPsDVwAPACckAAAAAIYIFQRTAA8A
MSQAAAAAhgg2BFcADwBHJAAAAACGCE4EUwAPAFEkAAAAAIYIbQRXAA8AZyQAAAAAhgiHBFMADwBx
JAAAAACGCKgEVwAPAIckAAAAAIYIwwRTAA8AkSQAAAAAhgjlBFcADwCnJAAAAACGCPkEUwAPALEk
AAAAAIYIFAVXAA8AxyQAAAAAhggtBVMADwDRJAAAAACGCE0FVwAPAOckAAAAAIYIYwVTAA8A8SQA
AAAAhgiABVcADwAHJQAAAACGCJkFUwAPABElAAAAAIYIuQVXAA8AJyUAAAAAhgjUBVMADwAxJQAA
AACGCAEGXwAPAEwlAAAAAIYIEQZkAA8AVyUAAAAAhgghBlMAEABhJQAAAACGCDgGagAQAHklAAAA
AIYATwZTABEAgSUAAAAAhgBXBlMAEQCJJQAAAACGGFsBiAARAJglAAAAAIYYWwGIABIApyUAAAAA
gxhbARsAEwCwJQAAAACTCC0KlgATAOklAAAAAJMIQQqbABMA8CUAAAAAkwhNCqAAEwD4JQAAAACW
CHEKtAAUAAsmAAAAAIYYWwEbABQA/yUAAAAAkRhVELgBFAAAAAEAhQoAAAIAjQoAAAMAlwoAAAQA
ngoAAAEAlwoAAAEAqAoAAAEAhQoAAAIAlwoAAAEAqAoAAAEA7AwAAAIA9AwAAAEAlwoAAAIArAoA
AAMAngoAAAEAwAoAAAEAwAoAAAEAxgoAAAEAxgoAAAEAwApRAFsBvgBZAFsBvgBhAFsBvgBpAFsB
vgBxAFsBvgB5AFsBvgCBAFsBvgCJAFsBvgCRAFsBvgCZAFsBvgChAFsBwwCpAFsBGwAJAFsBGwCx
AJwMyAAJAKMMzwDBAFsBGwDRAFsBGwDZAFEN6gAJAP8BGwAJAMEN7wDhAO4N9ADpAA8O+QDxADUO
/wD5AE8OTwDxAFkOTwD5AH8OBAEBAY0OCgEJAawOVwARAb0ODgEJAVkOTwD5AMYO6gABAdkOUwAZ
Ae4OGwAMAFsBGgEhAfwOIAEJAAoCGwAJAJ8BOwApAVsBwwCxABsPQgEpASIPSAEpAA8OTwERAb0O
VAExATIPWQERAL0OVwAxAT4PYAE5AEcPZgERAFsBGwAZAFsBRQAZAJcKNwAZAKwKcwEpAFMP6gAZ
AFwPdwEpAGMPfAEpAG0PgQEZAHcPhgEZAIAPwwA5AVsBvgAZAE8GUwAZAFcGUwBBAVsBGwBJAekP
jAFJAQQQlQFBAFsBmwFhAVsBqAEhAFsBGwAuABMABAIuAGMAawIuAAsAvAEuABsALQIuACMALQIu
ACsAMwIuADMABAIuADsAQgIuAEMALQIuAFsAYgJjAIMA1QDBAIsA1QADAeMB1QBAAYsA1QChAYsA
1QApBQMCrwFJBQMCrwEzAWwBowEFAAEACAApAAkAKwAAAGMGbwAAAHAGcwAAAIQGbwAAAJMGcwAA
AKkGdwAAAL0GcwAAANgGdwAAAOkGcwAAAAEHdwAAAA8HcwAAACQHewAAADIHcwAAAEcHewAAAFYH
cwAAAGwHdwAAAHwHcwAAAJMHdwAAAKUHcwAAAL4HdwAAANIHcwAAAO0HdwAAAAMIcwAAACAIdwAA
ADQIcwAAAE8IdwAAAGUIcwAAAIIIdwAAAJkIcwAAALcIdwAAAMcIcwAAAN4IdwAAAPMIcwAAAA8J
dwAAACEJcwAAADoJdwAAAE8JcwAAAGsJdwAAAIIJcwAAAKAJfwAAAKwJcwAAAOAJpgAAAFkKqwAA
AH0KuQACAA0AAwACAA4ABQACAA8ABwACABAACQACABEACwACABIADQACABMADwACABQAEQACABUA
EwACABYAFQACABcAFwACABgAGQACABkAGwACABoAHQACABsAHwACABwAIQACAB0AIwACAB4AJQAC
AB8AJwACACAAKQACACEAKwACACIALQACACMALwACACQAMQACACUAMwACACYANQACACcANwACACgA
OQACACkAOwACACoAPQACACsAPwACACwAQQACAC0AQwACAC4ARQACAC8ARwACADAASQACADEASwAC
ADIATQACADMATwABADQATwACADUAUQABADYAUQACADwAUwACAD0AVQABAD4AVQACAD8AVwATAQSA
AAABAAAAIBpIQwAAAAAAAGAMAAALAAAAAAAAAAAAAAABALwAAAAAAAQAAAAAAAAAAAAAAAoACgEA
AAAABAAAAAAAAAAAAAAACgATAQAAAAALAAAAAAAAAAAAAAABAGEBAAAAAAsAAAAAAAAAAAAAAAEA
Ww0AAAAAAAAAAAEAAABcEAAABAADAEcALgEAAAAAADxNb2R1bGU+AFNDX0MwNDRFMTUwNTI4NzQx
QjM4OTI0MzI2ODc0REY2MzMyLmRsbABVc2VyQ29tcG9uZW50AFNjcmlwdE1haW4AQ29sdW1uQ2xh
c3MASW5wdXQwQnVmZmVyAENvbm5lY3Rpb25zAFZhcmlhYmxlcwBSZXNvdXJjZXMAU0NfODVkNjFk
MDBiYzRmNDVjM2FlMTlkYzI3ZGE2ZTdjOWQuUHJvcGVydGllcwBTZXR0aW5ncwBNaWNyb3NvZnQu
U3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAFNjcmlw
dENvbXBvbmVudABtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFNjcmlwdEJ1ZmZlcgBTeXN0ZW0uQ29u
ZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQAuY3RvcgBNaWNyb3NvZnQuU3FsU2Vy
dmVyLlBpcGVsaW5lSG9zdABQaXBlbGluZUJ1ZmZlcgBPdXRwdXROYW1lTWFwAFByb2Nlc3NJbnB1
dABJbnB1dDBfUHJvY2Vzc0lucHV0AElucHV0MF9Qcm9jZXNzSW5wdXRSb3cAQ29sdW1uQ291bnQA
Q29sdW1uTmFtZUFycmF5AGlucHV0QnVmZmVyAFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUASW5kZXgA
TmFtZQBnZXRfRU9ERXJyb3JDb2RlAGdldF9FT0RFcnJvckNvZGVfSXNOdWxsAGdldF9FT0RFcnJv
ckNvbHVtbgBnZXRfRU9ERXJyb3JDb2x1bW5fSXNOdWxsAGdldF9FT0RFcnJvckRlc2NyaXB0aW9u
AGdldF9FT0RFcnJvckRlc2NyaXB0aW9uX0lzTnVsbABnZXRfRU9EQ29tcG9uZW50TmFtZQBnZXRf
RU9EQ29tcG9uZW50TmFtZV9Jc051bGwAZ2V0X0VPRENvbHVtbk5hbWUAZ2V0X0VPRENvbHVtbk5h
bWVfSXNOdWxsAGdldF9Ub3RhbFVuaXRDb3N0AGdldF9Ub3RhbFVuaXRDb3N0X0lzTnVsbABnZXRf
UHJvZHVjdEtpdFNpemUAZ2V0X1Byb2R1Y3RLaXRTaXplX0lzTnVsbABnZXRfUHJvZHVjdEl0ZW1U
eXBlAGdldF9Qcm9kdWN0SXRlbVR5cGVfSXNOdWxsAGdldF9Db3B5b2ZQcm9kdWN0VW5pdABnZXRf
Q29weW9mUHJvZHVjdFVuaXRfSXNOdWxsAGdldF9Db3B5b2ZQcm9kdWN0VHlwZUlEAGdldF9Db3B5
b2ZQcm9kdWN0VHlwZUlEX0lzTnVsbABnZXRfQ29weW9mUHJvZHVjdFR5cGVEZXNjAGdldF9Db3B5
b2ZQcm9kdWN0VHlwZURlc2NfSXNOdWxsAGdldF9Db3B5b2ZQcm9kdWN0TGluZUlEAGdldF9Db3B5
b2ZQcm9kdWN0TGluZUlEX0lzTnVsbABnZXRfQ29weW9mUHJvZHVjdExpbmVEZXNjAGdldF9Db3B5
b2ZQcm9kdWN0TGluZURlc2NfSXNOdWxsAGdldF9Db3B5b2ZQcm9kdWN0SXRlbUdyb3VwAGdldF9D
b3B5b2ZQcm9kdWN0SXRlbUdyb3VwX0lzTnVsbABnZXRfQ29weW9mUHJvZHVjdElEAGdldF9Db3B5
b2ZQcm9kdWN0SURfSXNOdWxsAGdldF9Db3B5b2ZQcm9kdWN0REhJRmxhZwBnZXRfQ29weW9mUHJv
ZHVjdERISUZsYWdfSXNOdWxsAGdldF9Db3B5b2ZQcm9kdWN0RGVzYwBnZXRfQ29weW9mUHJvZHVj
dERlc2NfSXNOdWxsAGdldF9Db3B5b2ZQcm9kdWN0Q2xhc3NJRABnZXRfQ29weW9mUHJvZHVjdENs
YXNzSURfSXNOdWxsAGdldF9Db3B5b2ZQcm9kdWN0Q2xhc3NEZXNjAGdldF9Db3B5b2ZQcm9kdWN0
Q2xhc3NEZXNjX0lzTnVsbABCbG9iQ29sdW1uAGdldF9SYXdEYXRhVEVYVABzZXRfUmF3RGF0YVRF
WFQAZ2V0X1Jhd0RhdGFURVhUX0lzTnVsbABzZXRfUmF3RGF0YVRFWFRfSXNOdWxsAE5leHRSb3cA
RW5kT2ZSb3dzZXQARU9ERXJyb3JDb2RlAEVPREVycm9yQ29kZV9Jc051bGwARU9ERXJyb3JDb2x1
bW4ARU9ERXJyb3JDb2x1bW5fSXNOdWxsAEVPREVycm9yRGVzY3JpcHRpb24ARU9ERXJyb3JEZXNj
cmlwdGlvbl9Jc051bGwARU9EQ29tcG9uZW50TmFtZQBFT0RDb21wb25lbnROYW1lX0lzTnVsbABF
T0RDb2x1bW5OYW1lAEVPRENvbHVtbk5hbWVfSXNOdWxsAFRvdGFsVW5pdENvc3QAVG90YWxVbml0
Q29zdF9Jc051bGwAUHJvZHVjdEtpdFNpemUAUHJvZHVjdEtpdFNpemVfSXNOdWxsAFByb2R1Y3RJ
dGVtVHlwZQBQcm9kdWN0SXRlbVR5cGVfSXNOdWxsAENvcHlvZlByb2R1Y3RVbml0AENvcHlvZlBy
b2R1Y3RVbml0X0lzTnVsbABDb3B5b2ZQcm9kdWN0VHlwZUlEAENvcHlvZlByb2R1Y3RUeXBlSURf
SXNOdWxsAENvcHlvZlByb2R1Y3RUeXBlRGVzYwBDb3B5b2ZQcm9kdWN0VHlwZURlc2NfSXNOdWxs
AENvcHlvZlByb2R1Y3RMaW5lSUQAQ29weW9mUHJvZHVjdExpbmVJRF9Jc051bGwAQ29weW9mUHJv
ZHVjdExpbmVEZXNjAENvcHlvZlByb2R1Y3RMaW5lRGVzY19Jc051bGwAQ29weW9mUHJvZHVjdEl0
ZW1Hcm91cABDb3B5b2ZQcm9kdWN0SXRlbUdyb3VwX0lzTnVsbABDb3B5b2ZQcm9kdWN0SUQAQ29w
eW9mUHJvZHVjdElEX0lzTnVsbABDb3B5b2ZQcm9kdWN0REhJRmxhZwBDb3B5b2ZQcm9kdWN0REhJ
RmxhZ19Jc051bGwAQ29weW9mUHJvZHVjdERlc2MAQ29weW9mUHJvZHVjdERlc2NfSXNOdWxsAENv
cHlvZlByb2R1Y3RDbGFzc0lEAENvcHlvZlByb2R1Y3RDbGFzc0lEX0lzTnVsbABDb3B5b2ZQcm9k
dWN0Q2xhc3NEZXNjAENvcHlvZlByb2R1Y3RDbGFzc0Rlc2NfSXNOdWxsAFJhd0RhdGFURVhUAFJh
d0RhdGFURVhUX0lzTnVsbABQYXJlbnRDb21wb25lbnQAU3lzdGVtLlJlc291cmNlcwBSZXNvdXJj
ZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVz
b3VyY2VDdWx0dXJlAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUA
Q3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABJbnB1dElEAElucHV0
TmFtZQBCdWZmZXIAT3V0cHV0TWFwAFJvdwBCdWZmZXJDb2x1bW5JbmRleGVzAHZhbHVlAENvbXBv
bmVudABTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBT
eXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFu
eUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRy
aWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRl
AEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2Vz
AENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRy
aWJ1dGUAU0NfQzA0NEUxNTA1Mjg3NDFCMzg5MjQzMjY4NzRERjYzMzIAU3RyaW5nAFN0cmluZ0Nv
bXBhcmlzb24ARXF1YWxzAEdldENvbHVtbkluZGV4ZXMAU1NJU1NjcmlwdENvbXBvbmVudEVudHJ5
UG9pbnRBdHRyaWJ1dGUAPFByZUV4ZWN1dGU+Yl9fMABjb2x1bW4xAGNvbHVtbjIAQ29tcGFyaXNv
bmAxAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGUxAENvbXBpbGVyR2VuZXJh
dGVkQXR0cmlidXRlAEludDMyAENvbXBhcmVUbwBNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1BpcGVs
aW5lV3JhcABNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyAElEVFNDb21w
b25lbnRNZXRhRGF0YTEwMABnZXRfQ29tcG9uZW50TWV0YURhdGEASURUU0lucHV0Q29sbGVjdGlv
bjEwMABnZXRfSW5wdXRDb2xsZWN0aW9uAElEVFNJbnB1dDEwMABnZXRfSXRlbQBJRFRTSW5wdXRD
b2x1bW5Db2xsZWN0aW9uMTAwAGdldF9JbnB1dENvbHVtbkNvbGxlY3Rpb24AZ2V0X0NvdW50AGdl
dF9JRABTeXN0ZW0uQ29sbGVjdGlvbnMASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgBnZXRfQ3Vy
cmVudABJRFRTSW5wdXRDb2x1bW4xMDAAZ2V0X05hbWUAQ29udmVydABUb1N0cmluZwBHZXRPYmpl
Y3RJbmRleEJ5SUQATW92ZU5leHQASURpc3Bvc2FibGUARGlzcG9zZQBBcnJheQBTb3J0AFN5c3Rl
bS5UZXh0AFN0cmluZ0J1aWxkZXIAQ29uY2F0AEFwcGVuZABFbmNvZGluZwBHZXRFbmNvZGluZwBH
ZXRCeXRlcwBBZGRCbG9iRGF0YQBHZXRJbnQzMgBJc051bGwAR2V0U3RyaW5nAEdldERvdWJsZQBz
ZXRfSXRlbQBTZXROdWxsAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24AU3lzdGVtLkRpYWdub3N0
aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBH
ZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1v
ZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQAuY2N0b3IA
U0NfODVkNjFkMDBiYzRmNDVjM2FlMTlkYzI3ZGE2ZTdjOWQuUHJvcGVydGllcy5SZXNvdXJjZXMu
cmVzb3VyY2VzAAAAD0kAbgBwAHUAdAAgADAAAAM9AAADOwAAgJtJAHMATgB1AGwAbAAgAHAAcgBv
AHAAZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUA
LgAgAEEAcwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBt
AG4AIABpAG4AcwB0AGUAYQBkAC4AAHFTAEMAXwA4ADUAZAA2ADEAZAAwADAAYgBjADQAZgA0ADUA
YwAzAGEAZQAxADkAZABjADIANwBkAGEANgBlADcAYwA5AGQALgBQAHIAbwBwAGUAcgB0AGkAZQBz
AC4AUgBlAHMAbwB1AHIAYwBlAHMAAN7y2mJRfvxPsQjRbN+r17gACImEXc2AgMyRCLd6XFYZNOCJ
AwYSGAMGEhwDIAABCSAEAQgOEhUSGQUgAQESFAIGCAQGHRIQAwYSFQYgAgEIEhUCBg4JIAMBEhUd
CBIZAyAACAMgAAIDIAAOAyAADQQgABIdBSABARIdBCABAQIDKAAIAygAAgMoAA4DKAANBCgAEh0D
BhIFBSABARIFAwYSIQMGEiUEAAASIQQAABIlBQABARIlBAgAEiEECAASJQMGEiQEAAASJAQIABIk
BCABAQ4EIAEBCAYgAgIOEV0FIAEdCAgEAQAAAAcAAggSEBIQBwYVEmUBEhAEIAEICAQgABJxBCAA
EnUFIAESeRwEIAASfQUgABKAgQMgABwEAAEODgYVEmUBEhAFIAIBHBgNEAECAR0eABUSZQEeAAQK
ARIQDgcFHQgIEoCFEoCBEoCNBQACDg4OBiABEoCVDgQgARwIBAABDhwGAAESgJkIBSABHQUOBSAB
AR0FBgcCEoCVCAMGHQgEIAECCAQgAQ4IBCABDQgFIAIBCBwIAAESgKURgKkFIAASgK0HIAIBDhKA
rQQHARIhBiABARGAtQgBAAIAAAAAAAMAAAFHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjAB
AFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQoAQAjU0NfODVkNjFkMDBi
YzRmNDVjM2FlMTlkYzI3ZGE2ZTdjOWQAAAUBAAAAAA4BAAlNaWNyb3NvZnQAAB8BABpDb3B5cmln
aHQgQCBNaWNyb3NvZnQgMjAxNgAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhy
b3dzAQAAtEYAAAAAAAAAAAAAzkYAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBGAAAAAAAAAAAA
AAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAY
AACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAAPgD
AAAAAAAAAAAAAPgDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAAB
AAAAAQBIQyAaAAABAEhDIBo/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIA
RgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARY
AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAA0AwAAAQAwADAAMAAwADAANABiADAA
AAA0AAoAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAE0AaQBjAHIAbwBzAG8AZgB0AAAAcAAk
AAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADgANQBkADYAMQBkADAA
MABiAGMANABmADQANQBjADMAYQBlADEAOQBkAGMAMgA3AGQAYQA2AGUANwBjADkAZAAAAEAADwAB
AEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA2ADYAOAA4AC4AMQA3ADIAMgA0AAAA
AABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfAEMAMAA0ADQARQAxADUAMAA1
ADIAOAA3ADQAMQBCADMAOAA5ADIANAAzADIANgA4ADcANABEAEYANgAzADMAMgAuAGQAbABsAAAA
XAAbAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABA
ACAATQBpAGMAcgBvAHMAbwBmAHQAIAAyADAAMQA2AAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwA
RgBpAGwAZQBuAGEAbQBlAAAAUwBDAF8AQwAwADQANABFADEANQAwADUAMgA4ADcANAAxAEIAMwA4
ADkAMgA0ADMAMgA2ADgANwA0AEQARgA2ADMAMwAyAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUA
YwB0AE4AYQBtAGUAAAAAAFMAQwBfADgANQBkADYAMQBkADAAMABiAGMANABmADQANQBjADMAYQBl
ADEAOQBkAGMAMgA3AGQAYQA2AGUANwBjADkAZAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIA
cwBpAG8AbgAAADEALgAwAC4ANgA2ADgAOAAuADEANwAyADIANAAAAAAASAAPAAEAQQBzAHMAZQBt
AGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgA2ADgAOAAuADEANwAyADIANAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADgNgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                          name="VSTAProjectName"
                          typeConverter="NOTBROWSABLE">SC_c044e150528741b38924326874df6332</property>
                        <property
                          dataType="System.String"
                          description="Specifies the programming language used by the script."
                          name="ScriptLanguage"
                          typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages, Microsoft.SqlServer.VSTAScriptingLib, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">CSharp</property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read-only variables."
                          name="ReadOnlyVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read/write variables."
                          name="ReadWriteVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.String"
                          description="List of breakpoints present on the script."
                          isArray="true"
                          name="BreakpointCollection"
                          typeConverter="NOTBROWSABLE">
                          <arrayElements
                            arrayElementCount="0" />
                        </property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataChecksum"
                          typeConverter="NOTBROWSABLE">5c68860691d1904069b3f2cd507b022e</property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataShaChecksum"
                          typeConverter="NOTBROWSABLE">08462e9c3aa554fca7c921c2a8bd00a8488322ae</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">Microsoft.SqlServer.Dts.Pipeline.ScriptComponentHost, Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0]"
                          hasSideEffects="true"
                          name="Input 0">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorCode]"
                              cachedDataType="i4"
                              cachedName="EOD_ErrorCode"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorCode]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="EOD_ErrorColumn"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorColumn]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorDescription]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="500"
                              cachedName="EOD_ErrorDescription"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorDescription]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ComponentName]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="100"
                              cachedName="EOD_ComponentName"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ComponentName]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ColumnName]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="100"
                              cachedName="EOD_ColumnName"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ColumnName]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Total Unit Cost]"
                              cachedDataType="r8"
                              cachedName="Total Unit Cost"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Total Unit Cost]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Product_Kit_Size]"
                              cachedDataType="r8"
                              cachedName="Product_Kit_Size"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Kit_Size]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Product_Item_Type]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Item_Type"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Item_Type]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_Unit]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="Copy of Product_Unit"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Unit]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_Type_ID]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="Copy of Product_Type_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_Type_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Type_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_Line_ID]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="6"
                              cachedName="Copy of Product_Line_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_Line_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Line_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_ItemGroup]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="6"
                              cachedName="Copy of Product_ItemGroup"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ItemGroup]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_ID]"
                              cachedDataType="wstr"
                              cachedLength="30"
                              cachedName="Copy of Product_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_DHI_Flag]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="8"
                              cachedName="Copy of Product_DHI_Flag"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_DHI_Flag]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_Class_ID]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="6"
                              cachedName="Copy of Product_Class_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[Copy of Product_Class_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Class_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_Desc]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0]"
                          name="Output 0"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0].Columns[RawDataTEXT]"
                              codePage="1252"
                              dataType="text"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0].Columns[RawDataTEXT]"
                              name="RawDataTEXT" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion"
                      componentClassID="{62B1106C-7DB8-4EC8-ADD6-4C664DFFC54A}"
                      contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Data Conversion"
                      name="Data Conversion"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input]"
                          name="Data Conversion Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Desc]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Line_Desc]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Line_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Type_Desc]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Type_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Unit]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Unit"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Unit]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Class_Desc]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Class_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_ItemGroup]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_ItemGroup"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ItemGroup]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_DHI_Flag]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_DHI_Flag"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_DHI_Flag]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_ID]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Line_ID]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Line_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Class_ID]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Class_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Type_ID]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Type_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_ID]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output]"
                          exclusionGroup="1"
                          name="Data Conversion Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Desc]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Desc]"
                              name="Copy of Product_Desc"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Desc]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_Desc]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_Desc]"
                              name="Copy of Product_Line_Desc"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_Desc]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_Desc]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_Desc]"
                              name="Copy of Product_Type_Desc"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_Desc]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Unit]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Unit]"
                              name="Copy of Product_Unit"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Unit]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_Desc]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_Desc]"
                              name="Copy of Product_Class_Desc"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_Desc]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ItemGroup]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="6"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ItemGroup]"
                              name="Copy of Product_ItemGroup"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ItemGroup]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_DHI_Flag]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="8"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_DHI_Flag]"
                              name="Copy of Product_DHI_Flag"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_DHI_Flag]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ID]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ID]"
                              name="Copy of Product_ID"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ID]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_ID]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="6"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_ID]"
                              name="Copy of Product_Line_ID"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_ID]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_ID]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="6"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_ID]"
                              name="Copy of Product_Class_ID"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_ID]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_ID]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_ID]"
                              name="Copy of Product_Type_ID"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_ID]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Data Conversion Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table"
                      componentClassID="{4ADA7EAA-136C-4215-8098-D7A7C27FC0D1}"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Destination SFDC Future_Products Table"
                      usesDispositions="true"
                      validateExternalMetadata="False"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[dbo].[FutureProducts_Staging]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable">User::vSchemaTableName</property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">4</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">ROWS_PER_BATCH = 5000</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Connections[OleDbConnection]"
                          connectionManagerID="{B4BFA6BD-2DD7-4AB9-ABF4-B4BEC305BCE0}:external"
                          connectionManagerRefId="Project.ConnectionManagers[OLEDB_Target]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="RedirectRow"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Product_Item_Type]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Item_Type"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Item_Type]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Item_Type]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Product_Kit_Size]"
                              cachedDataType="r8"
                              cachedName="Product_Kit_Size"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Kit_Size]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Kit_Size]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Total Unit Cost]"
                              cachedDataType="r8"
                              cachedName="Total Unit Cost"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Total Unit Cost]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Total Unit Cost]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[LN_Product_Flag]"
                              cachedDataType="bool"
                              cachedName="LN_Product_Flag"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[LN_Product_Flag]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LN_Product_Flag]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[LoadTimeStamp]"
                              cachedDataType="date"
                              cachedName="LoadTimeStamp"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[LoadTimeStamp]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LoadTimeStamp]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Desc"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Desc]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Line_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Line_Desc"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Line_Desc]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Type_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Type_Desc"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Type_Desc]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Class_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Class_Desc"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Class_Desc]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_ItemGroup]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="6"
                              cachedName="Copy of Product_ItemGroup"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_ItemGroup]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ItemGroup]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Unit]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="Copy of Product_Unit"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Unit]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Unit]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_DHI_Flag]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="8"
                              cachedName="Copy of Product_DHI_Flag"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_DHI_Flag]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_DHI_Flag]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_ID]"
                              cachedDataType="wstr"
                              cachedLength="30"
                              cachedName="Copy of Product_ID"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_ID]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Line_ID]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="6"
                              cachedName="Copy of Product_Line_ID"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Line_ID]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Class_ID]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="6"
                              cachedName="Copy of Product_Class_ID"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Class_ID]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Type_ID]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="Copy of Product_Type_ID"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Type_ID]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_ID]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_ID]"
                              dataType="wstr"
                              length="30"
                              name="Product_ID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Desc]"
                              codePage="1252"
                              dataType="str"
                              length="30"
                              name="Product_Desc" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Line_ID]"
                              codePage="1252"
                              dataType="str"
                              length="6"
                              name="Product_Line_ID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Line_Desc]"
                              codePage="1252"
                              dataType="str"
                              length="30"
                              name="Product_Line_Desc" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Class_ID]"
                              codePage="1252"
                              dataType="str"
                              length="6"
                              name="Product_Class_ID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Class_Desc]"
                              codePage="1252"
                              dataType="str"
                              length="30"
                              name="Product_Class_Desc" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Type_ID]"
                              codePage="1252"
                              dataType="str"
                              length="3"
                              name="Product_Type_ID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Type_Desc]"
                              codePage="1252"
                              dataType="str"
                              length="30"
                              name="Product_Type_Desc" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_ItemGroup]"
                              codePage="1252"
                              dataType="str"
                              length="6"
                              name="Product_ItemGroup" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Unit]"
                              codePage="1252"
                              dataType="str"
                              length="3"
                              name="Product_Unit" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_DHI_Flag]"
                              codePage="1252"
                              dataType="str"
                              length="8"
                              name="Product_DHI_Flag" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Item_Type]"
                              dataType="i4"
                              name="Product_Item_Type" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Product_Kit_Size]"
                              dataType="i4"
                              name="Product_Kit_Size" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[Total Unit Cost]"
                              dataType="r8"
                              name="Total Unit Cost" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[LN_Product_Flag]"
                              dataType="bool"
                              name="LN_Product_Flag" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].ExternalColumns[LoadTimeStamp]"
                              dataType="dbTimeStamp"
                              name="LoadTimeStamp" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products"
                      componentClassID="{8C084929-27D1-479F-9641-ABB7CDADF1AC}"
                      contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Excel Source"
                      name="Excel Source Future_Products"
                      usesDispositions="true"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">Sheet1$</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">0</property>
                        <property
                          dataType="System.String"
                          description="The mapping from parameters in the SQL command to variables."
                          name="ParameterMapping"></property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[Excel Connection Manager]"
                          connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output]"
                          name="Excel Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[_RowNum]"
                              dataType="r8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[_RowNum]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[_RowNum]"
                              name="_RowNum"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ID]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_ID]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ID]"
                              name="Product_ID"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Desc]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Desc]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Desc]"
                              name="Product_Desc"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_ID]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Line_ID]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_ID]"
                              name="Product_Line_ID"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_Desc]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Line_Desc]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_Desc]"
                              name="Product_Line_Desc"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_ID]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Class_ID]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_ID]"
                              name="Product_Class_ID"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_Desc]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Class_Desc]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_Desc]"
                              name="Product_Class_Desc"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_ID]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Type_ID]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_ID]"
                              name="Product_Type_ID"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_Desc]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Type_Desc]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_Desc]"
                              name="Product_Type_Desc"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ItemGroup]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_ItemGroup]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ItemGroup]"
                              name="Product_ItemGroup"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Unit]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Unit]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Unit]"
                              name="Product_Unit"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_DHI_Flag]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_DHI_Flag]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_DHI_Flag]"
                              name="Product_DHI_Flag"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Item_Type]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Item_Type]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Item_Type]"
                              name="Product_Item_Type"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Kit_Size]"
                              dataType="r8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Kit_Size]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Kit_Size]"
                              name="Product_Kit_Size"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Total Unit Cost]"
                              dataType="r8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Total Unit Cost]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Total Unit Cost]"
                              name="Total Unit Cost"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LN_Product_Flag]"
                              dataType="bool"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[LN_Product_Flag]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LN_Product_Flag]"
                              name="LN_Product_Flag"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LoadTimeStamp]"
                              dataType="date"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[LoadTimeStamp]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LoadTimeStamp]"
                              name="LoadTimeStamp"
                              truncationRowDisposition="FailComponent" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[_RowNum]"
                              dataType="r8"
                              name="_RowNum" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_ID]"
                              dataType="wstr"
                              length="255"
                              name="Product_ID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Desc]"
                              dataType="wstr"
                              length="255"
                              name="Product_Desc" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Line_ID]"
                              dataType="wstr"
                              length="255"
                              name="Product_Line_ID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Line_Desc]"
                              dataType="wstr"
                              length="255"
                              name="Product_Line_Desc" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Class_ID]"
                              dataType="wstr"
                              length="255"
                              name="Product_Class_ID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Class_Desc]"
                              dataType="wstr"
                              length="255"
                              name="Product_Class_Desc" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Type_ID]"
                              dataType="wstr"
                              length="255"
                              name="Product_Type_ID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Type_Desc]"
                              dataType="wstr"
                              length="255"
                              name="Product_Type_Desc" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_ItemGroup]"
                              dataType="wstr"
                              length="255"
                              name="Product_ItemGroup" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Unit]"
                              dataType="wstr"
                              length="255"
                              name="Product_Unit" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_DHI_Flag]"
                              dataType="wstr"
                              length="255"
                              name="Product_DHI_Flag" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Item_Type]"
                              dataType="wstr"
                              length="255"
                              name="Product_Item_Type" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Product_Kit_Size]"
                              dataType="r8"
                              name="Product_Kit_Size" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[Total Unit Cost]"
                              dataType="r8"
                              name="Total Unit Cost" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[LN_Product_Flag]"
                              dataType="bool"
                              name="LN_Product_Flag" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].ExternalColumns[LoadTimeStamp]"
                              dataType="date"
                              name="LoadTimeStamp" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output]"
                          isErrorOut="true"
                          name="Excel Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[_RowNum]"
                              dataType="r8"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[_RowNum]"
                              name="_RowNum" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_ID]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_ID]"
                              name="Product_ID" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Desc]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Desc]"
                              name="Product_Desc" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Line_ID]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Line_ID]"
                              name="Product_Line_ID" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Line_Desc]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Line_Desc]"
                              name="Product_Line_Desc" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Class_ID]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Class_ID]"
                              name="Product_Class_ID" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Class_Desc]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Class_Desc]"
                              name="Product_Class_Desc" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Type_ID]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Type_ID]"
                              name="Product_Type_ID" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Type_Desc]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Type_Desc]"
                              name="Product_Type_Desc" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_ItemGroup]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_ItemGroup]"
                              name="Product_ItemGroup" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Unit]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Unit]"
                              name="Product_Unit" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_DHI_Flag]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_DHI_Flag]"
                              name="Product_DHI_Flag" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Item_Type]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Item_Type]"
                              name="Product_Item_Type" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Kit_Size]"
                              dataType="r8"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Kit_Size]"
                              name="Product_Kit_Size" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Total Unit Cost]"
                              dataType="r8"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Total Unit Cost]"
                              name="Total Unit Cost" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[LN_Product_Flag]"
                              dataType="bool"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[LN_Product_Flag]"
                              name="LN_Product_Flag" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[LoadTimeStamp]"
                              dataType="date"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[LoadTimeStamp]"
                              name="LoadTimeStamp" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime"
                      componentClassID="{49928E82-9C4E-49F0-AABE-3812B82707EC}"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Get AuditDateTime"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDInit]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDInit]"
                              name="AuditJobInstanceSourceIDInit"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::vJobInstanceSourceID]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::vJobInstanceSourceID]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDIncr]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDIncr]"
                              name="AuditJobInstanceSourceIDIncr"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::vJobInstanceSourceID]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::vJobInstanceSourceID]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditCreatedDTS]"
                              dataType="dbTimeStamp2"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditCreatedDTS]"
                              name="AuditCreatedDTS"
                              scale="3"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_DBTIMESTAMP2,3)@[User::vAuditDateTime]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_DBTIMESTAMP2,3)@[User::vAuditDateTime]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditModifiedDTS]"
                              dataType="dbTimeStamp2"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditModifiedDTS]"
                              name="AuditModifiedDTS"
                              scale="3"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_DBTIMESTAMP2,3)@[User::vAuditDateTime]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_DBTIMESTAMP2,3)@[User::vAuditDateTime]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[IsActive]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[IsActive]"
                              name="IsActive"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">1</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">1</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount"
                      componentClassID="{E2697D8C-70DA-42B2-8208-A19CE3A9FE41}"
                      contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                      name="Get Records Total RowCount">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the variable to hold the row count."
                          name="VariableName">User::vInsertedTotalRowCount</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Inputs[Row Count Input 1]"
                          hasSideEffects="true"
                          name="Row Count Input 1">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Outputs[Row Count Output 1]"
                          name="Row Count Output 1"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Inputs[Row Count Input 1]">
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table"
                      componentClassID="{4ADA7EAA-136C-4215-8098-D7A7C27FC0D1}"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Insert Redirected or Rejected Rows to Exception Table"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[Audit].[ExceptionData]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable">User::vSchemaExceptionTable</property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">4</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Connections[OleDbConnection]"
                          connectionManagerID="{1949006D-7410-4029-A3D7-BCD2F833F331}:external"
                          connectionManagerRefId="Project.ConnectionManagers[OLEDB_ETLAudit]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[RawDataTEXT]"
                              cachedCodepage="1252"
                              cachedDataType="text"
                              cachedName="RawDataTEXT"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[RawDataTEXT]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0].Columns[RawDataTEXT]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[JobInstanceID]"
                              cachedDataType="i8"
                              cachedName="JobInstanceID"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[JobInstanceID]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[JobInstanceID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[RowNumber]"
                              cachedDataType="i4"
                              cachedName="RowNumber"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[RowNumber]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[RowNumber]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[ExceptionDataID]"
                              dataType="i8"
                              name="ExceptionDataID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[JobInstanceID]"
                              dataType="i8"
                              name="JobInstanceID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[RowNumber]"
                              dataType="i4"
                              name="RowNumber" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[RawDataTEXT]"
                              codePage="1252"
                              dataType="text"
                              name="RawDataTEXT" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows"
                      componentClassID="{E2697D8C-70DA-42B2-8208-A19CE3A9FE41}"
                      contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                      name="RowCount - Get TotalRejectedRows">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the variable to hold the row count."
                          name="VariableName">User::vRejectedTotalRowCount</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Inputs[Row Count Input 1]"
                          hasSideEffects="true"
                          name="Row Count Input 1">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Outputs[Row Count Output 1]"
                          name="Row Count Output 1"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Inputs[Row Count Input 1]">
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description"
                      componentClassID="{874F7595-FB5F-40FF-96AF-FBFF8250E3EF}"
                      name="TF Error Output Description"
                      version="1">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          name="Input Lineage ID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[JobInstanceID]}:JobInstanceID:DT_I8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[RowNumber]}:RowNumber:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorCode]}:EOD_ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorColumn]}:EOD_ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorDescription]}:EOD_ErrorDescription:DT_STR:500;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ComponentName]}:EOD_ComponentName:DT_STR:100;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ColumnName]}:EOD_ColumnName:DT_STR:100;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0].Columns[RawDataTEXT]}:RawDataTEXT:DT_TEXT:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Desc]}:Product_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Line_Desc]}:Product_Line_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Type_Desc]}:Product_Type_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Unit]}:Product_Unit:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Class_Desc]}:Product_Class_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_ItemGroup]}:Product_ItemGroup:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_DHI_Flag]}:Product_DHI_Flag:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_ID]}:Product_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Line_ID]}:Product_Line_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Class_ID]}:Product_Class_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[Product_Type_ID]}:Product_Type_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Desc]}:Copy of Product_Desc:DT_STR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_Desc]}:Copy of Product_Line_Desc:DT_STR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_Desc]}:Copy of Product_Type_Desc:DT_STR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Unit]}:Copy of Product_Unit:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_Desc]}:Copy of Product_Class_Desc:DT_STR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ItemGroup]}:Copy of Product_ItemGroup:DT_STR:6;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_DHI_Flag]}:Copy of Product_DHI_Flag:DT_STR:8;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ID]}:Copy of Product_ID:DT_WSTR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_ID]}:Copy of Product_Line_ID:DT_STR:6;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_ID]}:Copy of Product_Class_ID:DT_STR:6;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_ID]}:Copy of Product_Type_ID:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Product_Item_Type]}:Product_Item_Type:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Product_Kit_Size]}:Product_Kit_Size:DT_R8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Total Unit Cost]}:Total Unit Cost:DT_R8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[LN_Product_Flag]}:LN_Product_Flag:DT_BOOL:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[LoadTimeStamp]}:LoadTimeStamp:DT_DATE:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Desc]}:Copy of Product_Desc:DT_STR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Line_Desc]}:Copy of Product_Line_Desc:DT_STR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Type_Desc]}:Copy of Product_Type_Desc:DT_STR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Class_Desc]}:Copy of Product_Class_Desc:DT_STR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_ItemGroup]}:Copy of Product_ItemGroup:DT_STR:6;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Unit]}:Copy of Product_Unit:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_DHI_Flag]}:Copy of Product_DHI_Flag:DT_STR:8;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_ID]}:Copy of Product_ID:DT_WSTR:30;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Line_ID]}:Copy of Product_Line_ID:DT_STR:6;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Class_ID]}:Copy of Product_Class_ID:DT_STR:6;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input].Columns[Copy of Product_Type_ID]}:Copy of Product_Type_ID:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[_RowNum]}:_RowNum:DT_R8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ID]}:Product_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Desc]}:Product_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_ID]}:Product_Line_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_Desc]}:Product_Line_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_ID]}:Product_Class_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_Desc]}:Product_Class_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_ID]}:Product_Type_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_Desc]}:Product_Type_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ItemGroup]}:Product_ItemGroup:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Unit]}:Product_Unit:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_DHI_Flag]}:Product_DHI_Flag:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Item_Type]}:Product_Item_Type:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Kit_Size]}:Product_Kit_Size:DT_R8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Total Unit Cost]}:Total Unit Cost:DT_R8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LN_Product_Flag]}:LN_Product_Flag:DT_BOOL:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LoadTimeStamp]}:LoadTimeStamp:DT_DATE:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[_RowNum]}:_RowNum:DT_R8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_ID]}:Product_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Desc]}:Product_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Line_ID]}:Product_Line_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Line_Desc]}:Product_Line_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Class_ID]}:Product_Class_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Class_Desc]}:Product_Class_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Type_ID]}:Product_Type_ID:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Type_Desc]}:Product_Type_Desc:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_ItemGroup]}:Product_ItemGroup:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Unit]}:Product_Unit:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_DHI_Flag]}:Product_DHI_Flag:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Item_Type]}:Product_Item_Type:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Product_Kit_Size]}:Product_Kit_Size:DT_R8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[Total Unit Cost]}:Total Unit Cost:DT_R8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[LN_Product_Flag]}:LN_Product_Flag:DT_BOOL:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[LoadTimeStamp]}:LoadTimeStamp:DT_DATE:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDInit]}:AuditJobInstanceSourceIDInit:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDIncr]}:AuditJobInstanceSourceIDIncr:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditCreatedDTS]}:AuditCreatedDTS:DT_DBTIMESTAMP2:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditModifiedDTS]}:AuditModifiedDTS:DT_DBTIMESTAMP2:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[IsActive]}:IsActive:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[RawDataTEXT]}:RawDataTEXT:DT_TEXT:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[JobInstanceID]}:JobInstanceID:DT_I8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[RowNumber]}:RowNumber:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorCode]}:EOD_ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorColumn]}:EOD_ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorDescription]}:EOD_ErrorDescription:DT_STR:500;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ComponentName]}:EOD_ComponentName:DT_STR:100;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ColumnName]}:EOD_ColumnName:DT_STR:100;</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          name="Virtual Input Columns">-2147482932:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[_RowNum]}:_RowNum:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:_RowNum:5:0:0:0:0;-2147482931:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ID]}:Product_ID:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_ID:130:255:0:0:0;-2147482930:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Desc]}:Product_Desc:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_Desc:130:255:0:0:0;-2147482929:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_ID]}:Product_Line_ID:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_Line_ID:130:255:0:0:0;-2147482928:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_Desc]}:Product_Line_Desc:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_Line_Desc:130:255:0:0:0;-2147482927:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_ID]}:Product_Class_ID:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_Class_ID:130:255:0:0:0;-2147482926:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_Desc]}:Product_Class_Desc:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_Class_Desc:130:255:0:0:0;-2147482925:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_ID]}:Product_Type_ID:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_Type_ID:130:255:0:0:0;-2147482924:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_Desc]}:Product_Type_Desc:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_Type_Desc:130:255:0:0:0;-2147482923:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ItemGroup]}:Product_ItemGroup:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_ItemGroup:130:255:0:0:0;-2147482922:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Unit]}:Product_Unit:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_Unit:130:255:0:0:0;-2147482921:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_DHI_Flag]}:Product_DHI_Flag:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:Product_DHI_Flag:130:255:0:0:0;-2147482920:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Item_Type]}:Product_Item_Type:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Item_Type]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Item_Type]}:Product_Item_Type:130:255:0:0:0;-2147482919:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Kit_Size]}:Product_Kit_Size:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Kit_Size]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Kit_Size]}:Product_Kit_Size:5:0:0:0:0;-2147482918:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Total Unit Cost]}:Total Unit Cost:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Total Unit Cost]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Total Unit Cost]}:Total Unit Cost:5:0:0:0:0;-2147482917:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LN_Product_Flag]}:LN_Product_Flag:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:LN_Product_Flag:11:0:0:0:0;-2147482916:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LoadTimeStamp]}:LoadTimeStamp:Excel Source Future_Products:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:LoadTimeStamp:7:0:0:0:0;-2147482915:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Desc]}:Copy of Product_Desc:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Desc]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Desc]}:Copy of Product_Desc:129:30:0:0:1252;-2147482914:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_Desc]}:Copy of Product_Line_Desc:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_Desc]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_Desc]}:Copy of Product_Line_Desc:129:30:0:0:1252;-2147482913:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_Desc]}:Copy of Product_Type_Desc:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_Desc]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_Desc]}:Copy of Product_Type_Desc:129:30:0:0:1252;-2147482912:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Unit]}:Copy of Product_Unit:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Unit]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Unit]}:Copy of Product_Unit:129:3:0:0:1252;-2147482911:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_Desc]}:Copy of Product_Class_Desc:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_Desc]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_Desc]}:Copy of Product_Class_Desc:129:30:0:0:1252;-2147482910:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ItemGroup]}:Copy of Product_ItemGroup:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ItemGroup]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ItemGroup]}:Copy of Product_ItemGroup:129:6:0:0:1252;-2147482909:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_DHI_Flag]}:Copy of Product_DHI_Flag:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_DHI_Flag]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_DHI_Flag]}:Copy of Product_DHI_Flag:129:8:0:0:1252;-2147482908:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ID]}:Copy of Product_ID:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ID]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ID]}:Copy of Product_ID:130:30:0:0:0;-2147482907:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_ID]}:Copy of Product_Line_ID:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_ID]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_ID]}:Copy of Product_Line_ID:129:6:0:0:1252;-2147482906:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_ID]}:Copy of Product_Class_ID:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_ID]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_ID]}:Copy of Product_Class_ID:129:6:0:0:1252;-2147482905:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_ID]}:Copy of Product_Type_ID:Data Conversion:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':True:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_ID]}:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_ID]}:Copy of Product_Type_ID:129:3:0:0:1252;-2147482904:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDInit]}:AuditJobInstanceSourceIDInit:Get AuditDateTime:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:AuditJobInstanceSourceIDInit:3:0:0:0:0;-2147482903:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDIncr]}:AuditJobInstanceSourceIDIncr:Get AuditDateTime:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:AuditJobInstanceSourceIDIncr:3:0:0:0:0;-2147482902:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditCreatedDTS]}:AuditCreatedDTS:Get AuditDateTime:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:AuditCreatedDTS:304:0:0:3:0;-2147482901:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditModifiedDTS]}:AuditModifiedDTS:Get AuditDateTime:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:AuditModifiedDTS:304:0:0:3:0;-2147482900:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[IsActive]}:IsActive:Get AuditDateTime:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:IsActive:3:0:0:0:0;-2147482899:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]}:ErrorCode:Destination SFDC Future_Products Table:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:ErrorCode:3:0:0:0:0;-2147482898:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]}:ErrorColumn:Destination SFDC Future_Products Table:#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']}:Error Input 349 - 'Error Input 0':False:#-1:#-1:ErrorColumn:3:0:0:0:0;</property>
                        <property
                          dataType="System.Boolean"
                          name="Show warning">false</property>
                        <property
                          dataType="System.Boolean"
                          name="Add Error Code">true</property>
                        <property
                          dataType="System.Boolean"
                          name="Add Error Column">true</property>
                        <property
                          dataType="System.Boolean"
                          name="Add Error Description">true</property>
                        <property
                          dataType="System.Boolean"
                          name="Add Component Name">true</property>
                        <property
                          dataType="System.Boolean"
                          name="Add Column Name">true</property>
                        <property
                          dataType="System.Boolean"
                          name="Add Column Type">false</property>
                        <property
                          dataType="System.Boolean"
                          name="Add Column Length">false</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">PW.TaskFactory.ErrorOutputDescription.ErrorOutputDescription, PW.TaskFactory110, Version=1.0.0.0, Culture=neutral, PublicKeyToken=47acf905d0337c39</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']"
                          name="Error Input 349 - 'Error Input 0'">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[_RowNum]"
                              cachedDataType="r8"
                              cachedName="_RowNum"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[_RowNum]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_ID]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Desc]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Line_ID]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Line_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Line_Desc]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Line_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Line_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Class_ID]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Class_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Class_Desc]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Class_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Class_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Type_ID]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Type_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Type_Desc]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Type_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Type_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_ItemGroup]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_ItemGroup"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_ItemGroup]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Unit]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Unit"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Unit]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_DHI_Flag]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_DHI_Flag"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_DHI_Flag]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Item_Type]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Product_Item_Type"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Item_Type]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Product_Kit_Size]"
                              cachedDataType="r8"
                              cachedName="Product_Kit_Size"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Product_Kit_Size]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Total Unit Cost]"
                              cachedDataType="r8"
                              cachedName="Total Unit Cost"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[Total Unit Cost]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[LN_Product_Flag]"
                              cachedDataType="bool"
                              cachedName="LN_Product_Flag"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LN_Product_Flag]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[LoadTimeStamp]"
                              cachedDataType="date"
                              cachedName="LoadTimeStamp"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output].Columns[LoadTimeStamp]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_Line_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Line_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_Type_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Type_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_Unit]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="Copy of Product_Unit"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Unit]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_Class_Desc]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="30"
                              cachedName="Copy of Product_Class_Desc"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_Desc]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_ItemGroup]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="6"
                              cachedName="Copy of Product_ItemGroup"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ItemGroup]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_DHI_Flag]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="8"
                              cachedName="Copy of Product_DHI_Flag"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_DHI_Flag]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_ID]"
                              cachedDataType="wstr"
                              cachedLength="30"
                              cachedName="Copy of Product_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_Line_ID]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="6"
                              cachedName="Copy of Product_Line_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Line_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_Class_ID]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="6"
                              cachedName="Copy of Product_Class_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Class_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[Copy of Product_Type_ID]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="Copy of Product_Type_ID"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Product_Type_ID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[AuditJobInstanceSourceIDInit]"
                              cachedDataType="i4"
                              cachedName="AuditJobInstanceSourceIDInit"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDInit]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[AuditJobInstanceSourceIDIncr]"
                              cachedDataType="i4"
                              cachedName="AuditJobInstanceSourceIDIncr"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDIncr]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[AuditCreatedDTS]"
                              cachedDataType="dbTimeStamp2"
                              cachedName="AuditCreatedDTS"
                              cachedScale="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditCreatedDTS]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[AuditModifiedDTS]"
                              cachedDataType="dbTimeStamp2"
                              cachedName="AuditModifiedDTS"
                              cachedScale="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditModifiedDTS]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[IsActive]"
                              cachedDataType="i4"
                              cachedName="IsActive"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[IsActive]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0'].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input]"
                          dangling="true"
                          name="Error Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output]"
                          name="Error Description Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorCode]"
                              name="EOD_ErrorCode" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorColumn]"
                              name="EOD_ErrorColumn" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorDescription]"
                              codePage="1252"
                              dataType="str"
                              length="500"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorDescription]"
                              name="EOD_ErrorDescription" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ComponentName]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ComponentName]"
                              name="EOD_ComponentName" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ColumnName]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ColumnName]"
                              name="EOD_ColumnName" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Total Unit Cost]"
                              dataType="r8"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Total Unit Cost]"
                              name="Total Unit Cost" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Kit_Size]"
                              dataType="r8"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Kit_Size]"
                              name="Product_Kit_Size" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Item_Type]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Product_Item_Type]"
                              name="Product_Item_Type" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Unit]"
                              codePage="1252"
                              dataType="str"
                              length="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Unit]"
                              name="Copy of Product_Unit" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_ID]"
                              codePage="1252"
                              dataType="str"
                              length="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_ID]"
                              name="Copy of Product_Type_ID" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_Desc]"
                              codePage="1252"
                              dataType="str"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Type_Desc]"
                              name="Copy of Product_Type_Desc" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_ID]"
                              codePage="1252"
                              dataType="str"
                              length="6"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_ID]"
                              name="Copy of Product_Line_ID" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_Desc]"
                              codePage="1252"
                              dataType="str"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Line_Desc]"
                              name="Copy of Product_Line_Desc" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ItemGroup]"
                              codePage="1252"
                              dataType="str"
                              length="6"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ItemGroup]"
                              name="Copy of Product_ItemGroup" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ID]"
                              dataType="wstr"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_ID]"
                              name="Copy of Product_ID" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_DHI_Flag]"
                              codePage="1252"
                              dataType="str"
                              length="8"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_DHI_Flag]"
                              name="Copy of Product_DHI_Flag" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Desc]"
                              codePage="1252"
                              dataType="str"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Desc]"
                              name="Copy of Product_Desc" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_ID]"
                              codePage="1252"
                              dataType="str"
                              length="6"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_ID]"
                              name="Copy of Product_Class_ID" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_Desc]"
                              codePage="1252"
                              dataType="str"
                              length="30"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[Copy of Product_Class_Desc]"
                              name="Copy of Product_Class_Desc" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                  </components>
                  <paths>
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Data Conversion Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Inputs[Row Count Input 1]"
                      name="Data Conversion Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Derived Column Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Inputs[Row Count Input 1]"
                      name="Derived Column Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Derived Column Output1]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Inputs[OLE DB Destination Input]"
                      name="Derived Column Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Error Description Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0]"
                      name="Error Description Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Excel Source Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input]"
                      name="Excel Source Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products.Outputs[Excel Source Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[OLE DB Destination Error Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 349 - 'Error Input 0']"
                      name="OLE DB Destination Error Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table.Outputs[OLE DB Destination Error Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Output 0]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Inputs[Derived Column Input]"
                      name="Output 0"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 1]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Inputs[Derived Column Input]"
                      name="Row Count Output 1"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Outputs[Row Count Output 1]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 11]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input]"
                      name="Row Count Output 1"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Outputs[Row Count Output 1]" />
                  </paths>
                </pipeline>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\TF File Properties Task"
              DTS:CreationName="PW.TaskFactory.FilePropertiesTask.FileProperties, PW.TaskFactory110, Version=1.0.0.0, Culture=neutral, PublicKeyToken=47acf905d0337c39"
              DTS:Description="TF File Properties Task"
              DTS:DTSID="{b4bc51b0-99df-4273-9952-0f15f9e47692}"
              DTS:ExecutableType="PW.TaskFactory.FilePropertiesTask.FileProperties, PW.TaskFactory110, Version=1.0.0.0, Culture=neutral, PublicKeyToken=47acf905d0337c39"
              DTS:LocaleID="-1"
              DTS:ObjectName="TF File Properties Task"
              DTS:TaskContact="File Properties Task;Pragmatic Works, Inc; Task Factory (c) 2009 - 2016 Pragmatic Works, Inc; http://www.pragmaticworks.com;support@pragmaticworks.com"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <FileProperties
                  File_FileName=""
                  File_Extension=""
                  File_CreationTime="vFileCreatedDate"
                  File_CreationTimeUtc=""
                  File_LastAccessTimeUtc=""
                  File_LastAccessTime=""
                  File_LastWriteTime="vFileLastModifiedDate"
                  File_LastWriteTimeUtc=""
                  File_FileInUse=""
                  File_Hidden=""
                  File_Readonly=""
                  File_Encrypted=""
                  File_Compressed=""
                  File_Archived=""
                  File_Exists=""
                  File_Content=""
                  File_Size=""
                  StopExecutionOnError="False"
                  SelectedSourceType="Variable"
                  SelectedVariableOrConnectionManager="vProcessingFullPathName" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{22335ac2-50e9-427e-9b14-cd4f8677d37e}"
              DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\TF File Properties Task"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination" />
          </DTS:PrecedenceConstraints>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{CEEA05D3-823E-4EF6-AC5E-22FEFE29FD83}"
              DTS:ObjectName="{CEEA05D3-823E-4EF6-AC5E-22FEFE29FD83}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::vProcessingFileName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{E3534945-3D3A-4080-8765-9218D4ACFF81}"
              DTS:ObjectName="{E3534945-3D3A-4080-8765-9218D4ACFF81}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::vProcessingFullPathName" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Recreate Index"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:DelayValidation="True"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{3c252e65-1a02-4d78-b7fa-6f090b43133a}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Recreate Index"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">@[User::vCreateAllIndexSQL]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B4BFA6BD-2DD7-4AB9-ABF4-B4BEC305BCE0}" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{762291a8-075c-4490-853b-d2cd2c268b16}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Truncate Target Table Beforehand">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand\Truncate &quot;Future_Products Table&quot;"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{cba8d455-6bd5-48a8-b633-457ff11e2df3}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Truncate &quot;Future_Products Table&quot;"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">@[User::vSQLTruncateTargetTable]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{B4BFA6BD-2DD7-4AB9-ABF4-B4BEC305BCE0}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="TRUNCATE TABLE [dbo].[FutureProducts]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{66bd81a4-ed6f-4100-a5f9-d3019a49bb00}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::vProcessingFileCount]&gt;0"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Get XLSX File Matching Name Criteria"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{1eb934e5-fc2f-4cad-90cf-514f379a7c62}"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{8965f87f-f7d2-428f-91c0-1b959e38c778}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::vDropAllIndexSQL] != &quot;&quot;"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Drop Index" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{386c2e3e-4761-4b19-b0a2-2f5bac7be7ce}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::vDropAllIndexSQL] == &quot;&quot;"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{89338754-12fc-4bdc-85f0-bfc7a8b6c122}"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Drop Index"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{f098e297-387d-4c83-b3ee-fac4e0370d55}"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\ExSQL Delete Duplicated Rows" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{fde0a761-b6dd-4232-9448-dd96ea10e8c7}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::vCreateAllIndexSQL] != &quot;&quot;"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\ExSQL Delete Duplicated Rows"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Recreate Index" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{6d33186f-8a68-4f48-9c97-1faaa5d25cd7}"
      DTS:From="Package\Initialization"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Initialization (Audit)" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{47b8049e-a448-4eb7-97be-0aa86363e1ee}"
      DTS:EvalOp="3"
      DTS:Expression="@[User::vProcessingFileCount]&gt;0"
      DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{9b97c7b6-8308-4666-8aa8-631087c16736}"
      DTS:From="Package\Initialization (Audit)"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Get LastRecordsProcessedDate For Package" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{d5f5ac8e-3026-408c-8ffa-46b06cfb43e4}"
      DTS:From="Package\Get LastRecordsProcessedDate For Package"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{8532A3C1-3F0B-4245-B88C-0ADEE8E17972}"
      DTS:From="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\Completion (Audit)" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="200,42"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database\Delete &quot;Future_Products&quot;"
          TopLeft="5.5,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="211,103"
          Size="211,146"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database"
          TopLeft="11,211.5" />
        <NodeLayout
          Size="211,42"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving\Rename  &quot;Future_Products&quot;"
          TopLeft="5.5,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="222,103"
          Size="222,146"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving"
          TopLeft="5.50000000000001,5.5" />
        <EdgeLayout
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory.PrecedenceConstraints[Constraint]"
          TopLeft="116.5,151.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="233,413"
          Size="233,456"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory"
          TopLeft="161,1441.5" />
        <NodeLayout
          Size="217,42"
          Id="Package\Completion (Audit)\Mark Job As Complete in Job"
          TopLeft="5.5,5.5" />
        <NodeLayout
          Size="256,42"
          Id="Package\Completion (Audit)\Mark Job as Complete in JobInstance"
          TopLeft="283,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="544,103"
          Size="544,146"
          Id="Package\Completion (Audit)"
          TopLeft="5.50000000000023,1957.5" />
        <NodeLayout
          Size="286,42"
          Id="Package\Get LastRecordsProcessedDate For Package"
          TopLeft="134.5,211.5" />
        <NodeLayout
          Size="223,42"
          Id="Package\Initialization\Validate Connection Managers"
          TopLeft="27,27" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="False"
          PanelSize="274,129"
          Size="161,43"
          Id="Package\Initialization"
          TopLeft="197,5.5" />
        <NodeLayout
          Size="385,42"
          Id="Package\Initialization (Audit)\Execute cmd shell and retrieve environment variable information"
          TopLeft="20,317" />
        <NodeLayout
          Size="161,42"
          Id="Package\Initialization (Audit)\Log Environment"
          TopLeft="137,384" />
        <NodeLayout
          Size="273,42"
          Id="Package\Initialization (Audit)\Log Processed  Table JobInstanceSource"
          TopLeft="79,245" />
        <NodeLayout
          Size="163,42"
          Id="Package\Initialization (Audit)\Populate ETLUser"
          TopLeft="133.0952380628,18.9607842851263" />
        <NodeLayout
          Size="155,42"
          Id="Package\Initialization (Audit)\Populate Joblog"
          TopLeft="136,105" />
        <NodeLayout
          Size="208,42"
          Id="Package\Initialization (Audit)\Populate new Job Instance"
          TopLeft="110,174.388235285538" />
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint]"
          TopLeft="214.0476190314,60.9607842851263">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,44.0392157148737"
              Start="0,0"
              End="0,36.5392157148737">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.5392157148737" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint 1]"
          TopLeft="213.75,147">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,27.388235285538"
              Start="0,0"
              End="0,19.888235285538">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.888235285538" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint 2]"
          TopLeft="214.7,215.988235285538">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,29.0117647144621"
              Start="0,0"
              End="0,21.5117647144621">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.5117647144621" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint 3]"
          TopLeft="215,359">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint 4]"
          TopLeft="214,287">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,30"
              Start="0,0"
              End="0,22.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,3.25,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="False"
          PanelSize="422,481"
          Size="197,43"
          Id="Package\Initialization (Audit)"
          TopLeft="179,108.5" />
        <NodeLayout
          Size="336,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script"
          TopLeft="32.5,313.5" />
        <NodeLayout
          Size="134,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Drop Index"
          TopLeft="5.50000000000006,415.5" />
        <NodeLayout
          Size="226,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\ExSQL Delete Duplicated Rows"
          TopLeft="87.5000000000001,825.5" />
        <NodeLayout
          Size="257,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Get XLSX File Matching Name Criteria"
          TopLeft="72,5.5" />
        <NodeLayout
          Size="277,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination"
          TopLeft="6.50000000000003,111.5" />
        <NodeLayout
          Size="188,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\TF File Properties Task"
          TopLeft="50,5.5" />
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File.PrecedenceConstraints[Constraint]"
          TopLeft="144.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,64"
              Start="0,0"
              End="0,56.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,56.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="288,205"
          Size="288,248"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File"
          TopLeft="56.5000000000001,517.5" />
        <NodeLayout
          Size="152,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Recreate Index"
          TopLeft="124.5,927.5" />
        <NodeLayout
          Size="241,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand\Truncate &quot;Future_Products Table&quot;"
          TopLeft="5.5,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="285,103"
          Size="285,146"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand"
          TopLeft="58,107.5" />
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint]"
          TopLeft="200.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,18.25,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 1]"
          TopLeft="200.5,253.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 2]"
          TopLeft="145.833333333333,355.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-73.3333333333333,60"
              Start="0,0"
              End="-73.3333333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.1706161137441" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.1706161137441"
                    Point2="0,24.1706161137441"
                    Point3="-4,24.1706161137441" />
                  <mssgle:LineSegment
                    End="-69.3333333333333,24.1706161137441" />
                  <mssgle:CubicBezierSegment
                    Point1="-69.3333333333333,24.1706161137441"
                    Point2="-73.3333333333333,24.1706161137441"
                    Point3="-73.3333333333333,28.1706161137441" />
                  <mssgle:LineSegment
                    End="-73.3333333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-44.6666666666667,29.1706161137441,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 3]"
          TopLeft="251.166666666667,355.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,162"
              Start="0,0"
              End="0,154.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,154.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,69.25,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 4]"
          TopLeft="72.5000000000001,457.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="81.3333333333334,60"
              Start="0,0"
              End="81.3333333333334,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.8011049723757" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.8011049723757"
                    Point2="0,35.8011049723757"
                    Point3="4,35.8011049723757" />
                  <mssgle:LineSegment
                    End="77.3333333333334,35.8011049723757" />
                  <mssgle:CubicBezierSegment
                    Point1="77.3333333333334,35.8011049723757"
                    Point2="81.3333333333334,35.8011049723757"
                    Point3="81.3333333333334,39.8011049723757" />
                  <mssgle:LineSegment
                    End="81.3333333333334,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 5]"
          TopLeft="200.5,765.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 6]"
          TopLeft="200.5,867.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,18.25,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="374,1025"
          Size="374,1068"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination"
          TopLeft="90.5000000000001,313.5" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="277.5,48.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="277.5,1381.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,18.25,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="277.5,151.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="277.5,253.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="277.5,1897.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="Package Development By:  Darlington C. Nwemeh Version 1.1   Version Original Date: 28/03/2018 1:00PM PST&#xA;&#xA;Purpose: Load Future-Product file to the Future-Product table in production based on file availability. &#xA;&#xA;Copyright (c)  2018 Quidel Corporation"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="612,106"
          Id="f4d7a111-4b6b-434b-ab8b-d829d3e70f8f"
          TopLeft="544,33.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="158,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion"
          TopLeft="95.5,107.5" />
        <NodeLayout
          Size="272,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table"
          TopLeft="39.5000000000001,412.5" />
        <NodeLayout
          Size="227,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns"
          TopLeft="61.0000000000001,617.5" />
        <NodeLayout
          Size="221,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products"
          TopLeft="64,5.5" />
        <NodeLayout
          Size="216,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount"
          TopLeft="66.5,209.5" />
        <NodeLayout
          Size="170,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime"
          TopLeft="89.5,311.5" />
        <NodeLayout
          Size="249,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows"
          TopLeft="50.0000000000001,821.5" />
        <NodeLayout
          Size="198,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column"
          TopLeft="75.5000000000001,719.5" />
        <NodeLayout
          Size="338,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table"
          TopLeft="5.50000000000011,923.5" />
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Derived Column Output]"
          TopLeft="174.5,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Data Conversion Output]"
          TopLeft="174.5,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 11]"
          TopLeft="174.5,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 1]"
          TopLeft="174.5,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Output 0]"
          TopLeft="174.5,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Excel Source Output]"
          TopLeft="174.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Derived Column Output1]"
          TopLeft="175,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,59"
              Start="0,0"
              End="0,51.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,51.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="211,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description"
          TopLeft="63,518" />
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[OLE DB Destination Error Output]"
          TopLeft="172,454.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,63.5"
              Start="0,0"
              End="0,56">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,56" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-73.20890625,22.283203125,146.4178125,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Error Description Output]"
          TopLeft="171.5,560">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,57.5"
              Start="0,0"
              End="0,50">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,17,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination SFDC Future_Products Table">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source Future_Products">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>