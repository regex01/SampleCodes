<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/2/2016 9:00:49 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="POLA-20358P"
  DTS:CreatorName="KANSAS\spola"
  DTS:DelayValidation="True"
  DTS:DTSID="{F5323F45-2BE8-4B52-9A66-3A17E196CFF6}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.101"
  DTS:LocaleID="1033"
  DTS:ObjectName="InternalFinanceConstantCurrencyRates"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="428"
  DTS:VersionGUID="{4FC971CA-AC0B-4685-8502-485D83468A74}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DelayValidation="True"
      DTS:DTSID="{5BEAAD0F-0E52-40C2-B9AD-6A6BEAB7454F}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:PropertyExpression
        DTS:Name="ExcelFilePath">@[User::vProcessingFullPathName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLEDB_ETLAudit"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:DelayValidation="True"
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{81B6F07D-0390-4E42-8C34-3FA1CE314748}"
      DTS:ObjectName="BIxPress Log Provider">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{9C5109FD-9688-44FA-A821-00F29850F20F}"
      DTS:ObjectName="pAuditTable">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">ExceptionData</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="20"
      DTS:DTSID="{93FE086B-70C6-4AB5-8663-7F7E0199713F}"
      DTS:ObjectName="pChildPackageID">
      <DTS:Property
        DTS:DataType="20"
        DTS:Name="ParameterValue">-1</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{08F991BA-CAAF-482B-BC0A-93F62D81ADAC}"
      DTS:ObjectName="pConstantCurrencFileArchiveFullPath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">\\kansas.us\qfs\IS\Shared\For Ahmet\testArchieve\ArchievedFiles\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{6C8E7BC3-2644-4648-9F8A-317EDA8A6219}"
      DTS:ObjectName="pConstantCurrencyFilePath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">\\kansas.us\qfs\IS\Shared\For Ahmet\test\SourcePath\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{58AD12CD-9743-4879-9767-C89D6FF3A271}"
      DTS:ObjectName="pFileExtension">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">.xlsx</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{614BE4EB-2B7B-4B3D-92CC-61ADCE5DE66E}"
      DTS:ObjectName="pFilePrefixName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">FinanceConstantCurrencyRates</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{CD4AFD89-B9C8-49B2-B2B2-E0A67A813A1F}"
      DTS:ObjectName="pInitialSourceFileName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">FinanceConstantCurrencyRates</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{1158C9D1-21A2-4361-9767-618C0E1B83C9}"
      DTS:ObjectName="pJobInstanceParentID">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{A3BA97DC-0FBF-4259-B325-CC46FFC30A57}"
      DTS:ObjectName="pSourceTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">r_constant_currency_rates</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{D9E673EC-9F4D-4817-BA45-3F1D61ABD8A9}"
      DTS:ObjectName="pTargetTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">RConstantCurrencyRates</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
      DTS:DTSID="{69817C45-ADB4-4180-925D-19AF8F53F200}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOpsNF_AlertList">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
      DTS:DTSID="{00C6BED8-F245-4C79-AB24-37477EF7FE82}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOpsNF_AlertList_All">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
      DTS:DTSID="{EAC2EDFE-F733-40D9-81AC-3A4115A5535B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOpsNF_From">
      <DTS:VariableValue
        DTS:DataType="8">ETLNotifications@quidel.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
      DTS:DTSID="{756DBCCE-142B-4915-AC36-2A165188A80A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOpsNF_Notification_Counter">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
      DTS:DTSID="{C697C66B-5D60-4ACF-835C-611E1CAFE3AE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOpsNF_OtherConfigSettings">
      <DTS:VariableValue
        DTS:DataType="8">PRIORITY_MODE=DELAYED;EMAIL_FORMAT=HTML;SMTP_UID=;SMTP_PWD=;SMTP_PORT=25;SMTP_USESSL=False;NOTIFY_ONERROR=True;NOTIFY_ONWARNING=False;NOTIFY_ONSUCCESS=False;NOTIFY_ONCOMPLETE=False;SMS_EMAILLIST=8582485354@vzwpix.com;MAX_NOTIFICATIONS=10;ENABLE_TIME_THRESHOLD=False;ENABLE_ROWCOUNT_THRESHOLD=False;SMS_MAXLENGTH=140;FILTERED_ALERTS=;CC_EMAILLIST=;BCC_EMAILLIST=;NOTIFY_USING_EMAIL=True;NOTIFY_USING_SMS=True;NOTIFY_USING_EVENTLOG=False;NOTIFY_USING_LOGFILE=False;LOG_FOLDER_PATH=C:\SSIS\Log;USE_CUSTOM_EMAIL_TEMPLATE=False;CUSTOM_EMAIL_TEMPLATE_FILEPATH=C:\SSIS\Config\NF_EmailTemplate.htm;DELETE_LOG_OLDER_THAN_DAYS=5</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
      DTS:DTSID="{95632674-8279-4AB9-8287-332043D966DA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOpsNF_SMTPServerName">
      <DTS:VariableValue
        DTS:DataType="8">relay.quidel.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
      DTS:DTSID="{801D386A-6F74-47E2-AFAB-E597EA7B28DE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOpsNF_To">
      <DTS:VariableValue
        DTS:DataType="8">BISupport@quidel.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{D8413D02-93C5-4CF6-9EAA-DD679B42466F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_1">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{BE4E505B-3245-4EFF-ADDF-DE6DDD189784}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_2">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{92B3C1FC-FFD5-4CD8-B48A-E81430F901F7}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_3">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. This variable (introduced in v3.2) controls execution of all event handlers for BIxPress Auditing Framework. Set this variable to True or -1 if you want to disable auditing framework related code inside all eventhandlers. You may also have to set Package.LoggingMode=2 along with this variable if you want to disable framework completely."
      DTS:DTSID="{CB7284DB-4280-4744-98A5-D699626B5D64}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_DisableBIxAuditing">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. This variable (introduced in v3.2) controls logging of connection strings (in PreExcute and PostExecute Eventhandlers). Set this variable to True or -1 if you want to disable connectionstring logging."
      DTS:DTSID="{9A46FF1A-F37C-484C-AD65-89B1AFA611DF}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_DisableConnLogging">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. This variable (introduced in v3.2) controls logging of datasource information (e.g. SqlCommand, ConnectionName, TableName etc.)"
      DTS:DTSID="{E0169E4D-EC56-4995-A521-AEE46FD952D1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_DisableDataSrcInfoLogging">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. This variable (introduced in v3.2) controls logging of row count for each attached with source and target information (e.g. SqlCommand, ConnectionName, TableName etc.)"
      DTS:DTSID="{EE55000B-6871-4999-9060-FF8E52FB2190}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_DisableDFTRowCountLogging">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. This variable (introduced in 3.5.3) controls logging of the initial value of non-sensitive parameters.  Set this variable to True or -1 if you want to disable variable logging."
      DTS:DTSID="{CEBCACB1-D906-4E34-9720-FA21250F1482}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_DisableParameterInitialValueLogging">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. This variable (introduced in v3.2) controls logging of variable values (in PreExcute and PostExecute Eventhandlers). Set this variable to True or -1 if you want to disable variable logging."
      DTS:DTSID="{023F64D5-64D2-4344-8435-8C9FFA997772}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_DisableVarLogging">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. Set this variable to list of ConnectionManagers you want to mask ConnectionStrings during logging process inside OnPreExecute Eventhandler. You can use comma separated list you can use wildcard &quot; * &quot; for pattern matching names are case in-sensitive. This option is helpful when you want to hide certain connection strings or file paths from users who are using BIxPress Monitoring Console or Reports. When masking is enabled, &quot;****&quot; is logged in the BIxPress Audit Database rather than actual connectionstring of specified connection managers. Note: You can configure list of variables you want to mask outside the package by configuring &quot;varSSISOps_FilteredConns&quot;. There are 2 places where you have to set this value (OnPreExecute, OnPostExecute)."
      DTS:DTSID="{E25AC659-15EF-4C1D-B781-227F33B6DA53}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_FilteredConns">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{EDD6C6FE-DD41-4DD6-9A86-A78A65CC1E61}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_GroupNames">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. This variable (introduced in 2017.1) controls logging of the initial value of non-sensitive parameters and variables.  Set this variable to a comma separated list of qualified variable names to dictate which variables values will be logged during the package's OnPreExecute event handler."
      DTS:DTSID="{EA706D7E-F165-4C73-AEAC-6F50773CF0C8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_InitialParamsVarsToLog">
      <DTS:VariableValue
        DTS:DataType="8">User::vAuditDateTime,User::vCreateAllIndexSQL,User::vCurJobID,User::vCurJobInstanceID,User::vCurUserID,User::vDeletedRowCount,User::vDeletedTotalRowCount,User::vDeleteXLSXFiles,User::vDropAllIndexSQL,User::vEnvironmentTEXT,User::vFileArchiveFullPath,User::vFileCreatedDate,User::vFileLastModifiedDate,User::vFileList,User::vFileTypeExtension,User::vInsertedRowCount,User::vInsertedTotalFileRowCount,User::vInsertedTotalRowCount,User::vJobInstanceSourceID,User::vLastRecordsProcessedDate,User::vPackageStartDate,User::vProcessedRowCount,User::vProcessingFileCount,User::vProcessingFileName,User::vProcessingFullPathName,User::vRejectedTotalRowCount,User::vSchemaExceptionTable,User::vSchemaTableName,User::vSourceServerDatabase,User::vSQLDeleteDuplicates,User::vSQLGetAuditDateTime,User::vSQLGetLastRecordProcessedDate,User::vSQLIndexStatement,User::vSQLSourceStatement,User::vSQLTruncateTargetTable,User::vSQLUpdateETLAuditColumn,User::vSQLUpdateETLAuditTable,User::vTargetTableCount,User::vUpdatedTotalRowCount,$Package::pAuditTable,$Package::pChildPackageID,$Package::pFileExtension,$Package::pFilePath,$Package::pFilePrefixName,$Package::pInitialSourceFileName,$Package::pJobInstanceParentID,$Package::pSourceTableName,$Package::pTargetTableName</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. An package-level variable used during package execution by the Auditing Framework to determine if a variable value has changed.  If a variable value has changed during the OnPostExecute event for tasks, logic will be executed to log changed variable values that are bound to an expression."
      DTS:DTSID="{D4C3AB0E-A892-4184-82E8-393177A34041}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_IsAnyVariableValueChanged">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. Set this variable to configure how many characters will be logged for each variable. Default variable length for logging is 4000 anything after that will be truncated. -1 = Log full variable value . There are 3 places where you have to set this value (OnPreExecute, OnPostExecute OnVariableValueChanged)."
      DTS:DTSID="{17B02F36-F795-4D7A-95E2-7565016233BB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varSSISOps_MaxVarCharsToLog">
      <DTS:VariableValue
        DTS:DataType="3">4000</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5AD6E8D8-1FF9-4804-946D-049D5D8B9D0A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vAuditDateTime"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="7">12:00:00 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{53DC614A-41F2-422B-A13D-957B344F9B97}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vCreateAllIndexSQL"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3ED4E671-2AB2-4452-AC64-9D7052E6E993}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vCurJobID"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2C0863FB-93D6-4F9D-807E-2142C09DAC9F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vCurJobInstanceID"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{00DDCEDE-5831-43D6-A62F-94FA1A0E4AEB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vCurUserID"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6D10A664-00F0-4103-B137-285A9A241E86}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vDeletedRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{53E28987-1262-4D2A-B4AF-23CF3E8C6986}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vDeletedTotalRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{ABD7B214-B4D0-4C15-AA06-D2F7C4E5FC6B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vDeleteXLSXFiles"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AC864FF2-C954-41FA-AFC4-567094338522}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vDropAllIndexSQL"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7BDB0136-BD67-4B1D-B4CF-BAFF5EAC27FF}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vEnvironmentTEXT"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1374D87F-B5A9-4C9A-9BD5-F6CE3529467B}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Package::pConstantCurrencFileArchiveFullPath]+REVERSE(SUBSTRING(REVERSE( @[User::vProcessingFileName] ),FINDSTRING(REVERSE(@[User::vProcessingFileName] ),&quot;.&quot;,1)+1,LEN(@[User::vProcessingFileName])- FINDSTRING(REVERSE(@[User::vProcessingFileName] ),&quot;.&quot;,1)))&#xA;+&quot;_&quot;+ Right(&quot;0&quot; +(DT_STR,4,1252) datepart(&quot;yyyy&quot;, getdate()),2)  &#xA;+ Right(&quot;0&quot; +(DT_STR,2,1252) datepart(&quot;mm&quot;, getdate()) ,2)&#xA;+ Right(&quot;0&quot; +(DT_STR,2,1252) datepart(&quot;dd&quot;, getdate()),2)+&quot;_&quot;+Right(&quot;0&quot; + (DT_STR,2,1252) DatePart(&quot;hh&quot;,getdate()),2) &#xA;+ Right(&quot;0&quot; + (DT_STR,2,1252) DatePart(&quot;mi&quot;,getdate()),2) &#xA;+ Right(&quot;0&quot; + (DT_STR,4,1252) DatePart(&quot;ss&quot;,getdate()),2)+REVERSE(SUBSTRING(REVERSE( @[User::vProcessingFileName] ),1,FINDSTRING(REVERSE(@[User::vProcessingFileName] ),&quot;.&quot;,1)))"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vFileArchiveFullPath">
      <DTS:VariableValue
        DTS:DataType="8">\\kansas.us\qfs\IS\Shared\For Ahmet\testArchieve\ArchievedFiles\FinanceConstantCurrencyRates_180716_122813</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3A3139A1-9255-4AF2-BAD0-EDA65D1C5349}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFileCreatedDate"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="7">11/2/2016 1:38:00 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9B5D4EC6-12CA-46E5-9197-176CDBE3A0B0}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFileLastModifiedDate"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="7">11/2/2016 1:39:00 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{127A1EBA-7BBA-41EB-BF05-B37F20C731C2}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFileList"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C382153F-8615-45DB-BB08-158C22564554}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vFileTypeExtension"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8">.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D4B50053-B20D-4B85-8922-94B086C6922E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vInsertedRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1B6E701A-C2E3-4BC7-8D12-9B670FEC0F9E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vInsertedTotalFileRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{79C56137-4FC7-4716-A720-B61F0EE086B1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vInsertedTotalRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1C56B253-E3DD-40E0-BFC6-4C33594855EB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vJobInstanceSourceID"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{44DB6B86-C49C-40D2-B142-C47E3DF704F3}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vLastRecordsProcessedDate"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="7">11/2/2016 1:42:00 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{80F971E3-3B23-4241-9335-CF341F910211}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="(DT_STR, 4, 1252) DATEPART(&quot;yyyy&quot;, @[System::StartTime]) + &quot;-&quot; +&#xA;&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;mm&quot;, @[System::StartTime]), 2) + &quot;-&quot; +&#xA;&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;dd&quot;, @[System::StartTime]), 2) + &quot; &quot; +&#xA;&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;hh&quot;, @[System::StartTime]), 2) + &quot;:&quot; +&#xA;&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;mi&quot;, @[System::StartTime]), 2) + &quot;:&quot; +&#xA;RIGHT(&quot;00&quot; + (DT_STR, 2, 1252) DATEPART(&quot;ss&quot;, @[System::StartTime]), 2) + &quot;.&quot; +&#xA;RIGHT(&quot;000&quot; + (DT_STR, 3, 1252) DATEPART(&quot;ms&quot;, @[System::StartTime]), 3)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vPackageStartDate">
      <DTS:VariableValue
        DTS:DataType="8">2018-07-16 11:49:51.000</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C765D84A-A16F-4539-A01C-29AC5C0A9F03}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vProcessedRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E1BE1EE8-3F5E-449A-810E-DB7CEF6095DB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vProcessingFileCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F4C46ADB-9593-41DC-A38B-4D2F2D921285}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vProcessingFileName"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8">FinanceConstantCurrencyRates</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{76C5C61B-49B7-4E33-84A3-E1E0FD4B81AE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vProcessingFullPathName"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2C1C373F-FC8F-4260-B606-68A287A25BAA}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vRejectedTotalRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{113EB0FE-6B27-4377-8C55-A5E600BE6115}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;[&quot;+@[$Project::pAuditShema]+&quot;]&quot;+&quot;.&quot;+ &quot;[&quot;+ @[$Package::pAuditTable] +&quot;]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSchemaExceptionTable">
      <DTS:VariableValue
        DTS:DataType="8">[Audit].[ExceptionData]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C7CAD015-0157-4065-85DE-6C35B68F1A30}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;[&quot;+@[$Project::pTargetSchema]+&quot;]&quot;  + &quot;.&quot; + &quot;[&quot;+@[$Package::pTargetTableName]+&quot;]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSchemaTableName">
      <DTS:VariableValue
        DTS:DataType="8">[Stage].[RConstantCurrencyRates]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B14D10A2-A9E8-4A67-B10F-F08B2986C955}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::pSourceDatabase]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSourceServerDatabase">
      <DTS:VariableValue
        DTS:DataType="8">EDW_STAGE</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B1DF6FC8-2F11-4780-AA12-E8C8BACCCE82}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;WITH CTE AS(  SELECT  RN = ROW_NUMBER()OVER(PARTITION BY  constantcurrency ORDER BY constantcurrency )  FROM &quot; + @[User::vSchemaTableName] + &quot;) DELETE FROM CTE WHERE RN &gt;1&#xA;&#xA;SELECT @@ROWCOUNT AS DeletedRows&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLDeleteDuplicates">
      <DTS:VariableValue
        DTS:DataType="8">WITH CTE AS(  SELECT  RN = ROW_NUMBER()OVER(PARTITION BY  constantcurrency ORDER BY constantcurrency )  FROM [Stage].[RConstantCurrencyRates]) DELETE FROM CTE WHERE RN &gt;1

SELECT @@ROWCOUNT AS DeletedRows</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{61AC37DA-29DA-4E21-8DA3-DE9309903771}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;SELECT ? = Convert(DateTime2, sysdatetime(),121)&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLGetAuditDateTime">
      <DTS:VariableValue
        DTS:DataType="8">SELECT ? = Convert(DateTime2, sysdatetime(),121)</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{50736A40-B886-447D-A306-7193347B6ADF}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DECLARE @LastRecordsProcessedDate DATETIME&#xA;&#xA;SELECT @LastRecordsProcessedDate = ISNULL(LastRecordsProcessedDate, '1900-01-01')&#xA; FROM Audit.Job&#xA;WHERE JobID = ?&#xA;&#xA;SELECT @LastRecordsProcessedDate AS [LastRecordsProcessedDate]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLGetLastRecordProcessedDate">
      <DTS:VariableValue
        DTS:DataType="8">DECLARE @LastRecordsProcessedDate DATETIME

SELECT @LastRecordsProcessedDate = ISNULL(LastRecordsProcessedDate, '1900-01-01')
 FROM Audit.Job
WHERE JobID = ?

SELECT @LastRecordsProcessedDate AS [LastRecordsProcessedDate]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{64A5F539-6721-47C9-8425-59EA8A1B2D2A}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DECLARE&#xA;@IncludeFileGroup bit = 1,&#xA;@IncludeDrop bit = 1,&#xA;@IncludeFillFactor bit = 0&#xA;&#xA;DECLARE @sTableName VARCHAR(150) = ?&#xA;DECLARE @sIndexDesc varchar(MAX)&#xA;DECLARE @sCreateSql varchar(MAX)&#xA;DECLARE @sDropSql varchar(MAX)&#xA;DECLARE @sCreateAllSql varchar(MAX) = ''&#xA;DECLARE @sDropAllSql varchar(MAX) = ''&#xA;&#xA;--- Get all existing indexes, but NOT the primary keys&#xA;DECLARE Indexes_cursor CURSOR&#xA;FOR SELECT&#xA;SC.Name AS SchemaName&#xA;, SO.Name AS TableName&#xA;, SI.Object_Id AS TableId&#xA;, SI.[Name] AS IndexName&#xA;, SI.Index_ID AS IndexId&#xA;, SI.type_desc AS IndexType&#xA;, FG.[Name] AS FileGroupName&#xA;, CASE WHEN SI.Fill_Factor = 0 THEN 100 ELSE SI.Fill_Factor END Fill_Factor&#xA;,SI.is_primary_key&#xA;,SI.is_unique&#xA;FROM sys.indexes SI&#xA;LEFT JOIN sys.filegroups FG&#xA;ON SI.data_space_id = FG.data_space_id&#xA;INNER JOIN sys.objects SO&#xA;ON SI.object_id = SO.object_id&#xA;INNER JOIN sys.schemas SC&#xA;ON SC.schema_id = SO.schema_id&#xA;WHERE ObjectProperty(SI.Object_Id, 'IsUserTable') = 1&#xA;AND SI.[Name] IS NOT NULL&#xA;--AND SI.is_primary_key = 0&#xA;AND SI.is_unique_constraint = 0&#xA;AND IndexProperty(SI.Object_Id, SI.[Name], 'IsStatistics') = 0&#xA;AND SC.name + '.' + SO.name = @sTableName&#xA;ORDER BY Object_name(SI.Object_Id), SI.Index_ID&#xA;&#xA;DECLARE @SchemaName sysname&#xA;DECLARE @TableName sysname&#xA;DECLARE @TableId int&#xA;DECLARE @IndexType SYSNAME&#xA;DECLARE @IndexName sysname&#xA;DECLARE @FileGroupName sysname&#xA;DECLARE @IndexId int&#xA;DECLARE @FillFactor int&#xA;DECLARE @IsPrimaryKey BIT&#xA;DECLARE @IsUnique BIT&#xA;&#xA;DECLARE @NewLine varchar(4000) SET @NewLine = CHAR(13) + CHAR(10)&#xA;DECLARE @Tab varchar(4000) SET @Tab = Space(4)&#xA;&#xA;-- Loop through all indexes&#xA;OPEN Indexes_cursor&#xA;&#xA;FETCH NEXT&#xA;FROM Indexes_cursor&#xA;INTO @SchemaName, @TableName, @TableId, @IndexName,&#xA;@IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique&#xA;&#xA;WHILE (@@Fetch_Status = 0)&#xA;BEGIN&#xA;&#xA;IF (@IsPrimaryKey = 0)&#xA;BEGIN&#xA;  SET @sIndexDesc = '-- Index ' + @IndexName + ' on table ' + @TableName&#xA;  SET @sDropSql = 'IF EXISTS (SELECT 1' + @NewLine&#xA;  + ' FROM sysindexes si' + @NewLine&#xA;  + ' INNER JOIN sysobjects so' + @NewLine&#xA;  + ' ON so.id = si.id' + @NewLine&#xA;  + ' WHERE si.[Name] = ''' + @IndexName + ''' -- Index Name' + @NewLine&#xA;  + ' AND so.[Name] = ''' + @TableName + ''') -- Table Name' + @NewLine&#xA;  + 'BEGIN' + @NewLine&#xA;  + ' DROP INDEX [' + @IndexName + '] ON'&#xA;  + '[' + @SchemaName + '].[' + @TableName + ']' + @NewLine&#xA;  + 'END' + @NewLine&#xA;&#xA;  SET @sCreateSql = 'CREATE'&#xA;&#xA;  -- Check if the index is unique&#xA;  IF (@IsUnique = 1)&#xA;  BEGIN&#xA;  SET @sCreateSql = @sCreateSql + ' UNIQUE'&#xA;  END&#xA;&#xA;  -- Check if the index is clustered&#xA;  IF (@IndexType = 'CLUSTERED')&#xA;  BEGIN&#xA;  SET @sCreateSql = @sCreateSql + ' CLUSTERED'&#xA;  END&#xA;&#xA;&#xA;  SET @sCreateSql = @sCreateSql + ' INDEX [' + @IndexName + ']&#xA;  ON [' + @SchemaName + '].[' + @TableName + ']' + @NewLine + '(' + @NewLine&#xA;END&#xA;&#xA;ELSE&#xA;BEGIN&#xA;       SET @sDropSql = 'ALTER TABLE ' + @SchemaName + '.'+ @TableName + ' DROP CONSTRAINT ' + @IndexName&#xA;&#xA;       SET @sCreateSql = ''&#xA;       SET @sCreateSql = @sCreateSql + 'ALTER TABLE ' + @SchemaName + '.' + @TableName +  + ' ADD CONSTRAINT ' + @IndexName + ' PRIMARY KEY '&#xA;&#xA;       IF (@IndexType = 'NONCLUSTERED')&#xA;       BEGIN&#xA;       SET @sCreateSql = @sCreateSql + ' NONCLUSTERED'&#xA;       END&#xA;&#xA;       SET @sCreateSql = @sCreateSql + '(' &#xA;END&#xA;&#xA;  -- Get all columns of the index&#xA;  DECLARE IndexColumns_cursor CURSOR&#xA;  FOR SELECT SC.[Name],&#xA;  IC.[is_included_column],&#xA;  IC.is_descending_key&#xA;  FROM sys.index_columns IC&#xA;  INNER JOIN sys.columns SC&#xA;  ON IC.Object_Id = SC.Object_Id&#xA;  AND IC.Column_ID = SC.Column_ID&#xA;  WHERE IC.Object_Id = @TableId&#xA;  AND Index_ID = @IndexId&#xA;  ORDER BY IC.key_ordinal&#xA;&#xA;  DECLARE @IxColumn sysname&#xA;  DECLARE @IxIncl bit&#xA;  DECLARE @Desc bit&#xA;  DECLARE @IxIsIncl bit SET @IxIsIncl = 0&#xA;  DECLARE @IxFirstColumn bit SET @IxFirstColumn = 1&#xA;&#xA;  -- Loop through all columns of the index and append them to the CREATE statement&#xA;  OPEN IndexColumns_cursor&#xA;   FETCH NEXT&#xA;   FROM IndexColumns_cursor&#xA;   INTO @IxColumn, @IxIncl, @Desc&#xA;&#xA;  WHILE (@@Fetch_Status = 0)&#xA;  BEGIN&#xA;   IF (@IxFirstColumn = 1)&#xA;   BEGIN&#xA;    SET @IxFirstColumn = 0&#xA;   END&#xA;   ELSE&#xA;   BEGIN&#xA;    --check to see if it's an included column&#xA;    IF (@IxIsIncl = 0) AND (@IxIncl = 1)&#xA;    BEGIN&#xA;     SET @IxIsIncl = 1&#xA;     SET @sCreateSql = @sCreateSql + @NewLine + ')' +&#xA;      @NewLine + 'INCLUDE' + @NewLine + '(' + @NewLine&#xA;    END&#xA;    ELSE&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ',' + @NewLine&#xA;    END&#xA;    --END IF&#xA;   END&#xA;  --END IF&#xA;&#xA;   SET @sCreateSql = @sCreateSql + @Tab + '[' + @IxColumn + ']'&#xA;   -- check if ASC or DESC&#xA;   IF @IxIsIncl = 0&#xA;   BEGIN&#xA;    IF @Desc = 1&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ' DESC'&#xA;    END&#xA;    ELSE&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ' ASC'&#xA;    END&#xA;    --END IF&#xA;   END&#xA;   --END IF&#xA;   FETCH NEXT&#xA;   FROM IndexColumns_cursor&#xA;   INTO @IxColumn, @IxIncl, @Desc&#xA;  END&#xA;  --END WHILE&#xA;&#xA;  CLOSE IndexColumns_cursor&#xA;  DEALLOCATE IndexColumns_cursor&#xA;&#xA;  SET @sCreateSql = @sCreateSql + @NewLine + ') '&#xA;&#xA;  IF @IncludeFillFactor = 1&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + @NewLine +&#xA;   'WITH (FillFactor = ' + Cast(@FillFactor as varchar(13)) + ')' + @NewLine&#xA;  END&#xA;  --END IF&#xA;&#xA;  IF @IncludeFileGroup = 1&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + 'ON ['+ @FileGroupName + ']' + @NewLine&#xA;  END&#xA;  ELSE&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + @NewLine&#xA;  END&#xA;  --END IF&#xA;&#xA;  SET @sCreateAllSql = @sCreateAllSql + '&#xA;'&#xA;&#xA;  SET @sDropAllSql = @sDropAllSql + '&#xA;'&#xA;&#xA;  IF @IncludeDrop = 1&#xA;  BEGIN&#xA;   SET @sDropAllSql = @sDropAllSql + @sDropSql + '&#xA;'&#xA;  END&#xA;&#xA;  SET @sCreateAllSql = @sCreateAllSql + @sCreateSql + '&#xA;'&#xA;&#xA;  FETCH NEXT&#xA;   FROM Indexes_cursor&#xA;   INTO @SchemaName, @TableName, @TableId, @IndexName,&#xA;   @IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique&#xA;END&#xA;--END WHILE&#xA;CLOSE Indexes_cursor&#xA;DEALLOCATE Indexes_cursor&#xA;&#xA;SELECT ? = @sDropAllSql&#xA;SELECT ? = @sCreateAllSql&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLIndexStatement">
      <DTS:VariableValue
        DTS:DataType="8">DECLARE
@IncludeFileGroup bit = 1,
@IncludeDrop bit = 1,
@IncludeFillFactor bit = 0

DECLARE @sTableName VARCHAR(150) = ?
DECLARE @sIndexDesc varchar(MAX)
DECLARE @sCreateSql varchar(MAX)
DECLARE @sDropSql varchar(MAX)
DECLARE @sCreateAllSql varchar(MAX) = ''
DECLARE @sDropAllSql varchar(MAX) = ''

--- Get all existing indexes, but NOT the primary keys
DECLARE Indexes_cursor CURSOR
FOR SELECT
SC.Name AS SchemaName
, SO.Name AS TableName
, SI.Object_Id AS TableId
, SI.[Name] AS IndexName
, SI.Index_ID AS IndexId
, SI.type_desc AS IndexType
, FG.[Name] AS FileGroupName
, CASE WHEN SI.Fill_Factor = 0 THEN 100 ELSE SI.Fill_Factor END Fill_Factor
,SI.is_primary_key
,SI.is_unique
FROM sys.indexes SI
LEFT JOIN sys.filegroups FG
ON SI.data_space_id = FG.data_space_id
INNER JOIN sys.objects SO
ON SI.object_id = SO.object_id
INNER JOIN sys.schemas SC
ON SC.schema_id = SO.schema_id
WHERE ObjectProperty(SI.Object_Id, 'IsUserTable') = 1
AND SI.[Name] IS NOT NULL
--AND SI.is_primary_key = 0
AND SI.is_unique_constraint = 0
AND IndexProperty(SI.Object_Id, SI.[Name], 'IsStatistics') = 0
AND SC.name + '.' + SO.name = @sTableName
ORDER BY Object_name(SI.Object_Id), SI.Index_ID

DECLARE @SchemaName sysname
DECLARE @TableName sysname
DECLARE @TableId int
DECLARE @IndexType SYSNAME
DECLARE @IndexName sysname
DECLARE @FileGroupName sysname
DECLARE @IndexId int
DECLARE @FillFactor int
DECLARE @IsPrimaryKey BIT
DECLARE @IsUnique BIT

DECLARE @NewLine varchar(4000) SET @NewLine = CHAR(13) + CHAR(10)
DECLARE @Tab varchar(4000) SET @Tab = Space(4)

-- Loop through all indexes
OPEN Indexes_cursor

FETCH NEXT
FROM Indexes_cursor
INTO @SchemaName, @TableName, @TableId, @IndexName,
@IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique

WHILE (@@Fetch_Status = 0)
BEGIN

IF (@IsPrimaryKey = 0)
BEGIN
  SET @sIndexDesc = '-- Index ' + @IndexName + ' on table ' + @TableName
  SET @sDropSql = 'IF EXISTS (SELECT 1' + @NewLine
  + ' FROM sysindexes si' + @NewLine
  + ' INNER JOIN sysobjects so' + @NewLine
  + ' ON so.id = si.id' + @NewLine
  + ' WHERE si.[Name] = ''' + @IndexName + ''' -- Index Name' + @NewLine
  + ' AND so.[Name] = ''' + @TableName + ''') -- Table Name' + @NewLine
  + 'BEGIN' + @NewLine
  + ' DROP INDEX [' + @IndexName + '] ON'
  + '[' + @SchemaName + '].[' + @TableName + ']' + @NewLine
  + 'END' + @NewLine

  SET @sCreateSql = 'CREATE'

  -- Check if the index is unique
  IF (@IsUnique = 1)
  BEGIN
  SET @sCreateSql = @sCreateSql + ' UNIQUE'
  END

  -- Check if the index is clustered
  IF (@IndexType = 'CLUSTERED')
  BEGIN
  SET @sCreateSql = @sCreateSql + ' CLUSTERED'
  END


  SET @sCreateSql = @sCreateSql + ' INDEX [' + @IndexName + ']
  ON [' + @SchemaName + '].[' + @TableName + ']' + @NewLine + '(' + @NewLine
END

ELSE
BEGIN
       SET @sDropSql = 'ALTER TABLE ' + @SchemaName + '.'+ @TableName + ' DROP CONSTRAINT ' + @IndexName

       SET @sCreateSql = ''
       SET @sCreateSql = @sCreateSql + 'ALTER TABLE ' + @SchemaName + '.' + @TableName +  + ' ADD CONSTRAINT ' + @IndexName + ' PRIMARY KEY '

       IF (@IndexType = 'NONCLUSTERED')
       BEGIN
       SET @sCreateSql = @sCreateSql + ' NONCLUSTERED'
       END

       SET @sCreateSql = @sCreateSql + '(' 
END

  -- Get all columns of the index
  DECLARE IndexColumns_cursor CURSOR
  FOR SELECT SC.[Name],
  IC.[is_included_column],
  IC.is_descending_key
  FROM sys.index_columns IC
  INNER JOIN sys.columns SC
  ON IC.Object_Id = SC.Object_Id
  AND IC.Column_ID = SC.Column_ID
  WHERE IC.Object_Id = @TableId
  AND Index_ID = @IndexId
  ORDER BY IC.key_ordinal

  DECLARE @IxColumn sysname
  DECLARE @IxIncl bit
  DECLARE @Desc bit
  DECLARE @IxIsIncl bit SET @IxIsIncl = 0
  DECLARE @IxFirstColumn bit SET @IxFirstColumn = 1

  -- Loop through all columns of the index and append them to the CREATE statement
  OPEN IndexColumns_cursor
   FETCH NEXT
   FROM IndexColumns_cursor
   INTO @IxColumn, @IxIncl, @Desc

  WHILE (@@Fetch_Status = 0)
  BEGIN
   IF (@IxFirstColumn = 1)
   BEGIN
    SET @IxFirstColumn = 0
   END
   ELSE
   BEGIN
    --check to see if it's an included column
    IF (@IxIsIncl = 0) AND (@IxIncl = 1)
    BEGIN
     SET @IxIsIncl = 1
     SET @sCreateSql = @sCreateSql + @NewLine + ')' +
      @NewLine + 'INCLUDE' + @NewLine + '(' + @NewLine
    END
    ELSE
    BEGIN
     SET @sCreateSql = @sCreateSql + ',' + @NewLine
    END
    --END IF
   END
  --END IF

   SET @sCreateSql = @sCreateSql + @Tab + '[' + @IxColumn + ']'
   -- check if ASC or DESC
   IF @IxIsIncl = 0
   BEGIN
    IF @Desc = 1
    BEGIN
     SET @sCreateSql = @sCreateSql + ' DESC'
    END
    ELSE
    BEGIN
     SET @sCreateSql = @sCreateSql + ' ASC'
    END
    --END IF
   END
   --END IF
   FETCH NEXT
   FROM IndexColumns_cursor
   INTO @IxColumn, @IxIncl, @Desc
  END
  --END WHILE

  CLOSE IndexColumns_cursor
  DEALLOCATE IndexColumns_cursor

  SET @sCreateSql = @sCreateSql + @NewLine + ') '

  IF @IncludeFillFactor = 1
  BEGIN
   SET @sCreateSql = @sCreateSql + @NewLine +
   'WITH (FillFactor = ' + Cast(@FillFactor as varchar(13)) + ')' + @NewLine
  END
  --END IF

  IF @IncludeFileGroup = 1
  BEGIN
   SET @sCreateSql = @sCreateSql + 'ON ['+ @FileGroupName + ']' + @NewLine
  END
  ELSE
  BEGIN
   SET @sCreateSql = @sCreateSql + @NewLine
  END
  --END IF

  SET @sCreateAllSql = @sCreateAllSql + '
'

  SET @sDropAllSql = @sDropAllSql + '
'

  IF @IncludeDrop = 1
  BEGIN
   SET @sDropAllSql = @sDropAllSql + @sDropSql + '
'
  END

  SET @sCreateAllSql = @sCreateAllSql + @sCreateSql + '
'

  FETCH NEXT
   FROM Indexes_cursor
   INTO @SchemaName, @TableName, @TableId, @IndexName,
   @IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique
END
--END WHILE
CLOSE Indexes_cursor
DEALLOCATE Indexes_cursor

SELECT ? = @sDropAllSql
SELECT ? = @sCreateAllSql</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6A057559-4854-4CFC-8E88-D26301E38DC2}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;SELECT [Product_ID]&#xA;      ,[Product_Desc]&#xA;      ,[Product_Line_ID]&#xA;      ,[Product_Line_Desc]&#xA;      ,[Product_Class_ID]&#xA;      ,[Product_Class_Desc]&#xA;      ,[Product_Type_ID]&#xA;      ,[Product_Type_Desc]&#xA;      ,[Product_ItemGroup]&#xA;      ,[Product_Unit]&#xA;      ,[Product_DHI_Flag]&#xA;      ,[Product_Item_Type]&#xA;      ,[Product_Kit_Size]&#xA;      ,[Total Unit Cost]&#xA;      ,[LN_Product_Flag]&#xA;      ,[LoadTimeStamp]&#xA;  FROM [dbo].[FutureProducts_Staging]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLSourceStatement">
      <DTS:VariableValue
        DTS:DataType="8">SELECT [Product_ID]
      ,[Product_Desc]
      ,[Product_Line_ID]
      ,[Product_Line_Desc]
      ,[Product_Class_ID]
      ,[Product_Class_Desc]
      ,[Product_Type_ID]
      ,[Product_Type_Desc]
      ,[Product_ItemGroup]
      ,[Product_Unit]
      ,[Product_DHI_Flag]
      ,[Product_Item_Type]
      ,[Product_Kit_Size]
      ,[Total Unit Cost]
      ,[LN_Product_Flag]
      ,[LoadTimeStamp]
  FROM [dbo].[FutureProducts_Staging]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{04311D58-09E0-4656-8429-F9E79838932B}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;TRUNCATE TABLE&quot; +&quot; &quot;+ @[User::vSchemaTableName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLTruncateTargetTable">
      <DTS:VariableValue
        DTS:DataType="8">TRUNCATE TABLE [Stage].[RConstantCurrencyRates]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{87805A4D-2460-444D-B791-C2DC57D5E856}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLUpdateETLAuditColumn"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="8">LoadTimeStamp</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{46970DAE-C89D-46F8-BA1B-ED662716C4B7}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DECLARE @LastRecordsProcessedOnDate DATETIME&#xA;DECLARE @InsertTotalRowCounts INT&#xA;DECLARE @UpdatedTotalRowCounts INT&#xA;DECLARE @TotalRows INT&#xA;&#xA;SET @InsertTotalRowCounts = ?&#xA;SET @UpdatedTotalRowCounts = ?&#xA;SET @TotalRows = @InsertTotalRowCounts + @UpdatedTotalRowCounts&#xA;&#xA;SELECT @LastRecordsProcessedOnDate = ( SELECT  DATEADD(dd, -1, MAX(&quot;+ @[User::vSQLUpdateETLAuditColumn] +&quot;))&#xA;FROM  &quot;+@[$Project::pTargetDatabase]+&quot;.&quot; +@[User::vSchemaTableName]+&quot;&#xA;WHERE&quot;+&quot; &quot;+@[User::vSQLUpdateETLAuditColumn] + &quot;&lt; GETDATE())&#xA;&#xA;IF @TotalRows &gt; 0&#xA;&#xA;BEGIN&#xA;&#xA;  UPDATE [Audit].[Job] &#xA;  SET  LastRunStartDate = ?,&#xA;  LastRunEndDate = GETDATE(), &#xA;  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),&#xA;  JobLastStatus = 'Pass',&#xA;  LastRecordsProcessedDate = @LastRecordsProcessedOnDate&#xA; WHERE JobID = ?&#xA;&#xA;END&#xA;ELSE&#xA;BEGIN &#xA;&#xA;  UPDATE [Audit].[Job] &#xA;  SET  LastRunStartDate = ?,&#xA;  LastRunEndDate = GETDATE(), &#xA;  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),&#xA;  JobLastStatus = 'Pass'&#xA;  WHERE JobID = ?&#xA;&#xA;&#xA;END&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vSQLUpdateETLAuditTable">
      <DTS:VariableValue
        DTS:DataType="8">DECLARE @LastRecordsProcessedOnDate DATETIME
DECLARE @InsertTotalRowCounts INT
DECLARE @UpdatedTotalRowCounts INT
DECLARE @TotalRows INT

SET @InsertTotalRowCounts = ?
SET @UpdatedTotalRowCounts = ?
SET @TotalRows = @InsertTotalRowCounts + @UpdatedTotalRowCounts

SELECT @LastRecordsProcessedOnDate = ( SELECT  DATEADD(dd, -1, MAX(LoadTimeStamp))
FROM  EDW_STAGE.[Stage].[RConstantCurrencyRates]
WHERE LoadTimeStamp&lt; GETDATE())

IF @TotalRows &gt; 0

BEGIN

  UPDATE [Audit].[Job] 
  SET  LastRunStartDate = ?,
  LastRunEndDate = GETDATE(), 
  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),
  JobLastStatus = 'Pass',
  LastRecordsProcessedDate = @LastRecordsProcessedOnDate
 WHERE JobID = ?

END
ELSE
BEGIN 

  UPDATE [Audit].[Job] 
  SET  LastRunStartDate = ?,
  LastRunEndDate = GETDATE(), 
  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),
  JobLastStatus = 'Pass'
  WHERE JobID = ?


END</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{957F2DFC-7A57-4059-83B8-471056496C33}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vTargetTableCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C5977217-4826-47F0-B812-F3D96F84BC58}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vUpdatedTotalRowCount"
      DTS:RaiseChangedEvent="True">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">7,22,PipelineInitialization,18,OnPipelineRowsSent,24,OnPipelinePrePrimeOutput,25,OnPipelinePostPrimeOutput,24,OnPipelinePreEndOfRowset,25,OnPipelinePostEndOfRowset,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelinePostEndOfRowset"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelinePostPrimeOutput"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelinePreEndOfRowset"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelinePrePrimeOutput"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPipelineRowsSent"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="PipelineInitialization"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">0</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">0</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">0</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{81B6F07D-0390-4E42-8C34-3FA1CE314748}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{74FDF068-771D-42F3-9B09-6305D0B026CF}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{CAC0E5BE-0B3D-4666-9289-DB9BD7B8188D}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Delete XLSX File after Processing into the Database">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.ForEachFileEnumerator"
            DTS:DTSID="{F472B95C-D6C8-464E-A78E-38F4AAF90EB0}"
            DTS:ObjectName="{D07F0850-C28A-4379-B65F-70790FE204D0}">
            <DTS:PropertyExpression
              DTS:Name="Directory">@[$Package::pConstantCurrencyFilePath]</DTS:PropertyExpression>
            <DTS:PropertyExpression
              DTS:Name="FileSpec">@[User::vProcessingFileName] + ( @[$Package::pFileExtension] == "" ? ".*" : @[$Package::pFileExtension] )</DTS:PropertyExpression>
            <DTS:ObjectData>
              <ForEachFileEnumeratorProperties>
                <FEFEProperty
                  Folder="\\kansas.us\qfs\IS\Shared\For Ahmet\test\SourcePath\" />
                <FEFEProperty
                  FileSpec="FinanceConstantCurrencyRates.xlsx" />
                <FEFEProperty
                  FileNameRetrievalType="1" />
                <FEFEProperty
                  Recurse="0" />
              </ForEachFileEnumeratorProperties>
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database\Delete ConstantCurrentRates File"
              DTS:CreationName="Microsoft.FileSystemTask"
              DTS:DelayValidation="True"
              DTS:Description="File System Task"
              DTS:DTSID="{8FFF6462-2511-45C1-B1AB-0632F097DDD6}"
              DTS:ExecutableType="Microsoft.FileSystemTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete ConstantCurrentRates File"
              DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <FileSystemData
                  TaskOperationType="DeleteFile"
                  TaskSourcePath="User::vDeleteXLSXFiles"
                  TaskIsSourceVariable="True"
                  TaskDestinationPath="User::vDeleteXLSXFiles"
                  TaskIsDestinationVariable="True" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{D55B7B6F-41E4-4C2B-BC13-76C6199EB987}"
              DTS:ObjectName="{D55B7B6F-41E4-4C2B-BC13-76C6199EB987}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::vDeleteXLSXFiles" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{4ADA1838-3381-4923-9C83-69790716016A}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Loop Through Directory and Get Matching File for Archiving">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.ForEachADOEnumerator"
            DTS:DTSID="{90F1C8D0-758B-4AE9-833F-F54A1FC15871}"
            DTS:ObjectName="{90F1C8D0-758B-4AE9-833F-F54A1FC15871}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::vFileList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving\Rename  &quot;ConstantCurrentRates file&quot;"
              DTS:CreationName="Microsoft.FileSystemTask"
              DTS:DelayValidation="True"
              DTS:Description="File System Task"
              DTS:DTSID="{C7A562E6-454F-4F2C-9099-8AB9F55CDD4A}"
              DTS:ExecutableType="Microsoft.FileSystemTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Rename  &quot;ConstantCurrentRates file&quot;"
              DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <FileSystemData
                  TaskOperationType="RenameFile"
                  TaskOverwriteDestFile="True"
                  TaskSourcePath="User::vProcessingFullPathName"
                  TaskIsSourceVariable="True"
                  TaskDestinationPath="User::vFileArchiveFullPath"
                  TaskIsDestinationVariable="True" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{49AEC978-7F8D-488F-BE8D-F2EBB9E903AD}"
              DTS:ObjectName="{49AEC978-7F8D-488F-BE8D-F2EBB9E903AD}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::vProcessingFileName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{D9BCAB15-D28E-48FA-85D4-1D6202C3BFEB}"
              DTS:ObjectName="{D9BCAB15-D28E-48FA-85D4-1D6202C3BFEB}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::vProcessingFullPathName" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{456AF6F0-3478-49AF-9328-0A2D9C6DBF63}"
          DTS:From="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Completion (Audit)"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{EE8CB01E-BF86-4DFE-8F93-D6937945C656}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Completion (Audit)">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Completion (Audit)\Mark Job As Complete in Job"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{C9E0888F-D7C5-40C8-A502-62B375975ADC}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Mark Job As Complete in Job"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">@[User::vSQLUpdateETLAuditTable]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{82DB7E38-7209-42AA-B67A-E022799DCA59}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStatementSource="DECLARE @LastRecordsProcessedOnDate DATETIME&#xA;DECLARE @InsertTotalRowCounts INT&#xA;DECLARE @UpdatedTotalRowCounts INT&#xA;DECLARE @TotalRows INT&#xA;&#xA;SET @InsertTotalRowCounts = ?&#xA;SET @UpdatedTotalRowCounts = ?&#xA;SET @TotalRows = @InsertTotalRowCounts + @UpdatedTotalRowCounts&#xA;&#xA;SELECT @LastRecordsProcessedOnDate = ( SELECT  DATEADD(dd, -1, MAX(LoadTimeStamp))&#xA;FROM  EDW_STAGE.[Stage].[RConstantCurrencyRates]&#xA;WHERE LoadTimeStamp&lt; GETDATE())&#xA;&#xA;IF @TotalRows &gt; 0&#xA;&#xA;BEGIN&#xA;&#xA;  UPDATE [Audit].[Job] &#xA;  SET  LastRunStartDate = ?,&#xA;  LastRunEndDate = GETDATE(), &#xA;  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),&#xA;  JobLastStatus = 'Pass',&#xA;  LastRecordsProcessedDate = @LastRecordsProcessedOnDate&#xA; WHERE JobID = ?&#xA;&#xA;END&#xA;ELSE&#xA;BEGIN &#xA;&#xA;  UPDATE [Audit].[Job] &#xA;  SET  LastRunStartDate = ?,&#xA;  LastRunEndDate = GETDATE(), &#xA;  ExpectedRunTimeNUMBER = DATEDIFF(MS, ?, GETDATE()),&#xA;  JobLastStatus = 'Pass'&#xA;  WHERE JobID = ?&#xA;&#xA;&#xA;END" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="User::vCurJobID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vInsertedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vUpdatedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="5"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="6"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="7"
                SQLTask:DtsVariableName="User::vCurJobID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Completion (Audit)\Mark Job as Complete in JobInstance"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{4F746E6C-C4E9-4BBD-8437-F2421E840557}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Mark Job as Complete in JobInstance"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{82DB7E38-7209-42AA-B67A-E022799DCA59}"
              SQLTask:SqlStatementSource="EXEC [Audit].[logJobInstance] &#xA;@JobInstanceID = ?,&#xA;@RowCreatedNumber = ?, &#xA;@RowUpdatedNumber = ?, &#xA;@RowDeletedNumber = ?, &#xA;@RowRejectedNumber=?, &#xA;@JobSuccessIND = 'S',&#xA;@JobCompleteDTS = 'Today';" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vCurJobInstanceID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vInsertedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vUpdatedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="User::vDeletedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="User::vRejectedTotalRowCount"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get LastRecordsProcessedDate For Package"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{9CB3CDB3-E254-42E2-9F5D-D406CF353F8A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get LastRecordsProcessedDate For Package"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:PropertyExpression
        DTS:Name="SqlStatementSource">@[User::vSQLGetLastRecordProcessedDate]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{82DB7E38-7209-42AA-B67A-E022799DCA59}"
          SQLTask:SqlStatementSource="DECLARE @LastRecordsProcessedDate DATETIME&#xA;&#xA;SELECT @LastRecordsProcessedDate = ISNULL(LastRecordsProcessedDate, '1900-01-01')&#xA; FROM Audit.Job&#xA;WHERE JobID = ?&#xA;&#xA;SELECT @LastRecordsProcessedDate AS [LastRecordsProcessedDate]"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="LastRecordsProcessedDate"
            SQLTask:DtsVariableName="User::vLastRecordsProcessedDate" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::vCurJobID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="3"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Initialization"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:DelayValidation="True"
      DTS:Description="Sequence Container"
      DTS:DTSID="{388F8E87-4D9C-43C9-B84C-7510674EF289}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Initialization">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Initialization\Validate Connection Managers"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{E223EB9D-4651-43A7-9ECB-7723F8D2767A}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Validate Connection Managers"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_e86b6886cee74e0dafd8605660818f62"
              VSTAMajorVersion="14"
              VSTAMinorVersion="0"
              Language="CSharp">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_30969731dc73493ba685eb774d83ed48
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			// TODO: Add your code here
            bool failure = false;
            bool fireAgain = true;
            foreach (var ConnMgr in Dts.Connections)
            {
                if (ConnMgr.DelayValidation != true)
                {
                    Dts.Events.FireInformation(1, "", String.Format("ConnectionManager='{0}', ConnectionString='{1}'", ConnMgr.Name, ConnMgr.ConnectionString), "", 0, ref fireAgain);

                    try
                    {
                        ConnMgr.AcquireConnection(null);
                        Dts.Events.FireInformation(1, "", String.Format("Connection acquired successfully on '{0}'", ConnMgr.Name), "", 0, ref fireAgain);
                    }
                    catch (Exception ex)
                    {
                        Dts.Events.FireError(-1, "", String.Format("Failed to acquire connection to '{0}'. Error Message='{1}'", ConnMgr.Name, ex.Message), "", 0);
                        failure = true;
                    }
                }
            }

            if (failure)
                Dts.TaskResult = (int)ScriptResults.Failure;
            else
                Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_30969731dc73493ba685eb774d83ed48.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_30969731dc73493ba685eb774d83ed48.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_30969731dc73493ba685eb774d83ed48.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_30969731dc73493ba685eb774d83ed48.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_30969731dc73493ba685eb774d83ed48.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_e86b6886cee74e0dafd8605660818f62</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_e86b6886cee74e0dafd8605660818f62</msb:DisplayName>
		<msb:ProjectId>{CF8C745B-2A45-473C-85FD-3C89B1F076D3}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_e86b6886cee74e0dafd8605660818f62.csproj"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_30969731dc73493ba685eb774d83ed48.Properties.Settings.get_Default():ST_30969731dc73493ba685eb774d83ed48.Properties.Sett" +
    "ings")]

namespace ST_30969731dc73493ba685eb774d83ed48.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_30969731dc73493ba685eb774d83ed48")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_30969731dc73493ba685eb774d83ed48")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="ST_e86b6886cee74e0dafd8605660818f62.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{EA0BD391-2481-4692-AD42-7CD352362A8C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_30969731dc73493ba685eb774d83ed48</RootNamespace>
    <AssemblyName>ST_e86b6886cee74e0dafd8605660818f62</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <BinaryItem
                Name="ST_e86b6886cee74e0dafd8605660818f62.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMHnO1sAAAAAAAAAAOAAIiALATAAABIAAAAIAAAAAAAAEjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMAwAABPAAAAAEAAAJwEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAGBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAJwEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAD0
MAAAAAAAAEgAAAACAAUA0CEAADgOAAABAAAAAAAAAAgwAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBwD6AAAAAQAAERYKFwsCKBAAAApvEQAACm8SAAAKDDi4
AAAACG8TAAAKDQlvFAAACjqmAAAAAigQAAAKbxUAAAoXcgEAAHByAwAAcAlvFgAACglvFwAACigY
AAAKcgEAAHAWEgFvGQAACgkUbxoAAAomAigQAAAKbxUAAAoXcgEAAHByYwAAcAlvFgAACigbAAAK
cgEAAHAWEgFvGQAACt46EwQCKBAAAApvFQAAChVyAQAAcHK3AABwCW8WAAAKEQRvHAAACigYAAAK
cgEAAHAWbx0AAAomFwreAAhvHgAACjo9////BiwNAigQAAAKF28fAAAKKgIoEAAAChZvHwAACioA
AAEQAAAAAGAAOJgAOhEAAAEeAiggAAAKKh4CKCEAAAoqrn4BAAAELR5yLQEAcNADAAACKCIAAApv
IwAACnMkAAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIoJQAACioucwgAAAaA
AwAABCoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAABgEAAAjfgAAhAQAAFAG
AAAjU3RyaW5ncwAAAADUCgAAoAEAACNVUwB0DAAAEAAAACNHVUlEAAAAhAwAALQBAAAjQmxvYgAA
AAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAiAAAABQAAAAYAAAAJAAAAAQAAACUAAAACAAAA
EAAAAAEAAAACAAAAAwAAAAQAAAABAAAABAAAAAEAAAABAAAAAACnAwEAAAAAAAYAVQIPBQYA5AIP
BQYAoQH8BA8AgwUAAAYAzgFABAYAOAJABAYAGQJABAYAywJABAYAdQJABAYAjgJABAYA5QFABAYA
AAIIAwoAqQJWAwoAIAFWAw4AvgTLAA4AjgTLAAYAZATPAwYA1gPPAwYAhAH8BAYACgbPAwYAfgQv
BQYAbgQrBBIAVAGRAxIAtQGRAxIAPAEWBAYAaQEPBQoAfwNWAw4AzgXLAAoAoARWAwYAMAPPAw4A
0wTLAAYA6wDPAwYAngDPAwYARQZABAAAAABJAAAAAAABAAEAAQAQAOcDJQA5AAEAAQAAABAANgWS
BVEAAQADAAABEADBBZIFZQADAAcAAwEAAOoFAABJAAQACgARANsDoAARABABpAARAIIAqAAGBnEA
rABWgNoFrwBWgPAArwBQIAAAAACGAO0DBgABAGghAAAAAIYY7wQGAAEAcCEAAAAAgxjvBAYAAQB4
IQAAAACTCHoEswABAKQhAAAAAJMI+AC4AAEAqyEAAAAAkwgEAb0AAQCzIQAAAACWCBEGwwACALoh
AAAAAIYY7wQGAAIAwiEAAAAAkRj1BMgAAgAAAAEAAgMJAO8EAQARAO8EBgAZAO8ECgApAO8EEAAx
AO8EEAA5AO8EEABBAO8EEABJAO8EEABRAO8EEABZAO8EEABhAO8EEABpAO8EBgCZAO8EBgDBAO8E
FQDRAO8EBgBxAOIFJgDZAMoFKwDhAOEEMAB5ACwGNQCBAPIDOgDZAPgFPgCBAMIAQwCBACIDQwDx
AAMGRwDpAAYETgCBAFIEWQDxAAMGXgCJAJIAQwDpALQEZAD5ADgGOgDZAB0GAQBxAO8EBgChAO8E
BgABAbAAbQABAUEGdgCpAO8EfADJAO8EBgAIABQAlgAIABgAmwApAHMAAwEuAAsA2wAuABMA5AAu
ABsAAwEuACMADAEuACsANQEuADMANQEuADsAOwEuAEMADAEuAEsASgEuAFMANQEuAFsAagFDAGMA
mwBJAHMAAwFhAHsAmwBjAGsAmwAbAAMAAQAEAAMAAAB+BMwAAAAYAdEAAAAVBtYAAgAEAAMAAgAF
AAUAAQAGAAUAAgAHAAcABIAAAAEAAABmGmhkAAAAAAAAAQAAAAQAAAAAAAAAAAAAAIQAeQAAAAAA
DQAAAAAAAAAAAAAAjQA3AwAAAAANAAAAAAAAAAAAAACNAFIAAAAAAAQAAAAAAAAAAAAAAIQAzwMA
AAAAAAAAAAEAAABABQAABQACAAAAAAAAU1RfZTg2YjY4ODZjZWU3NGUwZGFmZDg2MDU2NjA4MThm
NjIAU1RfMzA5Njk3MzFkYzczNDkzYmE2ODVlYjc3NGQ4M2VkNDgAPE1vZHVsZT4ATWljcm9zb2Z0
LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNlAGdl
dF9NZXNzYWdlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9OYW1lAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNl
dF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0
ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmli
dXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2Vt
Ymx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNv
bmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxh
dGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJs
eUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNz
ZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAHZhbHVl
AFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcATWljcm9zb2Z0
LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlw
dFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2U4NmI2ODg2
Y2VlNzRlMGRhZmQ4NjA1NjYwODE4ZjYyLmRsbABTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3Jp
cHRNYWluAGdldF9EZWxheVZhbGlkYXRpb24ARmlyZUluZm9ybWF0aW9uAFN5c3RlbS5Db25maWd1
cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEFjcXVpcmVDb25u
ZWN0aW9uAEV4Y2VwdGlvbgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rp
b25NYW5hZ2VyAEV2ZW50c09iamVjdFdyYXBwZXIARmlyZUVycm9yAENvbm5lY3Rpb25FbnVtZXJh
dG9yAER0c0VudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdu
b3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBT
VF8zMDk2OTczMWRjNzM0OTNiYTY4NWViNzc0ZDgzZWQ0OC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5y
ZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfMzA5Njk3MzFkYzczNDkzYmE2ODVlYjc3NGQ4M2Vk
NDguUHJvcGVydGllcwBTZXR0aW5ncwBnZXRfQ29ubmVjdGlvbnMAU3VjY2VzcwBnZXRfRHRzAFNj
cmlwdFJlc3VsdHMAZ2V0X0V2ZW50cwBGb3JtYXQAT2JqZWN0AGdldF9EZWZhdWx0AHNldF9UYXNr
UmVzdWx0AGdldF9DdXJyZW50AE1vdmVOZXh0AGdldF9Bc3NlbWJseQAAAAABAF9DAG8AbgBuAGUA
YwB0AGkAbwBuAE0AYQBuAGEAZwBlAHIAPQAnAHsAMAB9ACcALAAgAEMAbwBuAG4AZQBjAHQAaQBv
AG4AUwB0AHIAaQBuAGcAPQAnAHsAMQB9ACcAAVNDAG8AbgBuAGUAYwB0AGkAbwBuACAAYQBjAHEA
dQBpAHIAZQBkACAAcwB1AGMAYwBlAHMAcwBmAHUAbABsAHkAIABvAG4AIAAnAHsAMAB9ACcAAXVG
AGEAaQBsAGUAZAAgAHQAbwAgAGEAYwBxAHUAaQByAGUAIABjAG8AbgBuAGUAYwB0AGkAbwBuACAA
dABvACAAJwB7ADAAfQAnAC4AIABFAHIAcgBvAHIAIABNAGUAcwBzAGEAZwBlAD0AJwB7ADEAfQAn
AAFxUwBUAF8AMwAwADkANgA5ADcAMwAxAGQAYwA3ADMANAA5ADMAYgBhADYAOAA1AGUAYgA3ADcA
NABkADgAMwBlAGQANAA4AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBz
AAAAE6PcoPwIS0OuFimW5zjMlgAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERXQoHBQICEj0SQRJF
BCAAEm0EIAAScQQgABI9BCAAEkEDIAACBCAAEnUDIAAOBgADDg4cHAogBgEIDg4OCBACBCABHBwF
AAIODhwIIAUCCA4ODggIAAESgIERgIUFIAASgIkHIAIBDhKAiQi3elxWGTTgiQiJhF3NgIDMkQQA
AAAABAEAAAADBhJVAwYSWQMGEhACBggDBhEUBAAAElUEAAASWQUAAQESWQQAABIQAwAAAQQIABJV
BAgAElkECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAA
AAAoAQAjU1RfMzA5Njk3MzFkYzczNDkzYmE2ODVlYjc3NGQ4M2VkNDgAAAUBAAAAAA4BAAlNaWNy
b3NvZnQAAB8BABpDb3B5cmlnaHQgQCBNaWNyb3NvZnQgMjAxNgAASQEAGi5ORVRGcmFtZXdvcmss
VmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjW0
AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGli
LCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVj
NTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAA
AFBBRFBBRFC0AAAA6DAAAAAAAAAAAAAAAjEAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPQwAAAA
AAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAPgQAAAAAAAAAAAAAPgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAGhkZhoAAAEAaGRmGj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBJ4DAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAHoDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA0AAoAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAE0AaQBjAHIAbwBzAG8AZgB0AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBj
AHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADMAMAA5ADYAOQA3ADMAMQBkAGMANwAzADQAOQAzAGIA
YQA2ADgANQBlAGIANwA3ADQAZAA4ADMAZQBkADQAOAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBp
AG8AbgAAAAAAMQAuADAALgA2ADcANQA4AC4AMgA1ADcAMAA0AAAAAABwACgAAQBJAG4AdABlAHIA
bgBhAGwATgBhAG0AZQAAAFMAVABfAGUAOAA2AGIANgA4ADgANgBjAGUAZQA3ADQAZQAwAGQAYQBm
AGQAOAA2ADAANQA2ADYAMAA4ADEAOABmADYAMgAuAGQAbABsAAAAWgAbAAEATABlAGcAYQBsAEMA
bwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAATQBpAGMAcgBvAHMAbwBm
AHQAIAAyADAAMQA2AAAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAA
AAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBlADgANgBi
ADYAOAA4ADYAYwBlAGUANwA0AGUAMABkAGEAZgBkADgANgAwADUANgA2ADAAOAAxADgAZgA2ADIA
LgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMwAwADkANgA5
ADcAMwAxAGQAYwA3ADMANAA5ADMAYgBhADYAOAA1AGUAYgA3ADcANABkADgAMwBlAGQANAA4AAAA
QgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADcANQA4AC4AMgA1
ADcAMAA0AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA2ADcANQA4AC4AMgA1ADcAMAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAABQxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Initialization (Audit)"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Initialization (Audit)">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Execute cmd shell and retrieve environment variable information"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{36A6B70F-BEE9-4AC5-9BB9-20A3ABB1D7A0}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Execute cmd shell and retrieve environment variable information"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_8c23741a9e474b219c30e01d2cefa5cc"
              VSTAMajorVersion="14"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::vEnvironmentTEXT">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_85ad09a2ba584afbbc2c9e71dd29ae45")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_85ad09a2ba584afbbc2c9e71dd29ae45")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_8c23741a9e474b219c30e01d2cefa5cc.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D4060731-5D6B-4076-8658-D7CD517BBA1F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_85ad09a2ba584afbbc2c9e71dd29ae45</RootNamespace>
    <AssemblyName>ST_8c23741a9e474b219c30e01d2cefa5cc</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.IO;
using System.Diagnostics;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_1ac71edf38774ce3aaaabd70002d56d2
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            string sCmdOutput = "";

            System.Diagnostics.Process process = new System.Diagnostics.Process();
            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();

            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
            startInfo.RedirectStandardInput = true;
            startInfo.RedirectStandardOutput = true;
            startInfo.RedirectStandardError = true;
            startInfo.UseShellExecute = false;

            startInfo.FileName = "cmd.exe";
            startInfo.Arguments = @"/c set";
            process.StartInfo = startInfo;

            process.Start();

            StreamReader reader = process.StandardOutput;

            string line;
            while ((line = reader.ReadLine()) != null)
            {
                sCmdOutput = sCmdOutput + line + "|";
            }

            sCmdOutput = sCmdOutput.Substring(0, sCmdOutput.Length - 1);

            Dts.Variables["User::vEnvironmentTEXT"].Value = sCmdOutput;
            //MessageBox.Show(sCmdOutput);

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_8c23741a9e474b219c30e01d2cefa5cc</msb:CodeName>
		<msb:DisplayName>ST_8c23741a9e474b219c30e01d2cefa5cc</msb:DisplayName>
		<msb:ProjectId>{D3966B3B-6940-4B52-95D9-D4069EEEE67C}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_8c23741a9e474b219c30e01d2cefa5cc.csproj"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Settings.get_Default():ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Sett" +
    "ings")]

namespace ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_85ad09a2ba584afbbc2c9e71dd29ae45.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_8c23741a9e474b219c30e01d2cefa5cc.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAD5zOlsAAAAAAAAAAOAAIiALATAAABIAAAAIAAAAAAAAVjAA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAAQwAABPAAAAAEAAAJwEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAXBAAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAJwEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAA4
MAAAAAAAAEgAAAACAAUAdCEAANgNAAABAAAAAAAAAEwvAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBACvAAAAAQAAEXIBAABwCnMQAAAKcxEAAAoLBxdvEgAA
CgcXbxMAAAoHF28UAAAKBxdvFQAACgcWbxYAAAoHcgMAAHBvFwAACgdyEwAAcG8YAAAKJQdvGQAA
CiVvGgAACiZvGwAACgwrDQYJciEAAHAoHAAACgoIbx0AAAolDS3pBhYGbx4AAAoXWW8fAAAKCgIo
IAAACm8hAAAKciUAAHBvIgAACgZvIwAACgIoIAAAChZvJAAACioeAiglAAAKKh4CKCYAAAoqrn4B
AAAELR5yUwAAcNADAAACKCcAAApvKAAACnMpAAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoa
fgMAAAQqHgIoKgAACioucwgAAAaAAwAABCoAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAA
AAAFAGwAAAA8BAAAI34AAKgEAACoBgAAI1N0cmluZ3MAAAAAUAsAAMgAAAAjVVMAGAwAABAAAAAj
R1VJRAAAACgMAACwAQAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAIwAAAAUA
AAAGAAAACQAAAAEAAAAqAAAAAgAAABAAAAABAAAAAgAAAAMAAAAEAAAAAQAAAAQAAAABAAAAAQAA
AAAAAwQBAAAAAAAGAIwCJAUGABsDJAUGANgBEQUPAJgFAAAGAAUCgQQGAG8CgQQGAFACgQQGAAID
gQQGAKwCgQQGAMUCgQQGABwCgQQGADcCXQMKAOACsgMKAFcBsgMOAK0EEQUGAL4ELgAGADsENAQG
ALsBEQUGACgGNAQGANoERAUGAJMEbAQOAIsB7QMOAOwB7QMOAHMBVwQGAKABJAUOAPUFEQUOANkA
EQUGAHcDNAQGAMsELgAKANsDsgMSANoF+QASAJwA+QAGACIBNAQGAKUANAQGAJwGgQQAAAAAJQAA
AAAAAQABAAEAEABMBAEAOQABAAEAAAAQAEsFpwVNAAEAAwAAARAA5AWnBWEAAwAHAAMBAAAFBgAA
RQAEAAoAEQBABJwAEQBHAaAAEQCMAKQABgZXAKgAVoDtBasAVoAnAasAUCAAAAAAhgBSBAYAAQAL
IQAAAACGGAQFBgABABMhAAAAAIMYBAUGAAEAGyEAAAAAkwjWBK8AAQBHIQAAAACTCC8BtAABAE4h
AAAAAJMIOwG5AAEAViEAAAAAlggvBr8AAgBdIQAAAACGGAQFBgACAGUhAAAAAJEYCgXEAAIAAAAB
AFcDCQAEBQEAEQAEBQYAGQAEBQoAKQAEBRAAMQAEBRAAOQAEBRAAQQAEBRAASQAEBRAAUQAEBRAA
WQAEBRAAYQAEBRAAaQAEBQYAkQAEBQYAuQAEBRUAyQAEBQYA0QAEBQYAeQAEBQYAeQDJACQAeQBQ
BioAeQB9BioAeQDqBCoAeQA5AyoAeQDsABAAeQATBhAA0QCfBC8A0QBKBjUA0QBqBjkA4QAhBj4A
6QAZAUUA4QCIA0kA4QB+A00AcQD9BVMA8QDWBVgA+QArBF0AAQFNA2QA8QA7BgEAcQAEBQYAmQAE
BQYACQG3AGkACQGYBnIAoQAEBXgAwQAEBQYACAAUAJIACAAYAJcAKQBzAP8ALgALANcALgATAOAA
LgAbAP8ALgAjAAgBLgArADEBLgAzADEBLgA7ADcBLgBDAAgBLgBLAEYBLgBTADEBLgBbAGYBQwBj
AJcASQBzAP8AYQB7AJcAYwBrAJcAGwADAAEABAADAAAA2gTIAAAATwHNAAAAMwbSAAIABAADAAIA
BQAFAAEABgAFAAIABwAHAASAAAABAAAAZRrnUgAAAAAAAGgAAAAEAAAAAAAAAAAAAACAAF8AAAAA
AA0AAAAAAAAAAAAAAIkAkwMAAAAABAAAAAAAAAAAAAAAgAA0BAAAAAANAAAAAAAAAAAAAACJADgA
AAAAAAAAAAABAAAAVQUAAAUAAgAAAAAAAFNUXzFhYzcxZWRmMzg3NzRjZTNhYWFhYmQ3MDAwMmQ1
NmQyADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFs
dWVfXwBtc2NvcmxpYgBTVF84YzIzNzQxYTllNDc0YjIxOWMzMGUwMWQyY2VmYTVjYwBkZWZhdWx0
SW5zdGFuY2UAVmFyaWFibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAc2V0
X1dpbmRvd1N0eWxlAFByb2Nlc3NXaW5kb3dTdHlsZQBzZXRfRmlsZU5hbWUATWljcm9zb2Z0LlNx
bFNlcnZlci5EdHMuUnVudGltZQBSZWFkTGluZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0
X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBs
aWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRl
ZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1
dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1i
bHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29u
ZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0
aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3Nl
bWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAc2V0X1Vz
ZVNoZWxsRXhlY3V0ZQBzZXRfVmFsdWUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBT
dHJpbmcAU3Vic3RyaW5nAGdldF9MZW5ndGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNr
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9k
ZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzhjMjM3NDFhOWU0NzRiMjE5YzMwZTAxZDJjZWZh
NWNjLmRsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3Rl
bS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEN1
bHR1cmVJbmZvAHNldF9TdGFydEluZm8AUHJvY2Vzc1N0YXJ0SW5mbwBTdHJlYW1SZWFkZXIAVGV4
dFJlYWRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAHNldF9SZWRpcmVjdFN0YW5kYXJkRXJyb3IALmN0
b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZp
Y2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfODVhZDA5YTJiYTU4NGFmYmJjMmM5ZTcxZGQyOWFlNDUu
UHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzg1YWQwOWEy
YmE1ODRhZmJiYzJjOWU3MWRkMjlhZTQ1LlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBTZXR0aW5n
cwBTdWNjZXNzAFByb2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAHNldF9Bcmd1bWVudHMAQ29u
Y2F0AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABTdGFydABzZXRfUmVkaXJlY3RT
dGFuZGFyZElucHV0AGdldF9TdGFuZGFyZE91dHB1dABzZXRfUmVkaXJlY3RTdGFuZGFyZE91dHB1
dABnZXRfQXNzZW1ibHkAAAAAAAEAD2MAbQBkAC4AZQB4AGUAAA0vAGMAIABzAGUAdAAAA3wAAC1V
AHMAZQByADoAOgB2AEUAbgB2AGkAcgBvAG4AbQBlAG4AdABUAEUAWABUAABxUwBUAF8AOAA1AGEA
ZAAwADkAYQAyAGIAYQA1ADgANABhAGYAYgBiAGMAMgBjADkAZQA3ADEAZABkADIAOQBhAGUANAA1
AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAAAft/RxH7KITp0/
wHO159xmAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFZCAcEDhI9EkEOBSABARFtBCABAQIFIAEB
Ej0DIAACBCAAEkEGAAMODg4OAyAADgMgAAgFIAIOCAgEIAASeQQgABJ9BiABEoCBHAQgAQEcCAAB
EoCFEYCJBSAAEoCNByACAQ4SgI0It3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYSUQMGElUD
BhIQAgYIAwYRFAQAABJRBAAAElUFAAEBElUEAAASEAMAAAEECAASUQQIABJVBAgAEhAIAQAIAAAA
AAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzg1YWQwOWEy
YmE1ODRhZmJiYzJjOWU3MWRkMjlhZTQ1AAAFAQAAAAAOAQAJTWljcm9zb2Z0AAAfAQAaQ29weXJp
Z2h0IEAgTWljcm9zb2Z0IDIwMTYAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4U
RnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41tAAAAM7K774BAAAAkQAAAGxT
eXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4w
LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVt
LlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAACwwAAAA
AAAAAAAAAEYwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4MAAAAAAAAAAAAAAAAF9Db3JEbGxN
YWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAPgQAAAAAAAAAAAAAPgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAOdSZRoAAAEA51JlGj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBJ4DAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAHoDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA0AAoAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAE0AaQBjAHIAbwBzAG8AZgB0AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBj
AHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADgANQBhAGQAMAA5AGEAMgBiAGEANQA4ADQAYQBmAGIA
YgBjADIAYwA5AGUANwAxAGQAZAAyADkAYQBlADQANQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBp
AG8AbgAAAAAAMQAuADAALgA2ADcANQA3AC4AMgAxADIAMgAzAAAAAABwACgAAQBJAG4AdABlAHIA
bgBhAGwATgBhAG0AZQAAAFMAVABfADgAYwAyADMANwA0ADEAYQA5AGUANAA3ADQAYgAyADEAOQBj
ADMAMABlADAAMQBkADIAYwBlAGYAYQA1AGMAYwAuAGQAbABsAAAAWgAbAAEATABlAGcAYQBsAEMA
bwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAATQBpAGMAcgBvAHMAbwBm
AHQAIAAyADAAMQA2AAAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAA
AAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwA4AGMAMgAz
ADcANAAxAGEAOQBlADQANwA0AGIAMgAxADkAYwAzADAAZQAwADEAZAAyAGMAZQBmAGEANQBjAGMA
LgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AOAA1AGEAZAAw
ADkAYQAyAGIAYQA1ADgANABhAGYAYgBiAGMAMgBjADkAZQA3ADEAZABkADIAOQBhAGUANAA1AAAA
QgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADcANQA3AC4AMgAx
ADIAMgAzAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA2ADcANQA3AC4AMgAxADIAMgAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAFgwAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Log Environment"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{776A09CE-764D-40D0-9164-05B03AE1E7DB}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Log Environment"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{82DB7E38-7209-42AA-B67A-E022799DCA59}"
              SQLTask:SqlStatementSource="INSERT INTO Audit.Environment (&#xA;                RunningJobsText, &#xA;                EnvironmentText, &#xA;                JobInstanceID) VALUES &#xA;                (?, ?, ?)&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="255" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vEnvironmentTEXT"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="8000" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vCurJobInstanceID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Log Processed  Table JobInstanceSource"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{E7AE3054-933F-451B-9307-A4659865175A}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Log Processed  Table JobInstanceSource"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{82DB7E38-7209-42AA-B67A-E022799DCA59}"
              SQLTask:SqlStatementSource="EXEC Audit.LogJobInstanceSource &#xA; @JobInstanceID = ?, &#xA;@SourceNAME = ?,  &#xA;@SourceLocationNAME = ?, &#xA;@JobInstanceSourceID=? output, &#xA;@SourceTypeIND = 'T' " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vCurJobInstanceID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="$Package::pSourceTableName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="500" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vSourceServerDatabase"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="1000" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="User::vJobInstanceSourceID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Populate ETLUser"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{B3AE7FF8-1EAC-4F2E-A39C-A87A4E11CC00}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate ETLUser"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{82DB7E38-7209-42AA-B67A-E022799DCA59}"
              SQLTask:SqlStatementSource="Exec [Audit].[LogETLUser] @UserNAME = ?, @UserEMAIL = ?, @UserID = ? OUTPUT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::UserName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="256" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="$Project::pNotificationEmail"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="256" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vCurUserID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Populate Joblog"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{2B489CFA-3B6E-41C1-AB24-87459B0D1255}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate Joblog"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{82DB7E38-7209-42AA-B67A-E022799DCA59}"
              SQLTask:SqlStatementSource="EXEC [Audit].[LogJobOnBegin] &#xA;@JobName = ?,&#xA;@PackageID = ?,&#xA;@JobID = ? OUTPUT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="255" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::PackageID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="72"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vCurJobID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Initialization (Audit)\Populate new Job Instance"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{49535C9F-E076-4456-90AA-74442609BAA1}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate new Job Instance"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{82DB7E38-7209-42AA-B67A-E022799DCA59}"
              SQLTask:SqlStatementSource="EXEC [Audit].[logJobInstance] &#xA;@JobID = ?, &#xA;@UserID = ?,&#xA;@JobInstanceParentID = ?,&#xA;@packageVersionID = ?,&#xA;@ExecutionID = ?,&#xA;@JobStartDTS = ?, &#xA;@currentJobInstanceID = ? OUTPUT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vCurJobID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vCurUserID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="$Package::pJobInstanceParentID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="System::VersionGUID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="72"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="System::ExecutionInstanceGUID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="72"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="5"
                SQLTask:DtsVariableName="User::vPackageStartDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="133"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="6"
                SQLTask:DtsVariableName="User::vCurJobInstanceID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{677E2002-DCDF-47E8-B0AA-28A41F2CC4AF}"
          DTS:From="Package\Initialization (Audit)\Populate ETLUser"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Initialization (Audit)\Populate Joblog" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{E4D99E95-6582-447B-9685-0E482C754655}"
          DTS:From="Package\Initialization (Audit)\Populate Joblog"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Initialization (Audit)\Populate new Job Instance" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{E32B896A-96CE-4FD6-A8EB-07E8D3EB9048}"
          DTS:From="Package\Initialization (Audit)\Populate new Job Instance"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Initialization (Audit)\Log Processed  Table JobInstanceSource" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{16B545D6-AB2E-4032-A3FD-83AE4BEAC139}"
          DTS:From="Package\Initialization (Audit)\Execute cmd shell and retrieve environment variable information"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Initialization (Audit)\Log Environment" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{136D9B37-D369-4E14-ADD8-D1CC3679A129}"
          DTS:EvalOp="3"
          DTS:Expression="@[$Project::pDebugMode]  == True"
          DTS:From="Package\Initialization (Audit)\Log Processed  Table JobInstanceSource"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Initialization (Audit)\Execute cmd shell and retrieve environment variable information" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:DelayValidation="True"
      DTS:Description="Sequence Container"
      DTS:DTSID="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Excel (xls and xlsx) Files from Source to Destination">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{F9A58954-53D2-4728-8F4D-586A76EB7E48}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Detect index and prepare drop and create index script"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">@[User::vSQLIndexStatement]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{20B53271-7BD0-4DC3-9BA8-E74FB20FFC0D}"
              SQLTask:SqlStatementSource="DECLARE&#xA;@IncludeFileGroup bit = 1,&#xA;@IncludeDrop bit = 1,&#xA;@IncludeFillFactor bit = 0&#xA;&#xA;DECLARE @sTableName VARCHAR(150) = ?&#xA;DECLARE @sIndexDesc varchar(MAX)&#xA;DECLARE @sCreateSql varchar(MAX)&#xA;DECLARE @sDropSql varchar(MAX)&#xA;DECLARE @sCreateAllSql varchar(MAX) = ''&#xA;DECLARE @sDropAllSql varchar(MAX) = ''&#xA;&#xA;--- Get all existing indexes, but NOT the primary keys&#xA;DECLARE Indexes_cursor CURSOR&#xA;FOR SELECT&#xA;SC.Name AS SchemaName&#xA;, SO.Name AS TableName&#xA;, SI.Object_Id AS TableId&#xA;, SI.[Name] AS IndexName&#xA;, SI.Index_ID AS IndexId&#xA;, SI.type_desc AS IndexType&#xA;, FG.[Name] AS FileGroupName&#xA;, CASE WHEN SI.Fill_Factor = 0 THEN 100 ELSE SI.Fill_Factor END Fill_Factor&#xA;,SI.is_primary_key&#xA;,SI.is_unique&#xA;FROM sys.indexes SI&#xA;LEFT JOIN sys.filegroups FG&#xA;ON SI.data_space_id = FG.data_space_id&#xA;INNER JOIN sys.objects SO&#xA;ON SI.object_id = SO.object_id&#xA;INNER JOIN sys.schemas SC&#xA;ON SC.schema_id = SO.schema_id&#xA;WHERE ObjectProperty(SI.Object_Id, 'IsUserTable') = 1&#xA;AND SI.[Name] IS NOT NULL&#xA;--AND SI.is_primary_key = 0&#xA;AND SI.is_unique_constraint = 0&#xA;AND IndexProperty(SI.Object_Id, SI.[Name], 'IsStatistics') = 0&#xA;AND SC.name + '.' + SO.name = @sTableName&#xA;ORDER BY Object_name(SI.Object_Id), SI.Index_ID&#xA;&#xA;DECLARE @SchemaName sysname&#xA;DECLARE @TableName sysname&#xA;DECLARE @TableId int&#xA;DECLARE @IndexType SYSNAME&#xA;DECLARE @IndexName sysname&#xA;DECLARE @FileGroupName sysname&#xA;DECLARE @IndexId int&#xA;DECLARE @FillFactor int&#xA;DECLARE @IsPrimaryKey BIT&#xA;DECLARE @IsUnique BIT&#xA;&#xA;DECLARE @NewLine varchar(4000) SET @NewLine = CHAR(13) + CHAR(10)&#xA;DECLARE @Tab varchar(4000) SET @Tab = Space(4)&#xA;&#xA;-- Loop through all indexes&#xA;OPEN Indexes_cursor&#xA;&#xA;FETCH NEXT&#xA;FROM Indexes_cursor&#xA;INTO @SchemaName, @TableName, @TableId, @IndexName,&#xA;@IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique&#xA;&#xA;WHILE (@@Fetch_Status = 0)&#xA;BEGIN&#xA;&#xA;IF (@IsPrimaryKey = 0)&#xA;BEGIN&#xA;  SET @sIndexDesc = '-- Index ' + @IndexName + ' on table ' + @TableName&#xA;  SET @sDropSql = 'IF EXISTS (SELECT 1' + @NewLine&#xA;  + ' FROM sysindexes si' + @NewLine&#xA;  + ' INNER JOIN sysobjects so' + @NewLine&#xA;  + ' ON so.id = si.id' + @NewLine&#xA;  + ' WHERE si.[Name] = ''' + @IndexName + ''' -- Index Name' + @NewLine&#xA;  + ' AND so.[Name] = ''' + @TableName + ''') -- Table Name' + @NewLine&#xA;  + 'BEGIN' + @NewLine&#xA;  + ' DROP INDEX [' + @IndexName + '] ON'&#xA;  + '[' + @SchemaName + '].[' + @TableName + ']' + @NewLine&#xA;  + 'END' + @NewLine&#xA;&#xA;  SET @sCreateSql = 'CREATE'&#xA;&#xA;  -- Check if the index is unique&#xA;  IF (@IsUnique = 1)&#xA;  BEGIN&#xA;  SET @sCreateSql = @sCreateSql + ' UNIQUE'&#xA;  END&#xA;&#xA;  -- Check if the index is clustered&#xA;  IF (@IndexType = 'CLUSTERED')&#xA;  BEGIN&#xA;  SET @sCreateSql = @sCreateSql + ' CLUSTERED'&#xA;  END&#xA;&#xA;&#xA;  SET @sCreateSql = @sCreateSql + ' INDEX [' + @IndexName + ']&#xA;  ON [' + @SchemaName + '].[' + @TableName + ']' + @NewLine + '(' + @NewLine&#xA;END&#xA;&#xA;ELSE&#xA;BEGIN&#xA;       SET @sDropSql = 'ALTER TABLE ' + @SchemaName + '.'+ @TableName + ' DROP CONSTRAINT ' + @IndexName&#xA;&#xA;       SET @sCreateSql = ''&#xA;       SET @sCreateSql = @sCreateSql + 'ALTER TABLE ' + @SchemaName + '.' + @TableName +  + ' ADD CONSTRAINT ' + @IndexName + ' PRIMARY KEY '&#xA;&#xA;       IF (@IndexType = 'NONCLUSTERED')&#xA;       BEGIN&#xA;       SET @sCreateSql = @sCreateSql + ' NONCLUSTERED'&#xA;       END&#xA;&#xA;       SET @sCreateSql = @sCreateSql + '(' &#xA;END&#xA;&#xA;  -- Get all columns of the index&#xA;  DECLARE IndexColumns_cursor CURSOR&#xA;  FOR SELECT SC.[Name],&#xA;  IC.[is_included_column],&#xA;  IC.is_descending_key&#xA;  FROM sys.index_columns IC&#xA;  INNER JOIN sys.columns SC&#xA;  ON IC.Object_Id = SC.Object_Id&#xA;  AND IC.Column_ID = SC.Column_ID&#xA;  WHERE IC.Object_Id = @TableId&#xA;  AND Index_ID = @IndexId&#xA;  ORDER BY IC.key_ordinal&#xA;&#xA;  DECLARE @IxColumn sysname&#xA;  DECLARE @IxIncl bit&#xA;  DECLARE @Desc bit&#xA;  DECLARE @IxIsIncl bit SET @IxIsIncl = 0&#xA;  DECLARE @IxFirstColumn bit SET @IxFirstColumn = 1&#xA;&#xA;  -- Loop through all columns of the index and append them to the CREATE statement&#xA;  OPEN IndexColumns_cursor&#xA;   FETCH NEXT&#xA;   FROM IndexColumns_cursor&#xA;   INTO @IxColumn, @IxIncl, @Desc&#xA;&#xA;  WHILE (@@Fetch_Status = 0)&#xA;  BEGIN&#xA;   IF (@IxFirstColumn = 1)&#xA;   BEGIN&#xA;    SET @IxFirstColumn = 0&#xA;   END&#xA;   ELSE&#xA;   BEGIN&#xA;    --check to see if it's an included column&#xA;    IF (@IxIsIncl = 0) AND (@IxIncl = 1)&#xA;    BEGIN&#xA;     SET @IxIsIncl = 1&#xA;     SET @sCreateSql = @sCreateSql + @NewLine + ')' +&#xA;      @NewLine + 'INCLUDE' + @NewLine + '(' + @NewLine&#xA;    END&#xA;    ELSE&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ',' + @NewLine&#xA;    END&#xA;    --END IF&#xA;   END&#xA;  --END IF&#xA;&#xA;   SET @sCreateSql = @sCreateSql + @Tab + '[' + @IxColumn + ']'&#xA;   -- check if ASC or DESC&#xA;   IF @IxIsIncl = 0&#xA;   BEGIN&#xA;    IF @Desc = 1&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ' DESC'&#xA;    END&#xA;    ELSE&#xA;    BEGIN&#xA;     SET @sCreateSql = @sCreateSql + ' ASC'&#xA;    END&#xA;    --END IF&#xA;   END&#xA;   --END IF&#xA;   FETCH NEXT&#xA;   FROM IndexColumns_cursor&#xA;   INTO @IxColumn, @IxIncl, @Desc&#xA;  END&#xA;  --END WHILE&#xA;&#xA;  CLOSE IndexColumns_cursor&#xA;  DEALLOCATE IndexColumns_cursor&#xA;&#xA;  SET @sCreateSql = @sCreateSql + @NewLine + ') '&#xA;&#xA;  IF @IncludeFillFactor = 1&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + @NewLine +&#xA;   'WITH (FillFactor = ' + Cast(@FillFactor as varchar(13)) + ')' + @NewLine&#xA;  END&#xA;  --END IF&#xA;&#xA;  IF @IncludeFileGroup = 1&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + 'ON ['+ @FileGroupName + ']' + @NewLine&#xA;  END&#xA;  ELSE&#xA;  BEGIN&#xA;   SET @sCreateSql = @sCreateSql + @NewLine&#xA;  END&#xA;  --END IF&#xA;&#xA;  SET @sCreateAllSql = @sCreateAllSql + '&#xA;'&#xA;&#xA;  SET @sDropAllSql = @sDropAllSql + '&#xA;'&#xA;&#xA;  IF @IncludeDrop = 1&#xA;  BEGIN&#xA;   SET @sDropAllSql = @sDropAllSql + @sDropSql + '&#xA;'&#xA;  END&#xA;&#xA;  SET @sCreateAllSql = @sCreateAllSql + @sCreateSql + '&#xA;'&#xA;&#xA;  FETCH NEXT&#xA;   FROM Indexes_cursor&#xA;   INTO @SchemaName, @TableName, @TableId, @IndexName,&#xA;   @IndexId, @IndexType, @FileGroupName, @FillFactor, @IsPrimaryKey, @IsUnique&#xA;END&#xA;--END WHILE&#xA;CLOSE Indexes_cursor&#xA;DEALLOCATE Indexes_cursor&#xA;&#xA;SELECT ? = @sDropAllSql&#xA;SELECT ? = @sCreateAllSql" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::vDropAllIndexSQL"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="8000" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::vCreateAllIndexSQL"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="8000" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::vSchemaTableName"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="150" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Drop Index"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:DelayValidation="True"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{5B5515D4-CCF1-41B8-861A-EC51913426D9}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Drop Index"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">@[User::vDropAllIndexSQL]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{20B53271-7BD0-4DC3-9BA8-E74FB20FFC0D}" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\ExSQL Delete Duplicated Rows"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:DelayValidation="True"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{C4D0D4A5-F2A5-4E80-A032-0F825753A257}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="ExSQL Delete Duplicated Rows"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{20B53271-7BD0-4DC3-9BA8-E74FB20FFC0D}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStmtSourceType="Variable"
              SQLTask:SqlStatementSource="User::vSQLDeleteDuplicates"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="DeletedRows"
                SQLTask:DtsVariableName="User::vDeletedTotalRowCount" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Get XLSX File Matching Name Criteria"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:DelayValidation="True"
          DTS:Description="Script Task"
          DTS:DTSID="{8B118165-6528-4890-B1A0-5B9829EA1777}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get XLSX File Matching Name Criteria"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_ead0af3c653d48f184492cf953a6a000"
              VSTAMajorVersion="14"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::vFileTypeExtension,$Package::pConstantCurrencyFilePath,$Package::pFilePrefixName"
              ReadWriteVariables="User::vFileList,User::vProcessingFileCount">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_ead0af3c653d48f184492cf953a6a000.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{95625DA8-4F88-432A-A555-5BA077B95B85}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_99e7405f3f944a70a8621d9b5cc2bf43</RootNamespace><AssemblyName>ST_ead0af3c653d48f184492cf953a6a000</AssemblyName><TargetFrameworkVersion>v4.5</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST130</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.IO;
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;
#endregion

namespace ST_99e7405f3f944a70a8621d9b5cc2bf43
{
    // SET COM to FALSE 
    [ComVisible(false)]
    public class BaseClass
    {
        /// <summary>
        /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
        /// or parent of this class.
        /// </summary>
        [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
        [ComVisible(false)]
        public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
        {
            #region Help:  Using Integration Services variables and parameters in a script
            /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

            #endregion

            #region Help:  Firing Integration Services events from a script
            /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
            #endregion

            #region Help:  Using Integration Services connection managers in a script
            /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
            #endregion


            /// <summary>
            /// This method is called when this script task executes in the control flow.
            /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
            /// To open Help, press F1.
            /// </summary>
            public void Main()
            {
                // Adding Error Handling Steps in Code
                try
                   {

                // Original Version 1.1  Script Date: 22/05/2016
                // Revised  Version 1.2 (Quidel Corp) Script Date: 21/09/2016

                // File Processing Script (Code) by; Darlington C. Nwemeh 
                // Purpose: Process Excel Files that match the Expected Files based on the Package or Data to be Processed. 
                // Copyright (c) 2016 Quidel Corporation 

                bool MatchFound = false;
                string sourcePathAndFileName = "";
                string sourceFileName = "";
                int DEFAULTYPEXTENSIONLENGTH = 5; //.xlsx

                // Take the name and file type for a string we can look for
                // This is what we use to find the correct file in our source directory
                string currentDirectory = Dts.Variables["$Package::pConstantCurrencyFilePath"].Value.ToString();
                string filePatternName = Dts.Variables["$Package::pFilePrefixName"].Value.ToString(); ;
                string fileTypeExtension = Dts.Variables["User::vFileTypeExtension"].Value.ToString(); ;

                // remove invalid characters from the currentDirectory , fileTypeExtension 
                currentDirectory = checkDirectoryEndChar(currentDirectory);
                fileTypeExtension = RemoveInvalidFileNameChars(fileTypeExtension);

                if (fileTypeExtension.Length != DEFAULTYPEXTENSIONLENGTH)
                {
                    Dts.Variables["User::vProcessingFileCount"].Value = 0;
                    Dts.TaskResult = (int)ScriptResults.Success;
                    return;
                }

                DataTable DataFilePathTable = new System.Data.DataTable("dFilePathTable");
                DataFilePathTable.Columns.Add("FileName", Type.GetType("System.String"));
                DataFilePathTable.Columns.Add("FileFullPathName", Type.GetType("System.String"));

                if (System.IO.Directory.Exists(currentDirectory))
                {
                    // remove invalid characters from the file pattern name
                    filePatternName = RemoveInvalidFileNameChars(filePatternName);

                    // Inicialize regular expression
                    Regex r = new Regex(filePatternName, RegexOptions.IgnoreCase);

                    string[] Files = Directory.GetFiles(currentDirectory, "FinanceConstantCurrencyRates" + fileTypeExtension);
                    foreach (string File in Files)
                    {
                        // Match the regular expression pattern against a text string.
                        Match m = r.Match(File);
                        sourceFileName = Path.GetFileName(File);

                        if ((m.Success == true) && (string.Compare(filePatternName, sourceFileName.Substring(0, filePatternName.Length)) == 0))
                        {

                            sourcePathAndFileName = File;

                            MatchFound = true;

                            DataFilePathTable.Rows.Add(sourceFileName, sourcePathAndFileName);
                        }
                    }
                }
                else
                {
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                if (MatchFound == false)
                {
                    Dts.Variables["User::vProcessingFileCount"].Value = 0;
                    Dts.TaskResult = (int)ScriptResults.Success;
                    return;
                }
                else
                {
                    Dts.Variables["User::vFileList"].Value = DataFilePathTable.DefaultView.Table;
                    Dts.Variables["User::vProcessingFileCount"].Value = DataFilePathTable.DefaultView.Table.Rows.Count;

                    //PrintFilesDataTable(DataFilePathTable);

                    Dts.TaskResult = (int)ScriptResults.Success;
                    return;
                }
            }

                catch (Exception e)
                {
                    // Raise event so it can be logged by SSIS
                    Dts.Events.FireError(0, "Your Script Task name", "An error occurred: " + e.Message.ToString(), "", 0);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }
            }
            public string checkDirectoryEndChar(string currentDirectory)
            {
                if (!currentDirectory.EndsWith(@"\"))
                {
                    currentDirectory = currentDirectory + @"\";
                }

                return currentDirectory;
            }

            private static void PrintFilesDataTable(System.Data.DataTable dFilePathTable)
            {
                foreach (DataRow dataRow in dFilePathTable.Rows)
                {
                    foreach (var item in dataRow.ItemArray)
                    {
                        MessageBox.Show(item.ToString());
                    }
                }
            }

            public string RemoveInvalidFileNameChars(string fileName)
            {
                char[] invalidFileChars = Path.GetInvalidFileNameChars();
                foreach (char invalidFChar in invalidFileChars)
                {
                    fileName = fileName.Replace(invalidFChar.ToString(), "");
                }
                return fileName;
            }

            #region ScriptResults declaration
            /// <summary>
            /// This enum provides a convenient shorthand within the scope of this class for setting the
            /// result of the script.
            /// 
            /// This code was generated automatically.
            /// </summary>
            enum ScriptResults
            {
                Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
                Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
            };
            #endregion

         }
     }

  }]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_32d88d309b08420c8b1e3b9d8f841be4</msb:CodeName>
		<msb:DisplayName>ST_32d88d309b08420c8b1e3b9d8f841be4</msb:DisplayName>
		<msb:ProjectId>{1D56D572-FCF6-4586-AB0B-8F854D9852A7}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_ead0af3c653d48f184492cf953a6a000.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Settings.get_Default():ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Sett" +
    "ings")]

namespace ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_99e7405f3f944a70a8621d9b5cc2bf43")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_99e7405f3f944a70a8621d9b5cc2bf43")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_99e7405f3f944a70a8621d9b5cc2bf43.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_ead0af3c653d48f184492cf953a6a000.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAFTeTFsAAAAAAAAAAOAAIiALATAAABoAAAAIAAAAAAAAtjgA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGQ4AABPAAAAAEAAAJwEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAvBgAAAAgAAAAGgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAJwEAAAAQAAAAAYAAAAcAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAIgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACY
OAAAAAAAAEgAAAACAAUASCQAAGQTAAABAAAAAAAAAKw3AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBEAAAoqrn4BAAAELR5yAQAAcNADAAACKBIAAApvEwAA
CnMUAAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIoFQAACioucwcAAAaAAwAA
BCoAABswBgCYAgAAAQAAERYKcnMAAHALcnMAAHAMGw0CKBYAAApvFwAACnJ1AABwbxgAAApvGQAA
Cm8aAAAKEwQCKBYAAApvFwAACnK9AABwbxgAAApvGQAACm8aAAAKEwUCKBYAAApvFwAACnLxAABw
bxgAAApvGQAACm8aAAAKEwYCEQQoCgAABhMEAhEGKAwAAAYTBhEGbxsAAAoJLjECKBYAAApvFwAA
CnIjAQBwbxgAAAoWjCUAAAFvHAAACgIoFgAAChZvHQAACt3VAQAAclkBAHBzHgAAChMHEQdvHwAA
CnJ3AQBwcokBAHAoIAAACm8hAAAKJhEHbx8AAApypQEAcHKJAQBwKCAAAApvIQAACiYRBCgiAAAK
OZQAAAACEQUoDAAABhMFEQUXcyMAAAoTCBEEcscBAHARBigkAAAKKCUAAAoTCRYTCitcEQkRCpoT
CxEIEQtvJgAAChELKCcAAAoMbygAAAosNxEFCBYRBW8bAAAKbykAAAooKgAACi0gEQsLFwoRB28r
AAAKGI0OAAABJRYIoiUXB6JvLAAACiYRChdYEwoRChEJjmkynCsRAigWAAAKF28dAAAK3eAAAAAG
LTECKBYAAApvFwAACnIjAQBwbxgAAAoWjCUAAAFvHAAACgIoFgAAChZvHQAACt2sAAAAAigWAAAK
bxcAAApyAQIAcG8YAAAKEQdvLQAACm8uAAAKbxwAAAoCKBYAAApvFwAACnIjAQBwbxgAAAoRB28t
AAAKby4AAApvKwAACm8vAAAKjCUAAAFvHAAACgIoFgAAChZvHQAACt5DEwwCKBYAAApvMAAAChZy
IQIAcHJNAgBwEQxvMQAACm8aAAAKKCQAAApycwAAcBZvMgAACiYCKBYAAAoXbx0AAAreACpBHAAA
AAAAAAAAAABUAgAAVAIAAEMAAAATAAABcgNydQIAcG8zAAAKLQ0DcnUCAHAoJAAAChABAyoAAAAb
MAIAVwAAAAIAABECbysAAApvNAAACgorLQZvNQAACnQuAAABbzYAAAoLFgwrEgcImm8aAAAKKDcA
AAomCBdYDAgHjmky6AZvOAAACi3L3hEGdRUAAAENCSwGCW85AAAK3CoAARAAAAIADAA5RQARAAAA
ABMwAwAuAAAAAwAAESg6AAAKChYLKxwGB5MMAxICKDsAAApycwAAcG88AAAKEAEHF1gLBwaOaTLe
AyoeAig9AAAKKgAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAqAUAACN+AAAU
BgAAdAgAACNTdHJpbmdzAAAAAIgOAAB8AgAAI1VTAAQRAAAQAAAAI0dVSUQAAAAUEQAAUAIAACNC
bG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6ATMAFgAAAQAAADQAAAAGAAAABgAAAA0AAAAEAAAAPQAA
AAIAAAASAAAAAwAAAAIAAAADAAAABAAAAAEAAAAGAAAAAQAAAAIAAAAAAJAEAQAAAAAABgANAw8G
BgCcAw8GBgBFAt0FDwCDBgAABgCGAhkFBgDwAhkFBgDRAhkFBgCDAxkFBgAtAxkFBgBGAxkFBgCd
AhkFBgC4AtQDBgByAvAFBgDCB8EECgBhAz8ECgChAT8EDgDaAIkAEgA2CAIHBgBSBcEEBgC2BSEH
BgD8AMEEBgDIBMEEBgAoAt0FBgCIBS8GBgBcBQQFEgD4AXoEEgBZAnoEEgDYAe8EBgANAg8GBgBk
AcEEBgAIAcEEBgBZCBkFCgBoBD8EFgDFBkEBFgDzAEEBBgDwA8EEBgAlAMEEDgArBYkADgDkBIkA
BgBpCFgAEgA0BwIHEgABBAIHBgAHBFgAEgBoBQIHDgBABYkADgApCIkADgAQCIkADgC9AYkACgCY
BT8EGgA8COEGGgDVB+EGBgB/BcEEAAAAAE8AAAAAAAEAAQABABAAdAcrADkAAQABAAAAEAA2BpIG
OQABAAIAAAEQANgGkgZxAAMABgACABAA2QQAAEEABAAJAAMBAACSBwAAWQAEAA4AEQDNBC4BEQCR
ATIBEQCqADYBBgaBADoBVoCCBz0BVoBxAT0BUCAAAAAAhhjQBQYAAQBQIAAAAACDGNAFBgABAFgg
AAAAAJMIhAVBAQEAhCAAAAAAkwh5AUYBAQCLIAAAAACTCIUBSwEBAJMgAAAAAJYIyQdRAQIAmiAA
AAAAhhjQBQYAAgCiIAAAAACRGNYFVgECALAgAAAAAIYA3wQGAAIAcCMAAAAAhgBuBVoBAgCQIwAA
AACRANAAXwEDAAQkAAAAAIYAQQdaAQQAPiQAAAAAhhjQBQYABQAAAAEAzgMAAAEAYggAAAEA5AAA
AAEAOAEJANAFAQARANAFBgAZANAFCgApANAFEAAxANAFEAA5ANAFEABBANAFEABJANAFEABRANAF
EABZANAFEABhANAFEABpANAFFQB5ANAFBgC5ANAFBgDZANAFGgDpANAFBgBxANAFBgDxABoBIADx
AFUIJwDBANAFLQDhANAFBgCBAIoHSQAJAcEGTwARAbgEVQAZAboDXABxAO4DYAAhAQwEZAAZAcQD
aAAJAeIHAQCJANAFEACJAPYGbQDxAGEBcwAxAZ4AeQBBAasHggCRANAFhwAhAbsHjwBBAc8GlQCR
AAEEnABZASwBowBhAX4HqAAhAfcDrAAhAWkBsgCJALIHuABpAZ4AvgCJABkIxgB5AcYAzACBAf0H
ZAAJAaAH0QCZALoAYACJAawF1wAhARcE4ACBAcIF7wChAPEHXABxAUcI9ACRATEI+QChAAcIqACp
APABBgBZAVwHBwGhAe4DYAAhAaIADAGBANAFBgAIABQAJAEIABgAKQEpAHsAnAEuAAsAdAEuABMA
fQEuABsAnAEuACMApQEuACsAzgEuADMAzgEuADsA1AEuAEMApQEuAEsA4wEuAFMAzgEuAFsAAwJD
AGMAzgFJAHsAnAFhAIMAKQFjAHMAKQGjAGsAKQGjAGMAzgE1AOUAAAEDAAEABAADAAAAiAVlAQAA
mQFqAQAAzQdvAQIAAwADAAIABAAFAAEABQAFAAIABgAHAASAAAABAAAAcxryTQAAAAAAAAEAAAAE
AAAAAAAAAAAAAAASAZUAAAAAAA0AAAAAAAAAAAAAABsBIAQAAAAABAAAAAAAAAAAAAAAEgGJAAAA
AAAEAAAAAAAAAAAAAAASAcEEAAAAAA0AAAAAAAAAAAAAABsBYgAAAAAABAAAAAAAAAAAAAAAEgHh
BgAAAAAAAAAAAQAAAEAGAAAFAAIABgAFAAAAAAAAU1RfZWFkMGFmM2M2NTNkNDhmMTg0NDkyY2Y5
NTNhNmEwMDAASW50MzIAU1RfOTllNzQwNWYzZjk0NGE3MGE4NjIxZDliNWNjMmJmNDMAPE1vZHVs
ZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5c3Rl
bS5EYXRhAG1zY29ybGliAEFkZABSZXBsYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBn
ZXRfVGFibGUAUHJpbnRGaWxlc0RhdGFUYWJsZQBkRmlsZVBhdGhUYWJsZQBWYXJpYWJsZQBJRGlz
cG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBHZXRGaWxlTmFtZQBm
aWxlTmFtZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAEdldFR5cGUAQ29tcGFyZQBG
YWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRl
ZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1
dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAENvbVZpc2libGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRy
eVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZl
cnNpb25pbmcAVG9TdHJpbmcAU3Vic3RyaW5nAE1hdGNoAFBhdGgAZ2V0X0xlbmd0aABFbmRzV2l0
aABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
VGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwA
U1RfZWFkMGFmM2M2NTNkNDhmMTg0NDkyY2Y5NTNhNmEwMDAuZGxsAGdldF9JdGVtAFN5c3RlbQBF
bnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4ARGF0YUNvbHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlv
bgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVj
dGlvbgBEYXRhUm93Q29sbGVjdGlvbgBFeGNlcHRpb24AQ3VsdHVyZUluZm8AR3JvdXAAY2hlY2tE
aXJlY3RvcnlFbmRDaGFyAGdldF9SZXNvdXJjZU1hbmFnZXIARXZlbnRzT2JqZWN0V3JhcHBlcgBG
aXJlRXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRp
YWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5D
b21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfOTllNzQwNWYzZjk0NGE3MGE4NjIx
ZDliNWNjMmJmNDMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVz
AFNUXzk5ZTc0MDVmM2Y5NDRhNzBhODYyMWQ5YjVjYzJiZjQzLlByb3BlcnRpZXMAZ2V0X1Zhcmlh
YmxlcwBHZXRGaWxlcwBTZXR0aW5ncwBTeXN0ZW0uV2luZG93cy5Gb3JtcwBnZXRfQ29sdW1ucwBT
eXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnMAU3lzdGVtLkNvbGxlY3Rpb25zAFJlZ2V4T3B0
aW9ucwBSZW1vdmVJbnZhbGlkRmlsZU5hbWVDaGFycwBHZXRJbnZhbGlkRmlsZU5hbWVDaGFycwBC
YXNlQ2xhc3MAZ2V0X1N1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9FdmVudHMARXhp
c3RzAGdldF9Sb3dzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQARGlhbG9nUmVzdWx0AHNldF9U
YXNrUmVzdWx0AGdldF9DdXJyZW50AGdldF9Db3VudABNb3ZlTmV4dABEYXRhVmlldwBnZXRfRGVm
YXVsdFZpZXcARGF0YVJvdwBTaG93AFJlZ2V4AE1lc3NhZ2VCb3gAZ2V0X0l0ZW1BcnJheQBnZXRf
QXNzZW1ibHkAY3VycmVudERpcmVjdG9yeQAAAHFTAFQAXwA5ADkAZQA3ADQAMAA1AGYAMwBmADkA
NAA0AGEANwAwAGEAOAA2ADIAMQBkADkAYgA1AGMAYwAyAGIAZgA0ADMALgBQAHIAbwBwAGUAcgB0
AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAEARyQAUABhAGMAawBhAGcAZQA6ADoAcABDAG8A
bgBzAHQAYQBuAHQAQwB1AHIAcgBlAG4AYwB5AEYAaQBsAGUAUABhAHQAaAAAMyQAUABhAGMAawBh
AGcAZQA6ADoAcABGAGkAbABlAFAAcgBlAGYAaQB4AE4AYQBtAGUAADFVAHMAZQByADoAOgB2AEYA
aQBsAGUAVAB5AHAAZQBFAHgAdABlAG4AcwBpAG8AbgAANVUAcwBlAHIAOgA6AHYAUAByAG8AYwBl
AHMAcwBpAG4AZwBGAGkAbABlAEMAbwB1AG4AdAAAHWQARgBpAGwAZQBQAGEAdABoAFQAYQBiAGwA
ZQAAEUYAaQBsAGUATgBhAG0AZQAAG1MAeQBzAHQAZQBtAC4AUwB0AHIAaQBuAGcAACFGAGkAbABl
AEYAdQBsAGwAUABhAHQAaABOAGEAbQBlAAA5RgBpAG4AYQBuAGMAZQBDAG8AbgBzAHQAYQBuAHQA
QwB1AHIAcgBlAG4AYwB5AFIAYQB0AGUAcwAAH1UAcwBlAHIAOgA6AHYARgBpAGwAZQBMAGkAcwB0
AAArWQBvAHUAcgAgAFMAYwByAGkAcAB0ACAAVABhAHMAawAgAG4AYQBtAGUAACdBAG4AIABlAHIA
cgBvAHIAIABvAGMAYwB1AHIAcgBlAGQAOgAgAAADXAAAAAAAojgJlrZC4EygOIfwrZoARQAEIAEB
CAMgAAEFIAEBEREEIAEBDgQgAQECBSABARFpBgABEnkRfQUgABKAgQcgAgEOEoCBEwcNAg4OCA4O
DhJFEkkdDggOEk0FIAASgIUFIAASgIkGIAESgI0cAyAAHAMgAA4DIAAIBCABARwFIAASgJkFAAES
eQ4IIAISgJ0OEnkEAAECDgcgAgEOEYClBQACDg4OBgACHQ4ODgYgARKAqQ4EAAEODgMgAAIFIAIO
CAgFAAIIDg4FIAASgLUHIAESgLkdHAUgABKAvQQgABJFBSAAEoDFCCAFAggODg4IBCABAg4JBwQS
UR0cCBJVBCAAElEEIAAdHAYAARGAzQ4GBwMdAwgDBAAAHQMFIAIODg4It3pcVhk04IkIiYRdzYCA
zJEEAAAAAAQBAAAAAwYSYQMGEmUDBhIQAgYIAwYRGAQAABJhBAAAEmUFAAEBEmUEAAASEAMAAAEE
IAEODgUAAQESRQQIABJhBAgAEmUECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlv
blRocm93cwEIAQACAAAAAAAoAQAjU1RfOTllNzQwNWYzZjk0NGE3MGE4NjIxZDliNWNjMmJmNDMA
AAUBAAAAAA4BAAlNaWNyb3NvZnQAAB8BABpDb3B5cmlnaHQgQCBNaWNyb3NvZnQgMjAxNgAASQEA
Gi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVU
IEZyYW1ld29yayA0LjUAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3Vy
Y2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVi
bGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNv
dXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAjDgAAAAAAAAAAAAApjgAAAAgAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAJg4AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8l
ACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAA+BAAAAAAAAAAAAAA+BDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEA8k1zGgAAAQDyTXMaPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEngMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAegMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAADQACgABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAATQBpAGMAcgBvAHMAbwBmAHQAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBp
AHAAdABpAG8AbgAAAAAAUwBUAF8AOQA5AGUANwA0ADAANQBmADMAZgA5ADQANABhADcAMABhADgA
NgAyADEAZAA5AGIANQBjAGMAMgBiAGYANAAzAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBu
AAAAAAAxAC4AMAAuADYANwA3ADEALgAxADkAOQA1ADQAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEA
bABOAGEAbQBlAAAAUwBUAF8AZQBhAGQAMABhAGYAMwBjADYANQAzAGQANAA4AGYAMQA4ADQANAA5
ADIAYwBmADkANQAzAGEANgBhADAAMAAwAC4AZABsAGwAAABaABsAAQBMAGUAZwBhAGwAQwBvAHAA
eQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABNAGkAYwByAG8AcwBvAGYAdAAg
ADIAMAAxADYAAAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAA
eAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfAGUAYQBkADAAYQBm
ADMAYwA2ADUAMwBkADQAOABmADEAOAA0ADQAOQAyAGMAZgA5ADUAMwBhADYAYQAwADAAMAAuAGQA
bABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA5ADkAZQA3ADQAMAA1
AGYAMwBmADkANAA0AGEANwAwAGEAOAA2ADIAMQBkADkAYgA1AGMAYwAyAGIAZgA0ADMAAABCAA8A
AQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANwA3ADEALgAxADkAOQA1
ADQAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYA
NwA3ADEALgAxADkAOQA1ADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAuDgAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:DelayValidation="True"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{BC5230E9-8813-4F02-835E-ED7A616829FA}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Loop Through Folder and Get Appropirate File">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.ForEachADOEnumerator"
            DTS:DTSID="{9D02C327-51C3-401B-956E-F62AA580F5A5}"
            DTS:ObjectName="{25261C6D-2B25-4E23-83EA-8845FD38A5A4}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::vFileList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination"
              DTS:CreationName="Microsoft.Pipeline"
              DTS:DelayValidation="True"
              DTS:Description="Data Flow Task"
              DTS:DTSID="{81B9A3D0-706B-43B4-A789-FA6605AF4868}"
              DTS:ExecutableType="Microsoft.Pipeline"
              DTS:LocaleID="-1"
              DTS:MaxErrorCount="5"
              DTS:ObjectName="DFT Load Source Excel File to Destination"
              DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <pipeline
                  version="1">
                  <components>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Add JobInstance Column"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[JobInstanceID]"
                              dataType="i8"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[JobInstanceID]"
                              name="JobInstanceID"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::vCurJobInstanceID]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::vCurJobInstanceID]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[RowNumber]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[RowNumber]"
                              name="RowNumber"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">1</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">1</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;8"
                      description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                      name="Concatenate Rejected Columns"
                      version="10">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Stores the source code of the component"
                          isArray="true"
                          name="SourceCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="30">
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_85d61d00bc4f45c3ae19dc27da6e7c9d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("SC_85d61d00bc4f45c3ae19dc27da6e7c9d")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Pipeline;
using System.Text;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[SSISScriptComponentEntryPoint]
public class ScriptMain : UserComponent
{
    private int ColumnCount;
    private ColumnClass[] ColumnNameArray;
    private PipelineBuffer inputBuffer;


    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    private class ColumnClass
    {
        public int Index;
        public string Name;
    }

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */



        ColumnCount = ComponentMetaData.InputCollection[0].InputColumnCollection.Count;
        ColumnNameArray = new ColumnClass[ColumnCount];

        int[] ColumnIndexes = GetColumnIndexes(ComponentMetaData.InputCollection[0].ID);
        int columnIndex = 0;

        foreach (IDTSInputColumn100 item in ComponentMetaData.InputCollection[0].InputColumnCollection)
        {
            ColumnNameArray[columnIndex] = new ColumnClass();
            ColumnNameArray[columnIndex].Name = Convert.ToString(item.Name);
            ColumnNameArray[columnIndex].Index = ColumnIndexes[ComponentMetaData.InputCollection[0].InputColumnCollection.GetObjectIndexByID(item.ID)];
            columnIndex++;
        }

        Array.Sort(
            ColumnNameArray,
            delegate(ColumnClass column1, ColumnClass column2)
            { return column1.Index.CompareTo(column2.Index); }
        );

    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>

    public override void ProcessInput(int InputID, Microsoft.SqlServer.Dts.Pipeline.PipelineBuffer Buffer)
    {
        inputBuffer = Buffer;

        base.ProcessInput(InputID, Buffer);
    }


    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        StringBuilder RawDataTEXT = new StringBuilder(ColumnCount);

        for (int columnIndex = 0; columnIndex < ColumnCount; columnIndex++)
        {
            RawDataTEXT.Append(ColumnNameArray[columnIndex].Name + "=");
            RawDataTEXT.Append(Convert.ToString(inputBuffer[ColumnNameArray[columnIndex].Index]));
            RawDataTEXT.Append(";");
        }

        Row.RawDataTEXT.AddBlobData(System.Text.Encoding.GetEncoding(1252).GetBytes(RawDataTEXT.ToString()));

    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_85d61d00bc4f45c3ae19dc27da6e7c9d.csproj]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{FB578575-549C-4EF3-9DE6-510E3B65E42F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_85d61d00bc4f45c3ae19dc27da6e7c9d</RootNamespace>
    <AssemblyName>SC_C044E150528741B38924326874DF6332</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 EODErrorCode
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
    }
    public bool EODErrorCode_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public Int32 EODErrorColumn
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[1]);
        }
    }
    public bool EODErrorColumn_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String EODErrorDescription
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
    }
    public bool EODErrorDescription_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String EODComponentName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
    }
    public bool EODComponentName_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String EODColumnName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
    }
    public bool EODColumnName_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public BlobColumn RawDataTEXT
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[5]];
        }
        set
        {
            this[5] = value;
        }
    }
    public bool RawDataTEXT_IsNull
    {
        get
        {
            return IsNull(5);
        }
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Project]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_85d61d00bc4f45c3ae19dc27da6e7c9d</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_85d61d00bc4f45c3ae19dc27da6e7c9d</msb:DisplayName>
		<msb:ProjectId>{4E4C5209-B2D8-4702-8FCB-3A85BF9E8D3A}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.csproj"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Settings.get_Default():SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Sett" +
    "ings")]

namespace SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_85d61d00bc4f45c3ae19dc27da6e7c9d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Stores the binary representation of the component"
                          isArray="true"
                          name="BinaryCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="2">
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_C044E150528741B38924326874DF6332.dll]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAEBzOlsAAAAAAAAAAOAAIiALATAAABwAAAAIAAAAAAAAZjsA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAABQ7AABPAAAAAEAAAGwEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAbBsAAAAgAAAAHAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAGwEAAAAQAAAAAYAAAAeAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABI
OwAAAAAAAEgAAAACAAUATCQAABAWAAABAAAAAAAAAFw6AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBAA3AQAAAQAAEQIoEAAACgICKBEAAApvEgAAChaMIgAA
AW8TAAAKbxQAAApvFQAACn0BAAAEAgJ7AQAABI0JAAACfQIAAAQCAigRAAAKbxIAAAoWjCIAAAFv
EwAACm8WAAAKKBcAAAoKFgsCKBEAAApvEgAAChaMIgAAAW8TAAAKbxQAAApvGAAACgwraghvGQAA
CnQQAAABDQJ7AgAABAdzJAAABqICewIAAAQHmglvGgAACigbAAAKfQwAAAQCewIAAAQHmgYCKBEA
AApvEgAAChaMIgAAAW8TAAAKbxQAAAoJbxwAAApvHQAACpR9CwAABAcXWAsIbx4AAAotjt4UCHUR
AAABEwQRBCwHEQRvHwAACtwCewIAAAR+DgAABCUtFyZ+DQAABP4GJwAABnMgAAAKJYAOAAAEKAEA
ACsqAAEQAAACAIIAdvgAFAAAAAAeAigiAAAKKkICBH0DAAAEAgMEKCMAAAoqAAAAEzAEAIwAAAAC
AAARAnsBAAAEcyQAAAoKFgsrUgYCewIAAAQHmnsMAAAEcgEAAHAoJQAACm8mAAAKJgYCewMAAAQC
ewIAAAQHmnsLAAAEbycAAAooKAAACm8mAAAKJgZyBQAAcG8mAAAKJgcXWAsHAnsBAAAEMqUDbxEA
AAYg5AQAACgpAAAKBm8qAAAKbysAAApvLAAACioeAigXAAAGKioCAwQFKC0AAAoqUgJ7LgAACgJ7
LwAAChaUbzAAAAoqIgIWKDEAAAoqUgJ7LgAACgJ7LwAACheUbzAAAAoqIgIXKDEAAAoqUgJ7LgAA
CgJ7LwAAChiUbzIAAAoqIgIYKDEAAAoqUgJ7LgAACgJ7LwAAChmUbzIAAAoqIgIZKDEAAAoqUgJ7
LgAACgJ7LwAAChqUbzIAAAoqIgIaKDEAAAoqZgJ7LgAACgJ7LwAAChuUbycAAAp0GAAAASomAhsD
KDMAAAoqIgIbKDEAAAoqWgMsCAIbKDQAAAoqcgkAAHBzNQAACnoeAig2AAAKKh4CKDcAAAoqfgIo
OAAACgICcxsAAAZ9BAAABAICcxwAAAZ9BQAABCqSBHKmAABwGm85AAAKLBUCBQIDKBcAAAoOBHMG
AAAGbxkAAAYqSisHAgNvGgAABgNvFQAABi3xKgYqOgIoOgAACgIDfQYAAAQqOgIoOgAACgIDfQcA
AAQqHgIoOgAACiqufggAAAQtHnK2AABw0AcAAAIoOwAACm88AAAKcz0AAAqACAAABH4IAAAEKhp+
CQAABCoeAoAJAAAEKhp+CgAABCoeAig+AAAKKi5zIgAABoAKAAAEKi5zJgAABoANAAAEKkoDfAsA
AAQEewsAAAQoPwAACioAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAADgIAAAj
fgAApAgAALAJAAAjU3RyaW5ncwAAAABUEgAAKAEAACNVUwB8EwAAEAAAACNHVUlEAAAAjBMAAIQC
AAAjQmxvYgAAAAAAAAACAAABVxWiCQkLAAAA+gEzABYAAAEAAAAtAAAACgAAAA4AAAAnAAAAEwAA
AD8AAAARAAAAAgAAAAMAAAAPAAAAEgAAAAEAAAABAAAABQAAAAEAAAACAAAAAQAAAAAAcQQBAAAA
AAAGAFMDXAcGAOcDXAcGAJ8CSQcPANAHAAAGAMwCzQUGADYDzQUGABcDzQUGAM4DzQUGAHMDzQUG
AIwDzQUGAOMCzQUGAP4CLgQKAKcD5AEOAL0G5AEGACIHVggSABoA+QYGAHoBZwUGAKIGXwkGAIgI
ZwUGAGcCXAcGAIoAZwUKAMwG5AEKAGYG5AEOAIUF5AEKAMUI5AEGAIICSQcGAOkGfAcGAFoGuAUW
AFICWwQWALMCWwQWADICowUSAAEA+QYSAEoA+QYGAMYAZwUSAGEA+QYSAC0A+QYGABQJZwUGAJoJ
ZwUGAFQEZwUGACUEXwkGAA0GZwUGAD8GZwUGAAUCZwUGAIYBZwUGAKQJzQUAAAAA2AAAAAAAAQAB
AAEAEAB6BQAAEAABAAEAAQAQALAGAABZAAQABgABABAApwgAAGUABAAXAAEAEABpCAAATQAGABsA
AQAQAA4IAABNAAcAHAAAABAAgwffB00ACAAdAAABEABGCN8HfQAKACEAAwAQAHUIAABNAAsAJAAD
IRAATgEAAE0ADQAlAAEA6wgOAQEAkAkRAQEA2QbFAAYAaQgWAQYADggaAQEAtQgeAQEAtQgeAREA
bgUiAREAIgImAREAWQEqAQYAigkOAQYA3wEuATYA1AAxARYAbgA1AVAgAAAAAMYABQQGAAEApCEA
AAAAxgAQBAYAAQCsIQAAAADGAEkJhQABAMAhAAAAAMYAawk9AQMAWCIAAAAAhhg8BwYABABgIgAA
AACGGDwHuwAEAGsiAAAAAIYIaQFAAAcAgCIAAAAAhgjHBGEABwCJIgAAAACGCJAFQAAHAJ4iAAAA
AIYIFAVhAAcApyIAAAAAhggnBlMABwC8IgAAAACGCC4FYQAHAMUiAAAAAIYIxQFTAAcA2iIAAAAA
hgj4BGEABwDjIgAAAACGCLMBUwAHAPgiAAAAAIYI3wRhAAcAASMAAAAAhggDAUMBBwAbIwAAAACG
CBMBSAEHACUjAAAAAIYImQRhAAgALiMAAAAAhgiwBE4BCABFIwAAAACGAIIJYQAJAE0jAAAAAIYA
jwhhAAkAVSMAAAAAhhg8BwYACQB1IwAAAADGAEkJUwEJAJojAAAAAMYBQgk9AQ0ArSMAAAAAxgFr
CT0BDgCvIwAAAACGGDwHXQEPAL4jAAAAAIYYPAddARAAzSMAAAAAgxg8BwYAEQDVIwAAAACTCOUG
YwERAAEkAAAAAJMICgJoAREACCQAAAAAkwgWAm0BEQAQJAAAAACWCJsIcwESABckAAAAAIYYPAcG
ABIAHyQAAAAAkRhCB3gBEgDNIwAAAACGGDwHBgASACskAAAAAJEYQgd4ARIAzSMAAAAAhhg8BwYA
EgA3JAAAAACDAHcAfAESAAAAAQDoAAAAAgDeBgAAAQCGCQAAAQDeBgAAAgAhCAAAAwB0BgAAAQAc
BAAAAQAcBAAAAQDoAAAAAgDaAQAAAwDeBgAABAB0BgAAAQDeBgAAAQCGCQAAAQDLCAAAAQDLCAAA
AQAcBAAAAQCXAAAAAgDMAAkAPAcBABEAPAcGABkAPAcKACkAPAcQADEAPAcQADkAPAcQAEEAPAcQ
AEkAPAcQAFEAPAcQAFkAPAcQAGEAPAcQAGkAPAcGAKEAPAcGANEAPAcGAPEAPAcVAMkABQQGAMkA
IwEnAAEB+QUtAAkBVQUzABkB3wU6ACEB4QhAABkB4QBAAMkANQhEACEBLgdKAHkA1QhPAIEAqgFT
ACkBSARXAIEA4QBAACEB8ABcAHkAVglhAIkASgIGAAwAPAdsADEBHAlyAMkAEAQGAMkASQmFAJEA
PAcBADkBgQiSAJEAUgGYAHEAVQWeACkBSASjAEEBIgSoAJkASARTAEEBGAivAMEAOQG1ALEAPAe7
ALEA3gbFALEAIQjJAHEAwwBcALEARgXNAHEAUQTSALEAXgXXALEATQUBAEkBPAcQALEAgglhALEA
jwhhAMkAPAcGADkBTwjdAJkAPAcGAFkBmAHlAFkBoAnuANkAPAf0APkAPAcGABEBUAZcAC4ACwCk
AS4AEwCtAS4AGwDMAS4AIwDVAS4AKwD+AS4AMwD+AS4AOwAEAi4AQwDVAS4ASwATAi4AUwD+AS4A
WwAzAkMAYwB9AuMAcwB9AkEBawB9AkMBawB9AqkBewDMAckBewDMARsAjAADAAEABwANAAgADwAA
AG0BhAEAAMsEiAEAAJQFhAEAABgFiAEAACsGjAEAADIFiAEAAMkBjAEAAPwEiAEAALcBjAEAAOME
iAEAABcBkAEAALQEiAEAAOkGlQEAACoCmgEAAJ8InwECAAcAAwACAAgABQACAAkABwACAAoACQAC
AAsACwACAAwADQACAA0ADwACAA4AEQACAA8AEwACABAAFQACABEAFwABABIAFwACABMAGQABABQA
GQACAB4AGwACAB8AHQABACAAHQACACEAHwBlAASAAAABAAAAAAAAAAAAAAAAAJ8AAAAEAAAAAAAA
AAAAAAD8AEUBAAAAAA0AAAAAAAAAAAAAAAUB9wgAAAAADQAAAAAAAAAAAAAABQEhCQAAAAANAAAA
AAAAAAAAAAAFAX4GAAAAAAQAAAAAAAAAAAAAAPwAZwUAAAAAAAAAAAEAAACNBwAACQACAAoAAgBD
AIAAAAAASURUU0NvbXBvbmVudE1ldGFEYXRhMTAwAElEVFNJbnB1dENvbHVtbjEwMABJRFRTSW5w
dXRDb2x1bW5Db2xsZWN0aW9uMTAwAElEVFNJbnB1dENvbGxlY3Rpb24xMDAASURUU0lucHV0MTAw
ADw+OV9fNF8wADxQcmVFeGVjdXRlPmJfXzRfMABDb21wYXJpc29uYDEAY29sdW1uMQBTQ19DMDQ0
RTE1MDUyODc0MUIzODkyNDMyNjg3NERGNjMzMgBHZXRJbnQzMgBjb2x1bW4yADw+OQA8TW9kdWxl
PgBnZXRfSUQASW5wdXRJRABHZXRPYmplY3RJbmRleEJ5SUQAZ2V0X1Jhd0RhdGFURVhUAHNldF9S
YXdEYXRhVEVYVABnZXRfQ29tcG9uZW50TWV0YURhdGEAQWRkQmxvYkRhdGEAbXNjb3JsaWIAPD5j
AEFwcGVuZABkZWZhdWx0SW5zdGFuY2UAZ2V0X0VPREVycm9yQ29kZQBJRGlzcG9zYWJsZQBSdW50
aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBnZXRfTmFtZQBnZXRfRU9EQ29sdW1uTmFt
ZQBnZXRfRU9EQ29tcG9uZW50TmFtZQBJbnB1dE5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UGlwZWxpbmUAVHlwZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxl
ckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2Fi
bGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1
dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFz
c2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRl
AENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRl
AEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50
QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0
dHJpYnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAHZhbHVlAEdldEVuY29kaW5nAFN5c3RlbS5S
dW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAR2V0U3RyaW5nAFN5c3RlbS5Db21wb25lbnRNb2Rl
bABTQ19DMDQ0RTE1MDUyODc0MUIzODkyNDMyNjg3NERGNjMzMi5kbGwAZ2V0X1Jhd0RhdGFURVhU
X0lzTnVsbABzZXRfUmF3RGF0YVRFWFRfSXNOdWxsAGdldF9FT0RFcnJvckNvZGVfSXNOdWxsAGdl
dF9FT0RDb2x1bW5OYW1lX0lzTnVsbABnZXRfRU9EQ29tcG9uZW50TmFtZV9Jc051bGwAZ2V0X0VP
REVycm9yQ29sdW1uX0lzTnVsbABnZXRfRU9ERXJyb3JEZXNjcmlwdGlvbl9Jc051bGwAU2V0TnVs
bABnZXRfSXRlbQBzZXRfSXRlbQBTeXN0ZW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBCbG9iQ29s
dW1uAGdldF9FT0RFcnJvckNvbHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFs
aXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBnZXRfSW5wdXRDb2x1bW5Db2xsZWN0aW9uAGdldF9J
bnB1dENvbGxlY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbgBnZXRfRU9ERXJyb3JEZXNj
cmlwdGlvbgBTdHJpbmdDb21wYXJpc29uAENvbXBhcmVUbwBDdWx0dXJlSW5mbwBPdXRwdXROYW1l
TWFwAE91dHB1dE1hcABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1BpcGVsaW5lV3JhcABTdHJpbmdC
dWlsZGVyAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1ZmZlcgBTY3JpcHRCdWZmZXIAaW5wdXRCdWZm
ZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5X
cmFwcGVyAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFn
bm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMA
U0NfODVkNjFkMDBiYzRmNDVjM2FlMTlkYzI3ZGE2ZTdjOWQuUHJvcGVydGllcy5SZXNvdXJjZXMu
cmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNDXzg1ZDYxZDAwYmM0ZjQ1YzNhZTE5ZGMyN2RhNmU3
YzlkLlByb3BlcnRpZXMAVmFyaWFibGVzAEdldEJ5dGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0
Q29sdW1uSW5kZXhlcwBTZXR0aW5ncwBFcXVhbHMAU3lzdGVtLkNvbGxlY3Rpb25zAENvbm5lY3Rp
b25zAENvbHVtbkNsYXNzAENvbmNhdABPYmplY3QARW5kT2ZSb3dzZXQAZ2V0X0RlZmF1bHQAVXNl
ckNvbXBvbmVudABQYXJlbnRDb21wb25lbnQAU2NyaXB0Q29tcG9uZW50AGdldF9DdXJyZW50AGdl
dF9Db3VudABDb2x1bW5Db3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AENvbnZlcnQA
U29ydABNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9zdABJbnB1dDBfUHJvY2Vzc0lucHV0
AE1vdmVOZXh0AFN5c3RlbS5UZXh0AElucHV0MF9Qcm9jZXNzSW5wdXRSb3cATmV4dFJvdwBJbmRl
eABDb2x1bW5OYW1lQXJyYXkAZ2V0X0Fzc2VtYmx5AAAAAAADPQAAAzsAAICbSQBzAE4AdQBsAGwA
IABwAHIAbwBwAGUAcgB0AHkAIABjAGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBh
AGwAcwBlAC4AIABBAHMAcwBpAGcAbgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMA
bwBsAHUAbQBuACAAaQBuAHMAdABlAGEAZAAuAAAPSQBuAHAAdQB0ACAAMAAAcVMAQwBfADgANQBk
ADYAMQBkADAAMABiAGMANABmADQANQBjADMAYQBlADEAOQBkAGMAMgA3AGQAYQA2AGUANwBjADkA
ZAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAF8CnQ2qIyUqsLVd6
BI3bQAAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERdQsHBR0ICBI9EkESRQUgABKAgQUgABKAhQYg
ARKAjRwFIAASgJEDIAAIBSABHQgIBCAAEj0DIAAcAyAADgQAAQ4OBCABCAgDIAACBhUSVQESJAUg
AgEcGA0QAQIBHR4AFRJVAR4ABAoBEiQGIAIBCBI5BQcCEkkIBQACDg4OBSABEkkOBCABHAgEAAEO
HAYAARKAoQgFIAEdBQ4FIAEBHQUJIAMBEjkdCBJdAwYSOQMGHQgEIAECCAQgAQ4IBSACAQgcByAC
Ag4RgKkIAAESgK0RgLEFIAASgLUHIAIBDhKAtQi3elxWGTTgiQiJhF3NgIDMkQIGCAQGHRIkAwYS
FAMGEhgDBhJlAwYSbQMGEnEDBhIgAgYOAwYSKAcGFRJVARIkBSABARIMBCAAEmEFIAEBEmEEIAEB
AgkgBAEIDhI5El0FIAEBEmUEAAASbQQAABJxBQABARJxBAAAEiADAAABByACCBIkEiQDKAAIAygA
AgMoAA4EKAASYQQIABJtBAgAEnEECAASIAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlv
blRocm93cwEIAQACAAAAAAAoAQAjU0NfODVkNjFkMDBiYzRmNDVjM2FlMTlkYzI3ZGE2ZTdjOWQA
AAUBAAAAAA4BAAlNaWNyb3NvZnQAAB8BABpDb3B5cmlnaHQgQCBNaWNyb3NvZnQgMjAxNgAASQEA
Gi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVU
IEZyYW1ld29yayA0LjUEAQAAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJl
c291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWws
IFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1l
UmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAADw7AAAAAAAAAAAAAFY7AAAAIAAAAAAA
AAAAAAAAAAAAAAAAAAAAAABIOwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAA
AAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WEAAABAEAAAAAAAAAAAAABAENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsARwAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABMAwAAAQAwADAAMAAwADAA
NABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAANAAKAAEAQwBvAG0AcABhAG4AeQBO
AGEAbQBlAAAAAABNAGkAYwByAG8AcwBvAGYAdAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkA
cAB0AGkAbwBuAAAAAABTAEMAXwA4ADUAZAA2ADEAZAAwADAAYgBjADQAZgA0ADUAYwAzAGEAZQAx
ADkAZABjADIANwBkAGEANgBlADcAYwA5AGQAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4A
AAAAADEALgAwAC4AMAAuADAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBf
AEMAMAA0ADQARQAxADUAMAA1ADIAOAA3ADQAMQBCADMAOAA5ADIANAAzADIANgA4ADcANABEAEYA
NgAzADMAMgAuAGQAbABsAAAAWgAbAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBv
AHAAeQByAGkAZwBoAHQAIABAACAATQBpAGMAcgBvAHMAbwBmAHQAIAAyADAAMQA2AAAAAAAqAAEA
AQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBu
AGEAbABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwBDADAANAA0AEUAMQA1ADAANQAyADgANwA0ADEA
QgAzADgAOQAyADQAMwAyADYAOAA3ADQARABGADYAMwAzADIALgBkAGwAbAAAAGgAJAABAFAAcgBv
AGQAdQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AOAA1AGQANgAxAGQAMAAwAGIAYwA0AGYANAA1AGMA
MwBhAGUAMQA5AGQAYwAyADcAZABhADYAZQA3AGMAOQBkAAAANAAIAAEAUAByAG8AZAB1AGMAdABW
AGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYA
ZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAABoOwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                          name="VSTAProjectName"
                          typeConverter="NOTBROWSABLE">SC_c044e150528741b38924326874df6332</property>
                        <property
                          dataType="System.String"
                          description="Specifies the programming language used by the script."
                          name="ScriptLanguage"
                          typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read-only variables."
                          name="ReadOnlyVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read/write variables."
                          name="ReadWriteVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="List of breakpoints present on the script."
                          isArray="true"
                          name="BreakpointCollection"
                          typeConverter="NOTBROWSABLE">
                          <arrayElements
                            arrayElementCount="0" />
                        </property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataChecksum"
                          typeConverter="NOTBROWSABLE">9e9152f2114713771ef9ee9335d9d931</property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataShaChecksum"
                          typeConverter="NOTBROWSABLE">cb3ccb5272f9f925679b45bc3fddd3b50e2a8339</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataChecksum140"
                          typeConverter="NOTBROWSABLE">89</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0]"
                          hasSideEffects="true"
                          name="Input 0">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorCode]"
                              cachedDataType="i4"
                              cachedName="EOD_ErrorCode"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorCode]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="EOD_ErrorColumn"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorColumn]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorDescription]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="500"
                              cachedName="EOD_ErrorDescription"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorDescription]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ComponentName]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="100"
                              cachedName="EOD_ComponentName"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ComponentName]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ColumnName]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="100"
                              cachedName="EOD_ColumnName"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ColumnName]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0]"
                          name="Output 0"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0].Columns[RawDataTEXT]"
                              codePage="1252"
                              dataType="text"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0].Columns[RawDataTEXT]"
                              name="RawDataTEXT" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion"
                      componentClassID="Microsoft.DataConvert"
                      contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Data Conversion"
                      name="Data Conversion"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input]"
                          name="Data Conversion Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[constant_currency_base]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_currency_base"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_base]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[constant_currency]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_currency"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[constant_exchange_rate_type]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_exchange_rate_type"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exchange_rate_type]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output]"
                          exclusionGroup="1"
                          name="Data Conversion Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency_base]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency_base]"
                              name="C_constant_currency_base"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_base]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency]"
                              name="C_constant_currency"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_exchange_rate_type]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_exchange_rate_type]"
                              name="C_constant_exchange_rate_type"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exchange_rate_type]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Data Conversion Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Destination SFDC Future_Products Table"
                      componentClassID="Microsoft.RowCount"
                      contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="SSISOps : DON'T CHANGE PREFIX. "
                      name="DEST Destination SFDC Future_Products Table">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the variable to hold the row count."
                          name="VariableName">User::varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_1</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Destination SFDC Future_Products Table.Inputs[Row Count Input 1]"
                          hasSideEffects="true"
                          name="Row Count Input 1">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Destination SFDC Future_Products Table.Outputs[Row Count Output 1]"
                          name="Row Count Output 1"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Destination SFDC Future_Products Table.Inputs[Row Count Input 1]">
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Insert Redirected or Rejected Rows to Exception Table"
                      componentClassID="Microsoft.RowCount"
                      contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="SSISOps : DON'T CHANGE PREFIX. "
                      name="DEST Insert Redirected or Rejected Rows to Exception Table">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the variable to hold the row count."
                          name="VariableName">User::varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_3</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Insert Redirected or Rejected Rows to Exception Table.Inputs[Row Count Input 1]"
                          hasSideEffects="true"
                          name="Row Count Input 1">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Insert Redirected or Rejected Rows to Exception Table.Outputs[Row Count Output 1]"
                          name="Row Count Output 1"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Insert Redirected or Rejected Rows to Exception Table.Inputs[Row Count Input 1]">
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Destination ConstantCurrencyRates"
                      usesDispositions="true"
                      validateExternalMetadata="False"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset"></property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable">User::vSchemaTableName</property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">4</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">ROWS_PER_BATCH = 5000</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Connections[OleDbConnection]"
                          connectionManagerID="{20B53271-7BD0-4DC3-9BA8-E74FB20FFC0D}:external"
                          connectionManagerRefId="Project.ConnectionManagers[OLEDB_Target]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="RedirectRow"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_effective_date]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_effective_date"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantEffectiveDate]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_effective_date]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_currency_rate]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_currency_rate"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantCurrencyRate]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_rate_factor]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_rate_factor"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantRateFactor]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_rate_factor]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_exp_base_currency]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_exp_base_currency"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantExpBaseCurrency]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exp_base_currency]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_currency_rate_approved]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_currency_rate_approved"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantCurrencyRateApproved]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate_approved]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_approval_date]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_approval_date"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantApprovalDate]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_approval_date]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[C_constant_currency_base]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="C_constant_currency_base"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantCurrencyBase]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency_base]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[C_constant_currency]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="C_constant_currency"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantCurrency]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[C_constant_exchange_rate_type]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="C_constant_exchange_rate_type"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantExchangeRateType]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_exchange_rate_type]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[LoadTimeStamp]"
                              cachedDataType="dbTimeStamp"
                              cachedName="LoadTimeStamp"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[LoadTimeStamp]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[LoadTimeStamp]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantCurrencyBase]"
                              codePage="1252"
                              dataType="str"
                              length="3"
                              name="ConstantCurrencyBase" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantCurrency]"
                              codePage="1252"
                              dataType="str"
                              length="3"
                              name="ConstantCurrency" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantExchangeRateType]"
                              codePage="1252"
                              dataType="str"
                              length="3"
                              name="ConstantExchangeRateType" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantEffectiveDate]"
                              dataType="dbTimeStamp"
                              name="ConstantEffectiveDate" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantCurrencyRate]"
                              dataType="r8"
                              name="ConstantCurrencyRate" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantRateFactor]"
                              dataType="i4"
                              name="ConstantRateFactor" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantExpBaseCurrency]"
                              dataType="i4"
                              name="ConstantExpBaseCurrency" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantCurrencyRateApproved]"
                              dataType="i4"
                              name="ConstantCurrencyRateApproved" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[ConstantApprovalDate]"
                              dataType="dbTimeStamp"
                              name="ConstantApprovalDate" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].ExternalColumns[LoadTimeStamp]"
                              dataType="dbTimeStamp"
                              name="LoadTimeStamp" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source"
                      componentClassID="Microsoft.ExcelSource"
                      contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Excel Source"
                      name="Excel Source"
                      usesDispositions="true"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">Sheet1$</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">0</property>
                        <property
                          dataType="System.String"
                          description="The mapping from parameters in the SQL command to variables."
                          name="ParameterMapping"></property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[Excel Connection Manager]"
                          connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output]"
                          name="Excel Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_base]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_currency_base]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_base]"
                              name="constant_currency_base"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_currency]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency]"
                              name="constant_currency"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exchange_rate_type]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_exchange_rate_type]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exchange_rate_type]"
                              name="constant_exchange_rate_type"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_effective_date]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_effective_date]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_effective_date]"
                              name="constant_effective_date"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_currency_rate]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate]"
                              name="constant_currency_rate"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_rate_factor]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_rate_factor]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_rate_factor]"
                              name="constant_rate_factor"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exp_base_currency]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_exp_base_currency]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exp_base_currency]"
                              name="constant_exp_base_currency"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate_approved]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_currency_rate_approved]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate_approved]"
                              name="constant_currency_rate_approved"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_approval_date]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_approval_date]"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_approval_date]"
                              name="constant_approval_date"
                              truncationRowDisposition="FailComponent" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_currency_base]"
                              dataType="wstr"
                              length="255"
                              name="constant_currency_base" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_currency]"
                              dataType="wstr"
                              length="255"
                              name="constant_currency" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_exchange_rate_type]"
                              dataType="wstr"
                              length="255"
                              name="constant_exchange_rate_type" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_effective_date]"
                              dataType="wstr"
                              length="255"
                              name="constant_effective_date" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_currency_rate]"
                              dataType="wstr"
                              length="255"
                              name="constant_currency_rate" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_rate_factor]"
                              dataType="wstr"
                              length="255"
                              name="constant_rate_factor" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_exp_base_currency]"
                              dataType="wstr"
                              length="255"
                              name="constant_exp_base_currency" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_currency_rate_approved]"
                              dataType="wstr"
                              length="255"
                              name="constant_currency_rate_approved" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].ExternalColumns[constant_approval_date]"
                              dataType="wstr"
                              length="255"
                              name="constant_approval_date" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output]"
                          isErrorOut="true"
                          name="Excel Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency_base]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency_base]"
                              name="constant_currency_base" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency]"
                              name="constant_currency" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_exchange_rate_type]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_exchange_rate_type]"
                              name="constant_exchange_rate_type" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_effective_date]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_effective_date]"
                              name="constant_effective_date" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency_rate]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency_rate]"
                              name="constant_currency_rate" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_rate_factor]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_rate_factor]"
                              name="constant_rate_factor" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_exp_base_currency]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_exp_base_currency]"
                              name="constant_exp_base_currency" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency_rate_approved]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency_rate_approved]"
                              name="constant_currency_rate_approved" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_approval_date]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_approval_date]"
                              name="constant_approval_date" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Get AuditDateTime"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDInit]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDInit]"
                              name="AuditJobInstanceSourceIDInit"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::vJobInstanceSourceID]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::vJobInstanceSourceID]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDIncr]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDIncr]"
                              name="AuditJobInstanceSourceIDIncr"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::vJobInstanceSourceID]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::vJobInstanceSourceID]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditCreatedDTS]"
                              dataType="dbTimeStamp2"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditCreatedDTS]"
                              name="AuditCreatedDTS"
                              scale="3"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_DBTIMESTAMP2,3)@[User::vAuditDateTime]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_DBTIMESTAMP2,3)@[User::vAuditDateTime]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditModifiedDTS]"
                              dataType="dbTimeStamp2"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditModifiedDTS]"
                              name="AuditModifiedDTS"
                              scale="3"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_DBTIMESTAMP2,3)@[User::vAuditDateTime]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_DBTIMESTAMP2,3)@[User::vAuditDateTime]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[IsActive]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[IsActive]"
                              name="IsActive"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">1</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">1</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[LoadTimeStamp]"
                              dataType="dbTimeStamp"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[LoadTimeStamp]"
                              name="LoadTimeStamp"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">[GETDATE]()</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">GETDATE()</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount"
                      componentClassID="Microsoft.RowCount"
                      contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                      name="Get Records Total RowCount">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the variable to hold the row count."
                          name="VariableName">User::vInsertedTotalRowCount</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Inputs[Row Count Input 1]"
                          hasSideEffects="true"
                          name="Row Count Input 1">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Outputs[Row Count Output 1]"
                          name="Row Count Output 1"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Inputs[Row Count Input 1]">
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Insert Redirected or Rejected Rows to Exception Table"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[Audit].[ExceptionData]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable">User::vSchemaExceptionTable</property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Connections[OleDbConnection]"
                          connectionManagerID="{82DB7E38-7209-42AA-B67A-E022799DCA59}:external"
                          connectionManagerRefId="Project.ConnectionManagers[OLEDB_ETLAudit]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[RawDataTEXT]"
                              cachedCodepage="1252"
                              cachedDataType="text"
                              cachedName="RawDataTEXT"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[RawDataTEXT]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0].Columns[RawDataTEXT]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[JobInstanceID]"
                              cachedDataType="i8"
                              cachedName="JobInstanceID"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[JobInstanceID]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[JobInstanceID]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[RowNumber]"
                              cachedDataType="i4"
                              cachedName="RowNumber"
                              externalMetadataColumnId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[RowNumber]"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[RowNumber]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[ExceptionDataID]"
                              dataType="i8"
                              name="ExceptionDataID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[JobInstanceID]"
                              dataType="i8"
                              name="JobInstanceID" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[RowNumber]"
                              dataType="i4"
                              name="RowNumber" />
                            <externalMetadataColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].ExternalColumns[RawDataTEXT]"
                              codePage="1252"
                              dataType="text"
                              name="RawDataTEXT" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows"
                      componentClassID="Microsoft.RowCount"
                      contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                      name="RowCount - Get TotalRejectedRows">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the variable to hold the row count."
                          name="VariableName">User::vRejectedTotalRowCount</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Inputs[Row Count Input 1]"
                          hasSideEffects="true"
                          name="Row Count Input 1">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Outputs[Row Count Output 1]"
                          name="Row Count Output 1"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Inputs[Row Count Input 1]">
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\SRC Excel Source Future_Products"
                      componentClassID="Microsoft.RowCount"
                      contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="SSISOps : DON'T CHANGE PREFIX. "
                      name="SRC Excel Source Future_Products">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the variable to hold the row count."
                          name="VariableName">User::varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_2</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\SRC Excel Source Future_Products.Inputs[Row Count Input 1]"
                          hasSideEffects="true"
                          name="Row Count Input 1">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\SRC Excel Source Future_Products.Outputs[Row Count Output 1]"
                          name="Row Count Output 1"
                          synchronousInputId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\SRC Excel Source Future_Products.Inputs[Row Count Input 1]">
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description"
                      componentClassID="Microsoft.ManagedComponentHost"
                      name="TF Error Output Description"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          expressionType="Notify"
                          name="Show warning">false</property>
                        <property
                          dataType="System.Boolean"
                          expressionType="Notify"
                          name="Add Error Code">true</property>
                        <property
                          dataType="System.Boolean"
                          expressionType="Notify"
                          name="Add Error Column">true</property>
                        <property
                          dataType="System.Boolean"
                          expressionType="Notify"
                          name="Add Error Description">true</property>
                        <property
                          dataType="System.Boolean"
                          expressionType="Notify"
                          name="Add Component Name">true</property>
                        <property
                          dataType="System.Boolean"
                          expressionType="Notify"
                          name="Add Column Name">true</property>
                        <property
                          dataType="System.Boolean"
                          expressionType="Notify"
                          name="Add Column Type">false</property>
                        <property
                          dataType="System.Boolean"
                          expressionType="Notify"
                          name="Add Column Length">false</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          expressionType="Notify"
                          name="Input Lineage ID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[JobInstanceID]}:JobInstanceID:DT_I8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output].Columns[RowNumber]}:RowNumber:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorCode]}:EOD_ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorColumn]}:EOD_ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ErrorDescription]}:EOD_ErrorDescription:DT_STR:500;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ComponentName]}:EOD_ComponentName:DT_STR:100;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0].Columns[EOD_ColumnName]}:EOD_ColumnName:DT_STR:100;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0].Columns[RawDataTEXT]}:RawDataTEXT:DT_TEXT:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDInit]}:AuditJobInstanceSourceIDInit:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDIncr]}:AuditJobInstanceSourceIDIncr:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditCreatedDTS]}:AuditCreatedDTS:DT_DBTIMESTAMP2:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditModifiedDTS]}:AuditModifiedDTS:DT_DBTIMESTAMP2:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[IsActive]}:IsActive:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[LoadTimeStamp]}:LoadTimeStamp:DT_DBTIMESTAMP:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[RawDataTEXT]}:RawDataTEXT:DT_TEXT:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[JobInstanceID]}:JobInstanceID:DT_I8:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input].Columns[RowNumber]}:RowNumber:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorCode]}:EOD_ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorColumn]}:EOD_ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorDescription]}:EOD_ErrorDescription:DT_STR:500;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ComponentName]}:EOD_ComponentName:DT_STR:100;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ColumnName]}:EOD_ColumnName:DT_STR:100;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_effective_date]}:constant_effective_date:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_currency_rate]}:constant_currency_rate:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_rate_factor]}:constant_rate_factor:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_exp_base_currency]}:constant_exp_base_currency:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_currency_rate_approved]}:constant_currency_rate_approved:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[constant_approval_date]}:constant_approval_date:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency_base]}:C_constant_currency_base:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[constant_currency_base]}:constant_currency_base:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[C_constant_currency_base]}:C_constant_currency_base:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency]}:C_constant_currency:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[constant_currency]}:constant_currency:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[C_constant_currency]}:C_constant_currency:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_exchange_rate_type]}:C_constant_exchange_rate_type:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input].Columns[constant_exchange_rate_type]}:constant_exchange_rate_type:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input].Columns[C_constant_exchange_rate_type]}:C_constant_exchange_rate_type:DT_STR:3;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]}:ErrorCode:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]}:ErrorColumn:DT_I4:0;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_base]}:constant_currency_base:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency_base]}:constant_currency_base:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency]}:constant_currency:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency]}:constant_currency:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exchange_rate_type]}:constant_exchange_rate_type:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_exchange_rate_type]}:constant_exchange_rate_type:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_effective_date]}:constant_effective_date:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_effective_date]}:constant_effective_date:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate]}:constant_currency_rate:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency_rate]}:constant_currency_rate:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_rate_factor]}:constant_rate_factor:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_rate_factor]}:constant_rate_factor:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exp_base_currency]}:constant_exp_base_currency:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_exp_base_currency]}:constant_exp_base_currency:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate_approved]}:constant_currency_rate_approved:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_currency_rate_approved]}:constant_currency_rate_approved:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_approval_date]}:constant_approval_date:DT_WSTR:255;#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Error Output].Columns[constant_approval_date]}:constant_approval_date:DT_WSTR:255;</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">PW.TaskFactory.ErrorOutputDescription</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0']"
                          name="Error Input 326 - 'Error Input 0'">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[AuditJobInstanceSourceIDInit]"
                              cachedDataType="i4"
                              cachedName="AuditJobInstanceSourceIDInit"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDInit]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[AuditJobInstanceSourceIDIncr]"
                              cachedDataType="i4"
                              cachedName="AuditJobInstanceSourceIDIncr"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditJobInstanceSourceIDIncr]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[AuditCreatedDTS]"
                              cachedDataType="dbTimeStamp2"
                              cachedName="AuditCreatedDTS"
                              cachedScale="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditCreatedDTS]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[AuditModifiedDTS]"
                              cachedDataType="dbTimeStamp2"
                              cachedName="AuditModifiedDTS"
                              cachedScale="3"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[AuditModifiedDTS]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[IsActive]"
                              cachedDataType="i4"
                              cachedName="IsActive"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[IsActive]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  expressionType="Notify"
                                  name="Output Lineage ID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[ErrorCode]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  expressionType="Notify"
                                  name="Output Lineage ID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[ErrorColumn]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[LoadTimeStamp]"
                              cachedDataType="dbTimeStamp"
                              cachedName="LoadTimeStamp"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output].Columns[LoadTimeStamp]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[constant_currency_base]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_currency_base"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_base]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[constant_currency]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_currency"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  expressionType="Notify"
                                  name="Output Lineage ID">#{Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[constant_currency]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[constant_exchange_rate_type]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_exchange_rate_type"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exchange_rate_type]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[constant_effective_date]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_effective_date"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_effective_date]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[constant_currency_rate]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_currency_rate"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[constant_rate_factor]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_rate_factor"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_rate_factor]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[constant_exp_base_currency]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_exp_base_currency"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_exp_base_currency]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[constant_currency_rate_approved]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_currency_rate_approved"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_currency_rate_approved]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[constant_approval_date]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="constant_approval_date"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output].Columns[constant_approval_date]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[C_constant_currency_base]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="C_constant_currency_base"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency_base]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[C_constant_currency]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="C_constant_currency"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_currency]" />
                            <inputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0'].Columns[C_constant_exchange_rate_type]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="3"
                              cachedName="C_constant_exchange_rate_type"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output].Columns[C_constant_exchange_rate_type]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                        <input
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input]"
                          dangling="true"
                          name="Error Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output]"
                          name="Error Description Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorCode]"
                              name="EOD_ErrorCode" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorColumn]"
                              name="EOD_ErrorColumn" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorDescription]"
                              codePage="1252"
                              dataType="str"
                              length="500"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ErrorDescription]"
                              name="EOD_ErrorDescription" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ComponentName]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ComponentName]"
                              name="EOD_ComponentName" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ColumnName]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[EOD_ColumnName]"
                              name="EOD_ColumnName" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[ErrorCode]"
                              name="ErrorCode" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[ErrorColumn]"
                              name="ErrorColumn" />
                            <outputColumn
                              refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[constant_currency]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output].Columns[constant_currency]"
                              name="constant_currency" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                  </components>
                  <paths>
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Data Conversion Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Inputs[Row Count Input 1]"
                      name="Data Conversion Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Outputs[Data Conversion Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Derived Column Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Inputs[Row Count Input 1]"
                      name="Derived Column Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Derived Column Output1]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Destination SFDC Future_Products Table.Inputs[Row Count Input 1]"
                      name="Derived Column Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Error Description Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Inputs[Input 0]"
                      name="Error Description Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Outputs[Error Description Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Excel Source Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\SRC Excel Source Future_Products.Inputs[Row Count Input 1]"
                      name="Excel Source Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source.Outputs[Excel Source Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[OLE DB Destination Error Output]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description.Inputs[Error Input 326 - 'Error Input 0']"
                      name="OLE DB Destination Error Output"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Outputs[OLE DB Destination Error Output]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Output 0]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column.Inputs[Derived Column Input]"
                      name="Output 0"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns.Outputs[Output 0]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 1]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime.Inputs[Derived Column Input]"
                      name="Row Count Output 1"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount.Outputs[Row Count Output 1]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 11]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates.Inputs[OLE DB Destination Input]"
                      name="Row Count Output 1"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Destination SFDC Future_Products Table.Outputs[Row Count Output 1]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 2]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Insert Redirected or Rejected Rows to Exception Table.Inputs[Row Count Input 1]"
                      name="Row Count Output 2"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows.Outputs[Row Count Output 1]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 3]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion.Inputs[Data Conversion Input]"
                      name="Row Count Output 3"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\SRC Excel Source Future_Products.Outputs[Row Count Output 1]" />
                    <path
                      refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 31]"
                      endId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table.Inputs[OLE DB Destination Input]"
                      name="Row Count Output 3"
                      startId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Insert Redirected or Rejected Rows to Exception Table.Outputs[Row Count Output 1]" />
                  </paths>
                </pipeline>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\TF File Properties Task"
              DTS:CreationName="PW.TaskFactory.FilePropertiesTask"
              DTS:Description="TF File Properties Task"
              DTS:DTSID="{5FE0E697-FFC7-49B3-AC9A-87AD5FC1BEC5}"
              DTS:ExecutableType="PW.TaskFactory.FilePropertiesTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="TF File Properties Task"
              DTS:TaskContact="File Properties Task;Pragmatic Works, Inc; Task Factory (c) 2009 - 2016 Pragmatic Works, Inc; http://www.pragmaticworks.com;support@pragmaticworks.com"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <FileProperties
                  File_FileName=""
                  File_Extension=""
                  File_CreationTime="vFileCreatedDate"
                  File_CreationTimeUtc=""
                  File_LastAccessTimeUtc=""
                  File_LastAccessTime=""
                  File_LastWriteTime="vFileLastModifiedDate"
                  File_LastWriteTimeUtc=""
                  File_FileInUse=""
                  File_Hidden=""
                  File_Readonly=""
                  File_Encrypted=""
                  File_Compressed=""
                  File_Archived=""
                  File_Exists=""
                  File_Content=""
                  File_Size=""
                  StopExecutionOnError="False"
                  SelectedSourceType="Variable"
                  SelectedVariableOrConnectionManager="vProcessingFullPathName" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{57506E5A-0DAB-4504-A3E2-645A181CAB2A}"
              DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\TF File Properties Task"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination" />
          </DTS:PrecedenceConstraints>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{4E20EDA9-6F85-4339-9688-87718C77565C}"
              DTS:ObjectName="{4E20EDA9-6F85-4339-9688-87718C77565C}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::vProcessingFileName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{9953929F-3B67-43D5-8C4F-FE597D2F9CE4}"
              DTS:ObjectName="{9953929F-3B67-43D5-8C4F-FE597D2F9CE4}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::vProcessingFullPathName" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Recreate Index"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:DelayValidation="True"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{E44D597C-F1AB-4403-9B8F-DA3A5B25ADE8}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Recreate Index"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">@[User::vCreateAllIndexSQL]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{20B53271-7BD0-4DC3-9BA8-E74FB20FFC0D}" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{39287C45-0146-45F8-AB31-3DC9AF871FB4}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Truncate Target Table Beforehand">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand\Truncate &quot;Constant Currency &quot;"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{E17A0F42-E0E1-455E-9263-41CB3D5FC3A9}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Truncate &quot;Constant Currency &quot;"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">@[User::vSQLTruncateTargetTable]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{20B53271-7BD0-4DC3-9BA8-E74FB20FFC0D}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="TRUNCATE TABLE [Stage].[RConstantCurrencyRates]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{A4E099DA-BBC6-4A38-BDA3-DF41BF16589B}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::vProcessingFileCount]  &gt;0"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Get XLSX File Matching Name Criteria"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{D5C37C45-E61F-43D7-AE18-AFC0CB3E0AA7}"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{EE296D66-EB52-42E1-AC42-FFFFEC05A708}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::vDropAllIndexSQL] != &quot;&quot;"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Drop Index" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{08DE34A5-C723-4C29-AECA-C18BD45EE1E8}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::vDropAllIndexSQL] == &quot;&quot;"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{C87DAAA3-402A-45FF-9A35-E2E3B66A2044}"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Drop Index"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{DCFFE32C-D6F1-4D69-AD6F-4B65E15DAAEA}"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\ExSQL Delete Duplicated Rows" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{5D66825D-B596-4A55-9C44-AE127AEA0499}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::vCreateAllIndexSQL] != &quot;&quot;"
          DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination\ExSQL Delete Duplicated Rows"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination\Recreate Index" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{269E58AE-79DD-4343-9F61-CB1DB6BF0DA9}"
      DTS:From="Package\Initialization"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Initialization (Audit)" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{BF5F4D94-F397-4704-8AF1-AC2D2DC76D1D}"
      DTS:EvalOp="3"
      DTS:Expression="@[User::vProcessingFileCount]&gt;0"
      DTS:From="Package\Load Excel (xls and xlsx) Files from Source to Destination"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{381CA5F6-146A-46CA-A130-ADE97B5A38F6}"
      DTS:From="Package\Initialization (Audit)"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Get LastRecordsProcessedDate For Package" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{BC695F63-C965-4B02-B4FB-FC4C645B49B2}"
      DTS:From="Package\Get LastRecordsProcessedDate For Package"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Load Excel (xls and xlsx) Files from Source to Destination" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{7AD2682B-23D4-4223-9033-0A4D41377B6B}"
      DTS:From="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\Completion (Audit)" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{4A9EAB69-2795-45D0-8A83-1E3B19F1EBD5}"
      DTS:EventID="721682432"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{D81DC2EE-4BD5-49AC-9005-A6A83AFE3ECE}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
          DTS:DTSID="{AA734805-701A-4817-BF61-90E1E39C328A}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOpsNF_CHECK">
          <DTS:VariableValue
            DTS:DataType="8">{EC02EBFE-E5E0-4110-86C0-FD29B6233FE4}</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables />
    </DTS:EventHandler>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnPostExecute]"
      DTS:CreationName="OnPostExecute"
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{7FD9789B-91B1-4F16-8379-B966C44CFD4D}"
      DTS:EventID="1761627446"
      DTS:EventName="OnPostExecute"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{6618FC05-5BB2-4987-9731-4E0428A76C1C}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
          DTS:DTSID="{715B9042-0864-44BE-B780-2B80779F68E5}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOpsNF_CHECK">
          <DTS:VariableValue
            DTS:DataType="8">{EC02EBFE-E5E0-4110-86C0-FD29B6233FE4}</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{97B1B5AC-F925-4AE2-A9E3-8D7E5FAEBEA9}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_ConnectionValues">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{B42F1B62-5AF3-42D9-B2E3-664B44EDD1BE}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_1_DataObjectCatalog">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{DC704892-47E6-46A3-84AC-B5776584012F}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_1_DataObjectConnectionName">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{5F85FAEB-ABAA-464B-81C2-4A97257FBEF9}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_1_DataObjectConnectionString">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{E8D4B2A3-183E-40B8-AF0D-9F802DAFCB7D}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_1_DataObjectDataSource">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{AAAEB214-8384-451C-A595-D9AA77DBC969}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_1_DataObjectQuery">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{FDC9905E-32A4-4E3D-B96F-406B29B5107B}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_1_DataObjectUserName">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{24D786B6-BA2E-4434-98DD-1784102BC1A6}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_2_DataObjectCatalog">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{5423B450-E7B9-4D66-AA20-BD6E0BEFA98D}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_2_DataObjectConnectionName">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{8ABC030E-0FDD-4D7B-9F23-2EA63945DE20}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_2_DataObjectConnectionString">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{B2324853-D774-45D3-A2FF-380ADFA8CD6E}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_2_DataObjectDataSource">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{4041E523-A622-4904-A4D6-ED6E195A88AB}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_2_DataObjectUserName">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{6DF07C4A-164A-456C-ABB2-E95BA13F95B5}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_3_DataObjectCatalog">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{456DE003-44EF-4EAD-9B60-78F5F40CCD1D}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_3_DataObjectConnectionName">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{2736D317-E06D-486F-A796-2910976E5C34}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_3_DataObjectConnectionString">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{2809851A-20A3-4BC9-9206-98EA6860F758}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_3_DataObjectDataSource">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{0DE8CE48-C703-4D1C-86B6-3CD71DACBD95}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_3_DataObjectQuery">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{75A1B696-BCD3-40B2-90AF-8B2AF437DD8C}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_D41636AD719645D8996D3584D267E6F1_RowCount_3_DataObjectUserName">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. Set this variable to list of variables you want to mask during logging process. You can use comma separated list you can use wildcard &quot; * &quot; for pattern matching names are case insensitive. This option is used to mask variable values during logging process. This option is helpful when you have sensitive data (e.g. varFTP_Password) or variable value is extremly large to display (e.g. varXML_Document). When masking is enabled, &quot;****&quot; is logged in the BIxPress Audit Database rather than actual value of variable. Note: You can configure list of variables you want to mask outside the package by configuring &quot;varSSISOps_FilteredVars&quot;. There are 3 places where you have to set this value (OnPreExecute, OnPostExecute, OnVariableValueChanged)."
          DTS:DTSID="{0B3B3504-88BA-44C8-983B-A0C623CB2FAF}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_FilteredVars">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. A variable introduces in 2017.2 which stored a CSV list of qualified user variable names. These variables will be evaluated at runtime to see if they're being evaluated as an expression and then logged within the first task's OnPostExecute event handler if there has indeed been a variable value change."
          DTS:DTSID="{162B107F-1B0E-4536-A9BC-1D7840A9D36F}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_UserVariablesToBeEvaluatedAsExpressions">
          <DTS:VariableValue
            DTS:DataType="8">User::vAuditDateTime,User::vCreateAllIndexSQL,User::vCurJobID,User::vCurJobInstanceID,User::vCurUserID,User::vDeletedRowCount,User::vDeletedTotalRowCount,User::vDeleteXLSXFiles,User::vDropAllIndexSQL,User::vEnvironmentTEXT,User::vFileArchiveFullPath,User::vFileCreatedDate,User::vFileLastModifiedDate,User::vFileList,User::vFileTypeExtension,User::vInsertedRowCount,User::vInsertedTotalFileRowCount,User::vInsertedTotalRowCount,User::vJobInstanceSourceID,User::vLastRecordsProcessedDate,User::vPackageStartDate,User::vProcessedRowCount,User::vProcessingFileCount,User::vProcessingFileName,User::vProcessingFullPathName,User::vRejectedTotalRowCount,User::vSchemaExceptionTable,User::vSchemaTableName,User::vSourceServerDatabase,User::vSQLDeleteDuplicates,User::vSQLGetAuditDateTime,User::vSQLGetLastRecordProcessedDate,User::vSQLIndexStatement,User::vSQLSourceStatement,User::vSQLTruncateTargetTable,User::vSQLUpdateETLAuditColumn,User::vSQLUpdateETLAuditTable,User::vTargetTableCount,User::vUpdatedTotalRowCount</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. A variable introduced in 2017.2 which stores a temporary SQL query inserting multiple variable values into the [bix].[vw_SSISPackageVariableLog_999] view."
          DTS:DTSID="{5C4D6918-93F1-47D7-B8E9-DA93F06D37D0}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_VariableValuesChangedQuery">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables />
    </DTS:EventHandler>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnPreExecute]"
      DTS:CreationName="OnPreExecute"
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{93D2C291-86E8-4F54-B732-EBEC97766BBC}"
      DTS:EventID="1761636864"
      DTS:EventName="OnPreExecute"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{1DEC3FDE-5E97-4508-A76C-44ABA1DCDDD7}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{3C192AD8-634B-4696-980F-78FED34E44D0}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_ConnectionValues">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{1F06A9FA-8AAF-4972-9B68-09B79FA07AA4}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_DfLayout">
          <DTS:VariableValue
            DTS:DataType="8">&lt;layout version="3" compressed="true"&gt;&lt;DTS:Executable xmlns:DTS = "www.microsoft.com/SqlServer/Dts" DTS:ExecutableType = "SSIS.Package.2"&gt;&lt;DTS:PackageVariable&gt;		&lt;DTS:Property DTS:Name = "PackageVariableValue" DTS:DataType = "8"&gt;&lt;![CDATA[H4sIAAAAAAAEAO2a72+jNhjH/xWLV5uUEowhhKyp1CbprafcrUrybp0mF9yEHdiZbXrpTfvf92DSDtowVWorlR2vgn899tfPx49twvGKqi8/C6VRzFSy5kc6ydgRpxkbW5c0+kLX7GouaIxmu4il6IddqhDlMYLf3Y/oPEmZQjdSZGgpchkxpAWaMqUTTnUiODQVW7TaSJGvN+hcpDGTpvkHptHpdivFNpFUM2Poanq+Qqavva2yy6LokVnr5HhO70SuL/iNODn+IOl2U2agCd3SKNF3Y4u4FtplKVdjK0qlkaSgjI0+JZEUStxoe/lnumTylkn7gmu2lsZ4kZNETNlTMyFQ+EnELLUhP6Fp8s1U+okqxbLr9G78XGtmkPsRjTKl1il7zsBMM7sUN+PrhLP/7rrWzW5sbbTejvp9FW1YRpWdPTSJRNb/mvCbXd91nEF/R7O0Orrs+YMz0/OcUZ0cf4aqe0ctk28wAdgf9jxw1EX8jnG7mlJN0URwkKIK/NBKbOfsRo8tl3i233Od0PYt1D8kkIQtEFiWlNWq6rywh4cNwgKnBcJM8zxONLiQrSC0VdW54LWeh0mT71zPb4HEynPBqNKU60kuJePR3QLsqYpkHDogeTBsxJUMWiF5tlyhC66Y1GjB4kSySLMYCQmpP8rnhfiqimaFka2ZmxW9Tqvux2TYwzhsngrShtD04lnwMRCBiYMbV0HYhnkwSFSXwvJ8OkHnuc4l+/1SijiPtHqqPijU+8OgUbwbtEA8LPsImvGi6YPvJyLNM15d/a4T9IZhc7jDgxZoLZovWCRkDO4UmqYF5BORc11TOgC/EtwMtdOGbXl1jmZSwoL+JddbGDuURTIxC7kqFvwWhM1SPdwCqcvFBFVPIY+Xbm0T83rYaV6yXhtcew8tOjKWDMn3S7eI2jW9A9AbNgrGrQjQp3GMPorrC3NAgZpleKodx4pYHIb+XucsXt/rfNfK7EuqN+pXcBoqPbpfrAT/VlFH3OLkhWExgryqOBvOarfs5Li8Eo5MCi01lRqiOgcehBxbf+1Gn/M0/dtCMx5X8p3ewLHK2kXCMeXFk++abqpG4QK7zhjX6iF7nwGeSMGeOT8+3J4rredw6dxXrZkvnNRvMvVv0ePOa/mQfDoVlZw5vWbpfsTZqCyAHHQGMx0nfH0mdkZ4z4hfsBRccssuhUqKQYytU35XjvOAzUre/4C2GmwYIqQXdqR1pL0+ae6BsIZJB1sH2xvAhuubKB7Ygd8buB1tHW1vQdujTbS4Q/qkY61j7cWs7Qlznm6eIfE7wjrCXk7YfIamZ7V3oNWXRwf20YB0l9FXJ+8oILbrDENn4BZ/DNo+gWVOMCSwN7A9HAzNM7Y9QvyQBP73xGjtDd9hLv2Coldk0jPvzQ5Q6TlvyCQYfzdEfoexsAx8ldflh2Azu++QdOe7jriXEzdlEnTe/+u2x+3RfSIoPjfwX/m0h4vvnA4Ah13vTYkr7XfIvTPkDrycc0jQhbiOt5fzVv8K7uD5zeu5fnepeJe09SufyUKq+gFt//4j4JN/AK6tiMIPLAAA]]&gt;&lt;/DTS:Property&gt;	&lt;DTS:Property DTS:Name = "Namespace"&gt;dts-designer-1.0&lt;/DTS:Property&gt;	&lt;DTS:Property DTS:Name = "ObjectName"&gt;Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination&lt;/DTS:Property&gt;&lt;/DTS:PackageVariable&gt;&lt;/DTS:Executable&gt;&lt;/layout&gt;</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. Set this variable to list of variables you want to mask during logging process. You can use comma separated list you can use wildcard &quot; * &quot; for pattern matching names are case insensitive. This option is used to mask variable values during logging process. This option is helpful when you have sensitive data (e.g. varFTP_Password) or variable value is extremly large to display (e.g. varXML_Document). When masking is enabled, &quot;****&quot; is logged in the BIxPress Audit Database rather than actual value of variable. Note: You can configure list of variables you want to mask outside the package by configuring &quot;varSSISOps_FilteredVars&quot;. There are 3 places where you have to set this value (OnPreExecute, OnPostExecute, OnVariableValueChanged)."
          DTS:DTSID="{7846E5E8-CDA5-4A20-8067-662EBC818705}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_FilteredVars">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{51FCE5AF-54ED-40BD-B7C5-B6B120957D78}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_ParentSourceID">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{5C5E6D95-14FE-4C52-9159-8FE0B4FC4757}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_PkgLayout">
          <DTS:VariableValue
            DTS:DataType="8">&lt;layout version="3" compressed="true"&gt;&lt;DTS:Executable xmlns:DTS = "www.microsoft.com/SqlServer/Dts" DTS:ExecutableType = "SSIS.Package.2"&gt;&lt;DTS:PackageVariable&gt;		&lt;DTS:Property DTS:Name = "PackageVariableValue" DTS:DataType = "8"&gt;&lt;![CDATA[H4sIAAAAAAAEAO1dCW/jRpb+K1wPMEgAlVz34bgb4DndC3fH0+3NDpAeLGiJtpXIokLSbneC+e/7ijpMSqRPqdtK6CCJSNbxXr2v3sVi1eGPp78kgyJ3fkqyfJROXu3pvdeH/4VQGA8unEk6TJzTZJx+dj6PxmNnkE6KeDRxplk6TbJilOROcREXzjCFooUTn51BW052NSlGl7biRXw9SrM+Qq8Pj+PBr/F54gyTfHQ+QbYAmsSXyau9+RPo9ij+kl4Vbydn6evDf2Tx9GJ2w/HjaTwYFV9e7Um+59xcjif5q73BOCsbyOFZcvBuNMjSPD0r+h9/G39Msusk67+dFMl5FhfAlr0zGiR5Pyi7h4fvgLVxH+6P4vHo97LQD3GeJ5en4y+vHtpaSeScooPLPD8fJw8hrKzWnzEXTs5Hk+Turmvd3LzauyiK6cH+fj64SC7jvH+5rDJIL/c/jyZnN/sUY7l/E1+Oq9RdPpy4cngeQZVt/hG8hzdFMhkmw2cOeXz9uMHYn2ZJngCGbZMAuPfA5RxjH0e/A/2UiR6ne87b4RKXn9xscDG6Tpy//3aVFj+8S7LzZOgOBimgPJ/dc6LROHGK1Hkzyos0Gw3isROMMpgLafbFiSdDJ0jGSZE4Z1l66XwsYhD5+W2JT/On/zr6+K9ZU/FZkWTOcZYCx7ktO5pA68VF4gRxEZ/GebKo46eTvIgnhX+VZcDYh7iAOWnb2HNO0ulRcla82hN90YN/95z914f+bAYn2ZztN0k8TLI3yej8AkpyBqzn4c00tsJ5tXeSXUFDx/EkGc/Hh8sewVCqcsnlDoxXZTiI6lFC5uOxjgDBvgECjtJ06pxcZOnV+cVKxX8khfMuLoACqFF2c5ZmzowkuPXpQ2InnDMnrhEPZ1Br9ngFFXJDqNCkhgp7+fVR8fQxbJkr4fB8gY2vykn/GH4kw2QySEpxZiCaIv/59ve/q2jmrEeEhXOV4D7I/zp5fTizSQflle0oK6CVSdnNq70/bg7eX43H/9lzwsmwch/3JN6blbYXuHxufwladlNtFCzo+SUALV/ent/w0/EY2gM9WzHfldpHALd50VrzduD325q6fbTaee0+XK4PReXOUQw+Tb64Bb8rxO7XKy+KVu49e7owInuc0MV0KS+F+MrTpQIhiq0WV7xVJVK+phL99HIKrdsR+869Go6K7z+9i7Nfnf9OTx03d+aPE1DE9la1M4ArbVO98lH9xGv9vC2V36Cq7almmzJ+gnNQc2Yht/JS3EtvhRbF+gLf/tEeMYq2jrpeHw2rx47ivPiQDNJsmM8NXjIEK5c4Eai0hS9dFS700KNUtkt33eC9nYyKW7/400/wcxjPvI3JfJ68iydQMsurXYFhVU8Y6Cge5ysGRcHQ0uVIE2F6ZaVWEqtUQGHVxizT6/5dvaUlzMKbZHAFPA8uh05+kUD0Y+dUlhTZKIGJmUyuR1k6KfXXdQxRxOnYohDsyuUaRbjHiGomiEjyUIKO0nPQlMteqzaAqR7TvEW+6j751npYYspxTkqeKtPqY3qV1SaXMj3KW4aayAf3e5xOr8YWX+HJ0f/kSVZjjfWxEZRpLKnuEd03EivNqRaEStbStXiwlJddA5vj9LzWs3V12yYN1o/uYZJ8LtVWg5IiBPcIKGCmNUQgwJtg+i4XpLmrR/kNlPA+5koSgxnhYPFXBnaD3gSHnpihRCjCtWKq0bdgoKBqhbbnZ6x19TV9jjIOP1h6Ho4HJn0IltlLb8oB6ZWD8iEByID9P07zUVGmZdzJl70HOSebhYxD6qBhfSWss7BJfFC1AvwGeBDT19Uy20PHak8dONrBQVc1ig2tRd/UJbU5oJg+JkRJDhOXS0oakUIhFqoV2h5U1rrqsNKOFVbHiugxYTYKDtGsONRWY1aivnLMumti5ysqokf1Ro0Ha05V0O2mKujXTlXcKXake6xPwS6DxyqfJfznBm6c0h7XZBm4GXFP4NYQJVOuIPhjrSEcW4+Lj9J46IQ3AxiY727GeRmpwf9vvi+TJPk8BVJGLzZjEiR5MZrMYtsgKew7qxFwdFPWm2bJNM4SZ5il0/LGIEviMsNgS+SDbDStxl7MhteMtJJL2Hry5DnkWqreWlLqSctKWgHb7JJoD/c3Onzhzcd/Hi0yTcHVdDwawGANnQ/p52pqQKsaiaSnaTuFQm2SQpszuX1TsMwCv7dJcz8bFfYNYIVSuUxiNETS62HlMwir5aujdAwTbZmsdqf2FesoK/M60NCnIDpxyr7mbc26XKQAK81WWanDgvVI+2sPotcD2q/F20k0Y+T49q3ySZz/WgU4vi8p/5VofWRqHqa+2nBmnjdn5uV2M/Pyr5GZpzALqM35VC65/iazoop+uaI8BWlNcBJBNzmPPyRz67dqcgjlYPcMbSWEMrxJQkBUE2tZQDNk5zBcs9ykl5ylWXIB7dwWqL8HdWYvQgdfnLUXoNZG9ijf1CtQcL8ovUWO9cbEV2O/ihbdI1htS1s+TgEa3ZMbDfKY7jeHeWybcT57QZE9+Pog3A24+l8fGiu5RIzt/FN0swaSN2eFGNuqgWRsRwzkN5A6rftEoq/Z7V+PCbFJACDF+qz617yWYb3Yltc2UNwnCksiCWGK85lCWXZ2Ohp4ye+jJFvUOk5h5EhzxfIZLZ/xxmcM+OMND/fbCUTSrIzHXdXvIPghDS0YWBfCHQytl9WP4a9Z3i9Hq3Pel5U/ZXPdNfZ2U+PXk76C9EmVxw3PfQwDRJuTwIJvNwss+ItCk3W7NpMQ/AaYqWWMrXtQi3242GhErUlNL/Bmc7FWasvWgpG+xoRgbhRlSqgHW4v1irfWgonGZ6BcecOzO5SpUiujcVftO8h9QDsL6tcE0M7MelHzCN6aJd15do0zVaz780puWKV3S1FfmtTlutS13HSa868h9fusONHf4rXe+oJluxwT02VedHYtN5YYrSXlbHaDMXJnAutRWSjGiV3UjzeLUMUaETpXf9tCqBQ7rZcemSJi3CaZCTNmk7IjxtqppjRi+URud8HIMlP0IHeuLFxx4dTyeua2qXpja/2VOe7VUnd0WSm/6LUclHrH5S1O7ut7OZovRqWSfvkKd4v500emwxi3pMjOeO6AamKrgqNSb1hwzTZFbNemiD+7TamFKUyC72LoRi0KAj+Nm9s/XS56Wk86rxVj25UsebjiXxSuJJdJVeXbhPJ9Ch8RvsLfapW7EsctlZfJ4rXBWyFw/bm4l95GeezCVHAnk3T2Fft8QpwkN8VySoBvfZ2M02nJqvflwHEvLpPC8UdnxWCUno+v+s5ivweH9Ilze/VjNjoHp3xsv5tODhys9jHdp5hohxxgfPzOOf548ve/3bg/lP85vsqmaQ7lStc/goowCZefpN++ep9/hQymtvwUefZ1duwU82+mFjXd4S9XeVEOpzN/aD/dHjpAWFkvvo5H4/h0NAbs951bOvx0+iWzsYzz3eB7xynp/efVaAjm30+BxGweZRzH9pvoiu5YBDSSk57hs3CGnQ1OpRIEDRKFER9wjkyiz5DARDIdGzPkp7XX7WAI7Cr3VZH0Iwi6ZntZWGQkB4trJ4ovR2OYvCfxRXoZL9dKkr6NsAAIVqX8LZr/7a1W71tRB/YDwLIzQEZ8fVC/twKm++qvFIAbd/Cy9qwVjMM7BpyBS2lm453Is1Mm1CkyjDDEGTfIaC4R1olWsZEiIYNqgIjt0orydf/DR7wyqMT+swODul/ZAAWuZj/mpeeD+fowKPLwGkb4DcTa4yRr31ylXy2W//zjJMyyNPv3g/Zc0d2WKy9ry5WG1Vbv4/c9+Hc2o/5gzDDMuY+w8jTi0pPIpTqy80oQbkIjqfpPZU4tazct5Ko3TZjLqOsJ5ElDEVdYIVe5AinqksANPY5d74lNUy8IXGZ8ZKhHEOcSOmERQ8x3Xe1KKkJlnti0r7QbKOkjyvwAcSwocrWnkC9I4Ec+ZobLtqZXvM4/ImoCRgKFAmrbUr6HtAqkJZhyP9DYxY1kbszbvL3fECvgdndyVq3q3ezkByl/EC8giiqFFBYuCEBxpAO49HwRMRVyT0vcCWCDArjLFK1YoOeYJKCsmH90/zDDxGhnmXbMMoXUcI2Ni6iioOOVEcjF1EM+o1q4gW+0R56o4wX1FPZBEROpQS9LHCFP+wyFSmCfea4fuU81H1wo44Zg5QjoGHBRQwUqPwyQiAItoGUPIoMnNm2AYj8i1ijxEPHAY8jj2iBBjAlCGJtQPpVqpQNPeMwgH+wV4lSDijQkRFILw7im1IStRu8+L0BIj7gMbCCW4GAQAzGS63lIskBGzCWcKvFUMWpCsE8jCM5BgkC19V0oDI2inudKj4PVfSrVOvS5C36QGxiI7CLfR5q7GJwCERqBIWoMnuq7hEZhHjCKGMFgk0KtkRcFGIE34CqFCQuEfmLTgRdFIXM18qlrnbkAHCQQLYBPhgHWnPnyqVPGIyHwHjAUcQEIhAtkQu0jEkpfBJi6KmqletUqc9cEvqIaSRV5iGtwtrShPgpF5EmNwQHDjWjrrPKG3CLshZIE0qAw4Mq6RSGCiYjBPWdREEhQrlGj098JYEMCYNIDmBsPgUUAfeURiF9UBEEGFkIJg7HfbIA6AWxIAIZJToQLVkky0O8u2GqIBUKkAkqw5FqLZjPdCWBDAlAmEMpVGCkFVoRTTMCZYS5yeRi6ofIjQ7rIbKszQEpqggCMsAAPihMMykhp8LHDQBglVOgbvxPAFgVAuQsKKIBIgSmGuLCOMXF9pJiHI0G1azDtBLBFAUQex4q6EpxPJmEGQPigbRIxwiTyXEZcmBidALZqhFkAwQNFEF5CTCFCCIIIxLdK4hDiQhly3qmgXczOZcmjknPdW6Ndy80ZLDALiUbMFRDBB1IjNxDSZnZc34ADZ4JG1fmQVBQlREjXRRG1fgkGpeC5FHREiEM/IMIX5qlZrkgGQcgYRTL0IOwlhCEjiI88RkLCiE+8sDU3t2a9sfB4aF/o0Egj7htg3oD/GhLjhlTqkBve6a4tGg83FJobGPuIC8AJtzlcDsL0tSd9FZooNF0SaQeNx0/zDZJ/isdXiX8RT86T4cPMSHfey66ZETfkIaeBRBRcPpu2N8j1DEWhHyolRAjK+amLD4KICt+YALmu8hGPDEMe8UOkfK6hYRoE/MH5aulzbDzfIOxRjriMQmSob99jcM5DiCE061TNDqqa/42zCZDdOal/Tu3i+/YNmy+Q8jS4ezKMkAkFQ26kCY6UsW9BnvoOTwtqOOiBMLALPyPGwYk0IdKSupj7UindmL18QNMsDLkMQM9QrkDZCPhlgsC1zg2TKmTcJ+4Tm9aUeopLhqQAT5UHLqhbFxQj1tx1fdfnPm/MODXpRMU87XkRRa6wi7s4J3ZRDTRNsfSk5KGknU7c6iskzkoI23VqBIQJYHGpJIhQbnwbmbi68b16J4CvYZTsppRv0rxot0YvcDvQbiHVn8QOEvHtdmh9MNw+2fP27Bcg17MPSmoHP9mPeSk27Tslmx1gcPZk7SQcUNA9olsYUxvdCnNLjJXV7V7c9tOfE1BtVe7o7Ivf1l2uKd+BrZE/VX6vHJw5+FJ+o1Tbu9JubCF1K1yZ3AmWw48n9sShJCvATg7L09/sF1UZXP0y+2236rbVbCPTcmzK3UVrRyHpHiGmfSjYLqimZ4+CPWWxRxhuPzvU7MI4lJCoToWPUeA70VVxlSX/d5ylwyt7HvQa96rcRUO3b/hLN7pt+5aYh2lv99Gd2KpL2fvp+OpyUjvKDqueNu3qjmx0E/0tavT5SYHAWRGPLch9e4Rk/fDH8gCDdlDjXTDLJ5FTftLm/HhVTIF2eFae1LDig4DclGlnla8fxvfyWP34wXeqXsjq1K0ZMV7ZDLqB310Q7QK0DipbKpG8mLorx0wQY8/sM+27o++EgnaHw+qpi3P1VHPHrC425mWcifBwzvrHcXGR/wxCc2YSnU9WVt/1h1rPi1DeHWr8InMmO4+2GtgIaEi+0d1AOqR1SJshjTaoNcI6sHVg2wLYSN2IEmn3OpOb3eioQ1uHtjnaVoyojSEF67DWYe3ZWJsjDK8bT8O6zaU7hG0AYUehE3i1HGg1edRgRxXrgtGNI88eykKxNlhS+2KwLxhMc0bsjtdc9jlRuvxN+pwxYZjdsvevg9Fahq8Zl8KiaJNHZ6mWw9X4HSs/no1JaPzFIPIvqAtniq+SLm8CW2l9Nev8uw5xz0dckGTA5+Kt2xxuK/GEPQSAb/x0KNZyOhTd8ulQ9EWdDtVBrk3DEcy6c0w6vG0Ab/VVcI3+G+/Z8/A6tL1AtN21KnixCPj14fFomoxhOPz0cppOgJ93SREPreR3aH1wfT0jMAXtJFkxSvLl7y+vD98DE68tqGflfholn98Gh/vl7cP923IrNco1RHbcfjy1r+tPvkyTRaXyS0CngDuv9n6jB3mRgQD3ZjUO98untZb3q4Tttw79n0Uq969U7ET1QkT1tGWFfwLx7c/6yl//P/B1C51EogAA]]&gt;&lt;/DTS:Property&gt;	&lt;DTS:Property DTS:Name = "Namespace"&gt;dts-designer-1.0&lt;/DTS:Property&gt;&lt;/DTS:PackageVariable&gt;&lt;/DTS:Executable&gt;&lt;/layout&gt;</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{0E44CE3A-D99E-4DF8-8AA9-3A2602F3D95D}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_SourceType">
          <DTS:VariableValue
            DTS:DataType="8">unknown</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{1CF37A20-14AD-4D29-BBE8-98B867EC81D1}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_TaskList">
          <DTS:VariableValue
            DTS:DataType="8">&lt;xml AuditControlFlowVersion="6" EnableRowCountLogging="True" EnableRowCountLoggingForSource="True" EnableRowCountLoggingForDestination="True" EnableDataFlowMonitoring="True" MaxIterationCount="0" TrackAllVariables="True" TrackOnlyTagVariables="False" EnableVariableChangeTracking="True" EnableVariableChangeTrackingAdvFeatures="True" EnableVariableChangeTrackingAdvFeaturesADORec="False" LogConnectionMgrs="True"&gt;&lt;tsk id="{74FDF068-771D-42F3-9B09-6305D0B026CF}" typ="SequenceContainer" p="" name="Archive &amp;quot;MergedAccounts&amp;quot; File to Historical Directory and Delete from Staging Directory" on="1" /&gt;&lt;pc id="{456AF6F0-3478-49AF-9328-0A2D9C6DBF63}" op="2" and="True" val="0" task1="{4ADA1838-3381-4923-9C83-69790716016A}" task2="{CAC0E5BE-0B3D-4666-9289-DB9BD7B8188D}" p="{74FDF068-771D-42F3-9B09-6305D0B026CF}" refId="Package\Archive &amp;quot;MergedAccounts&amp;quot; File to Historical Directory and Delete from Staging Directory.PrecedenceConstraints[Constraint]"/&gt;&lt;tsk id="{CAC0E5BE-0B3D-4666-9289-DB9BD7B8188D}" typ="ForEachLoopContainer" p="{74FDF068-771D-42F3-9B09-6305D0B026CF}" name="Delete XLSX File after Processing into the Database" on="1" tag1="User::vDeleteXLSXFiles"/&gt;&lt;tsk id="{8FFF6462-2511-45C1-B1AB-0632F097DDD6}" typ="FileSystemTask" p="{CAC0E5BE-0B3D-4666-9289-DB9BD7B8188D}" name="Delete ConstantCurrentRates File" on="1" /&gt;&lt;tsk id="{4ADA1838-3381-4923-9C83-69790716016A}" typ="ForEachLoopContainer" p="{74FDF068-771D-42F3-9B09-6305D0B026CF}" name="Loop Through Directory and Get Matching File for Archiving" on="1" tag1="User::vProcessingFileName" tag2="User::vProcessingFullPathName"/&gt;&lt;tsk id="{C7A562E6-454F-4F2C-9099-8AB9F55CDD4A}" typ="FileSystemTask" p="{4ADA1838-3381-4923-9C83-69790716016A}" name="Rename  &amp;quot;ConstantCurrentRates file&amp;quot;" on="1" /&gt;&lt;tsk id="{EE8CB01E-BF86-4DFE-8F93-D6937945C656}" typ="SequenceContainer" p="" name="Completion (Audit)" on="1" /&gt;&lt;tsk id="{C9E0888F-D7C5-40C8-A502-62B375975ADC}" typ="SQLTask" p="{EE8CB01E-BF86-4DFE-8F93-D6937945C656}" name="Mark Job As Complete in Job" on="1" /&gt;&lt;tsk id="{4F746E6C-C4E9-4BBD-8437-F2421E840557}" typ="SQLTask" p="{EE8CB01E-BF86-4DFE-8F93-D6937945C656}" name="Mark Job as Complete in JobInstance" on="1" /&gt;&lt;tsk id="{9CB3CDB3-E254-42E2-9F5D-D406CF353F8A}" typ="SQLTask" p="" name="Get LastRecordsProcessedDate For Package" on="1" /&gt;&lt;tsk id="{388F8E87-4D9C-43C9-B84C-7510674EF289}" typ="SequenceContainer" p="" name="Initialization" on="1" /&gt;&lt;tsk id="{E223EB9D-4651-43A7-9ECB-7723F8D2767A}" typ="ScriptTask" p="{388F8E87-4D9C-43C9-B84C-7510674EF289}" name="Validate Connection Managers" on="1" /&gt;&lt;tsk id="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" typ="SequenceContainer" p="" name="Initialization (Audit)" on="1" /&gt;&lt;pc id="{677E2002-DCDF-47E8-B0AA-28A41F2CC4AF}" op="2" and="True" val="0" task1="{B3AE7FF8-1EAC-4F2E-A39C-A87A4E11CC00}" task2="{2B489CFA-3B6E-41C1-AB24-87459B0D1255}" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint]"/&gt;&lt;pc id="{E4D99E95-6582-447B-9685-0E482C754655}" op="2" and="True" val="0" task1="{2B489CFA-3B6E-41C1-AB24-87459B0D1255}" task2="{49535C9F-E076-4456-90AA-74442609BAA1}" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 1]"/&gt;&lt;pc id="{E32B896A-96CE-4FD6-A8EB-07E8D3EB9048}" op="2" and="True" val="0" task1="{49535C9F-E076-4456-90AA-74442609BAA1}" task2="{E7AE3054-933F-451B-9307-A4659865175A}" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 2]"/&gt;&lt;pc id="{16B545D6-AB2E-4032-A3FD-83AE4BEAC139}" op="2" and="True" val="0" task1="{36A6B70F-BEE9-4AC5-9BB9-20A3ABB1D7A0}" task2="{776A09CE-764D-40D0-9164-05B03AE1E7DB}" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 3]"/&gt;&lt;pc id="{136D9B37-D369-4E14-ADD8-D1CC3679A129}" op="3" and="True" val="0" task1="{E7AE3054-933F-451B-9307-A4659865175A}" task2="{36A6B70F-BEE9-4AC5-9BB9-20A3ABB1D7A0}" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" refId="Package\Initialization (Audit).PrecedenceConstraints[Constraint 4]"/&gt;&lt;tsk id="{36A6B70F-BEE9-4AC5-9BB9-20A3ABB1D7A0}" typ="ScriptTask" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" name="Execute cmd shell and retrieve environment variable information" on="1" /&gt;&lt;tsk id="{776A09CE-764D-40D0-9164-05B03AE1E7DB}" typ="SQLTask" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" name="Log Environment" on="1" /&gt;&lt;tsk id="{E7AE3054-933F-451B-9307-A4659865175A}" typ="SQLTask" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" name="Log Processed  Table JobInstanceSource" on="1" /&gt;&lt;tsk id="{B3AE7FF8-1EAC-4F2E-A39C-A87A4E11CC00}" typ="SQLTask" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" name="Populate ETLUser" on="1" /&gt;&lt;tsk id="{2B489CFA-3B6E-41C1-AB24-87459B0D1255}" typ="SQLTask" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" name="Populate Joblog" on="1" /&gt;&lt;tsk id="{49535C9F-E076-4456-90AA-74442609BAA1}" typ="SQLTask" p="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" name="Populate new Job Instance" on="1" /&gt;&lt;tsk id="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" typ="SequenceContainer" p="" name="Load Excel (xls and xlsx) Files from Source to Destination" on="1" /&gt;&lt;pc id="{A4E099DA-BBC6-4A38-BDA3-DF41BF16589B}" op="3" and="True" val="0" task1="{8B118165-6528-4890-B1A0-5B9829EA1777}" task2="{39287C45-0146-45F8-AB31-3DC9AF871FB4}" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint]"/&gt;&lt;pc id="{D5C37C45-E61F-43D7-AE18-AFC0CB3E0AA7}" op="2" and="True" val="0" task1="{39287C45-0146-45F8-AB31-3DC9AF871FB4}" task2="{F9A58954-53D2-4728-8F4D-586A76EB7E48}" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 1]"/&gt;&lt;pc id="{EE296D66-EB52-42E1-AC42-FFFFEC05A708}" op="3" and="True" val="0" task1="{F9A58954-53D2-4728-8F4D-586A76EB7E48}" task2="{5B5515D4-CCF1-41B8-861A-EC51913426D9}" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 2]"/&gt;&lt;pc id="{08DE34A5-C723-4C29-AECA-C18BD45EE1E8}" op="3" and="False" val="0" task1="{F9A58954-53D2-4728-8F4D-586A76EB7E48}" task2="{BC5230E9-8813-4F02-835E-ED7A616829FA}" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 3]"/&gt;&lt;pc id="{C87DAAA3-402A-45FF-9A35-E2E3B66A2044}" op="2" and="False" val="0" task1="{5B5515D4-CCF1-41B8-861A-EC51913426D9}" task2="{BC5230E9-8813-4F02-835E-ED7A616829FA}" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 4]"/&gt;&lt;pc id="{DCFFE32C-D6F1-4D69-AD6F-4B65E15DAAEA}" op="2" and="True" val="0" task1="{BC5230E9-8813-4F02-835E-ED7A616829FA}" task2="{C4D0D4A5-F2A5-4E80-A032-0F825753A257}" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 5]"/&gt;&lt;pc id="{5D66825D-B596-4A55-9C44-AE127AEA0499}" op="3" and="True" val="0" task1="{C4D0D4A5-F2A5-4E80-A032-0F825753A257}" task2="{E44D597C-F1AB-4403-9B8F-DA3A5B25ADE8}" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" refId="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 6]"/&gt;&lt;tsk id="{F9A58954-53D2-4728-8F4D-586A76EB7E48}" typ="SQLTask" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" name="Detect index and prepare drop and create index script" on="1" /&gt;&lt;tsk id="{5B5515D4-CCF1-41B8-861A-EC51913426D9}" typ="SQLTask" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" name="Drop Index" on="1" /&gt;&lt;tsk id="{C4D0D4A5-F2A5-4E80-A032-0F825753A257}" typ="SQLTask" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" name="ExSQL Delete Duplicated Rows" on="1" /&gt;&lt;tsk id="{8B118165-6528-4890-B1A0-5B9829EA1777}" typ="ScriptTask" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" name="Get XLSX File Matching Name Criteria" on="1" /&gt;&lt;tsk id="{BC5230E9-8813-4F02-835E-ED7A616829FA}" typ="ForEachLoopContainer" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" name="Loop Through Folder and Get Appropirate File" on="1" tag1="User::vProcessingFileName" tag2="User::vProcessingFullPathName"/&gt;&lt;pc id="{57506E5A-0DAB-4504-A3E2-645A181CAB2A}" op="2" and="True" val="0" task1="{5FE0E697-FFC7-49B3-AC9A-87AD5FC1BEC5}" task2="{81B9A3D0-706B-43B4-A789-FA6605AF4868}" p="{BC5230E9-8813-4F02-835E-ED7A616829FA}" refId="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File.PrecedenceConstraints[Constraint]"/&gt;&lt;tsk id="{81B9A3D0-706B-43B4-A789-FA6605AF4868}" typ="PipelineTask" p="{BC5230E9-8813-4F02-835E-ED7A616829FA}" name="DFT Load Source Excel File to Destination" on="1" &gt;&lt;com id="2" dir="TRAN" typ="trnderivedcolumn" name="Add JobInstance Column" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_2" /&gt;&lt;com id="14" dir="TRAN" typ="" name="Concatenate Rejected Columns" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_14" /&gt;&lt;com id="34" dir="TRAN" typ="trndataconversion" name="Data Conversion" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_34" /&gt;&lt;com id="52" dir="TRAN" typ="trnrowcount" name="DEST Destination SFDC Future_Products Table" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_52" /&gt;&lt;com id="56" dir="TRAN" typ="trnrowcount" name="DEST Insert Redirected or Rejected Rows to Exception Table" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_56" /&gt;&lt;com id="60" dir="DEST" typ="desoledb" name="Destination ConstantCurrencyRates" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_60" /&gt;&lt;com id="97" dir="SRC" typ="srcexcel" name="Excel Source" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_97" /&gt;&lt;com id="137" dir="TRAN" typ="trnderivedcolumn" name="Get AuditDateTime" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_137" /&gt;&lt;com id="161" dir="TRAN" typ="trnrowcount" name="Get Records Total RowCount" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_161" /&gt;&lt;com id="165" dir="DEST" typ="desoledb" name="Insert Redirected or Rejected Rows to Exception Table" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_165" /&gt;&lt;com id="189" dir="TRAN" typ="trnrowcount" name="RowCount - Get TotalRejectedRows" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_189" /&gt;&lt;com id="193" dir="TRAN" typ="trnrowcount" name="SRC Excel Source Future_Products" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_193" /&gt;&lt;com id="197" dir="TRAN" typ="" name="TF Error Output Description" pid="{81B9A3D0-706B-43B4-A789-FA6605AF4868}_197" /&gt;&lt;dp id="242" val="0" ann="" c1="34" c2="161"/&gt;&lt;dp id="243" val="0" ann="" c1="2" c2="189"/&gt;&lt;dp id="244" val="0" ann="" c1="137" c2="52"/&gt;&lt;dp id="245" val="0" ann="" c1="197" c2="14"/&gt;&lt;dp id="246" val="0" ann="" c1="97" c2="193"/&gt;&lt;dp id="247" val="1" ann="OLE DB Destination Error Output" c1="60" c2="197"/&gt;&lt;dp id="248" val="0" ann="" c1="14" c2="2"/&gt;&lt;dp id="249" val="0" ann="" c1="161" c2="137"/&gt;&lt;dp id="250" val="0" ann="" c1="52" c2="60"/&gt;&lt;dp id="251" val="0" ann="" c1="189" c2="56"/&gt;&lt;dp id="252" val="0" ann="" c1="193" c2="34"/&gt;&lt;dp id="253" val="0" ann="" c1="56" c2="165"/&gt;&lt;/tsk&gt;&lt;tsk id="{5FE0E697-FFC7-49B3-AC9A-87AD5FC1BEC5}" typ="PW.TASKFACTORY.FILEPROPERTIESTASK.FILEPROPERTIES" p="{BC5230E9-8813-4F02-835E-ED7A616829FA}" name="TF File Properties Task" on="1" /&gt;&lt;tsk id="{E44D597C-F1AB-4403-9B8F-DA3A5B25ADE8}" typ="SQLTask" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" name="Recreate Index" on="1" /&gt;&lt;tsk id="{39287C45-0146-45F8-AB31-3DC9AF871FB4}" typ="SequenceContainer" p="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" name="Truncate Target Table Beforehand" on="1" /&gt;&lt;tsk id="{E17A0F42-E0E1-455E-9263-41CB3D5FC3A9}" typ="SQLTask" p="{39287C45-0146-45F8-AB31-3DC9AF871FB4}" name="Truncate &amp;quot;Constant Currency &amp;quot;" on="1" /&gt;&lt;pc id="{269E58AE-79DD-4343-9F61-CB1DB6BF0DA9}" op="2" and="True" val="0" task1="{388F8E87-4D9C-43C9-B84C-7510674EF289}" task2="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" p="" refId="Package.PrecedenceConstraints[Constraint]"/&gt;&lt;pc id="{BF5F4D94-F397-4704-8AF1-AC2D2DC76D1D}" op="3" and="True" val="0" task1="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" task2="{74FDF068-771D-42F3-9B09-6305D0B026CF}" p="" refId="Package.PrecedenceConstraints[Constraint 1]"/&gt;&lt;pc id="{381CA5F6-146A-46CA-A130-ADE97B5A38F6}" op="2" and="True" val="0" task1="{E5591BAA-E9EB-4193-802C-8BBF0ADE52AF}" task2="{9CB3CDB3-E254-42E2-9F5D-D406CF353F8A}" p="" refId="Package.PrecedenceConstraints[Constraint 2]"/&gt;&lt;pc id="{BC695F63-C965-4B02-B4FB-FC4C645B49B2}" op="2" and="True" val="0" task1="{9CB3CDB3-E254-42E2-9F5D-D406CF353F8A}" task2="{0D7C7B7B-F854-49F7-950C-E04A6D84CA8B}" p="" refId="Package.PrecedenceConstraints[Constraint 3]"/&gt;&lt;pc id="{7AD2682B-23D4-4223-9033-0A4D41377B6B}" op="2" and="True" val="0" task1="{74FDF068-771D-42F3-9B09-6305D0B026CF}" task2="{EE8CB01E-BF86-4DFE-8F93-D6937945C656}" p="" refId="Package.PrecedenceConstraints[Constraint 5]"/&gt;&lt;/xml&gt;</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{9DE45B15-E4BD-4D79-84FE-33F309DBB7D6}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_VariableValues">
          <DTS:VariableValue
            DTS:DataType="8">User::vAuditDateTime,User::vCreateAllIndexSQL,User::vCurJobID,User::vCurJobInstanceID,User::vCurUserID,User::vDeletedRowCount,User::vDeletedTotalRowCount,User::vDeleteXLSXFiles,User::vDropAllIndexSQL,User::vEnvironmentTEXT,User::vFileArchiveFullPath,User::vFileCreatedDate,User::vFileLastModifiedDate,User::vFileList,User::vFileTypeExtension,User::vInsertedRowCount,User::vInsertedTotalFileRowCount,User::vInsertedTotalRowCount,User::vJobInstanceSourceID,User::vLastRecordsProcessedDate,User::vPackageStartDate,User::vProcessedRowCount,User::vProcessingFileCount,User::vProcessingFileName,User::vProcessingFullPathName,User::vRejectedTotalRowCount,User::vSchemaExceptionTable,User::vSchemaTableName,User::vSourceServerDatabase,User::vSQLDeleteDuplicates,User::vSQLGetAuditDateTime,User::vSQLGetLastRecordProcessedDate,User::vSQLIndexStatement,User::vSQLSourceStatement,User::vSQLTruncateTargetTable,User::vSQLUpdateETLAuditColumn,User::vSQLUpdateETLAuditTable,User::vTargetTableCount,User::vUpdatedTotalRowCount</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables />
    </DTS:EventHandler>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnVariableValueChanged]"
      DTS:CreationName="OnVariableValueChanged"
      DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{E3427000-0965-4525-B413-0926C98DA880}"
      DTS:EventID="4456480"
      DTS:EventName="OnVariableValueChanged"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{1CD6BF98-E740-40C1-BF2D-9DCD4030FEB7}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. "
          DTS:DTSID="{F02E02F2-F348-4424-BC6F-B7FDB5A24B5A}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_CurValue">
          <DTS:VariableValue
            DTS:DataSubType="ManagedSerializable"
            DTS:DataType="13">
            <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                <xsd:anyType
                  id="ref-1"></xsd:anyType>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
          </DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOps : DON'T CHANGE PREFIX. Set this variable to list of variables you want to mask during logging process. You can use comma separated list you can use wildcard &quot; * &quot; for pattern matching names are case insensitive. This option is used to mask variable values during logging process. This option is helpful when you have sensitive data (e.g. varFTP_Password) or variable value is extremly large to display (e.g. varXML_Document). When masking is enabled, &quot;****&quot; is logged in the BIxPress Audit Database rather than actual value of variable. Note: You can configure list of variables you want to mask outside the package by configuring &quot;varSSISOps_FilteredVars&quot;. There are 3 places where you have to set this value (OnPreExecute, OnPostExecute, OnVariableValueChanged)."
          DTS:DTSID="{99CF4B7D-7789-4A53-B884-8A2C038EB5F5}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOps_FilteredVars">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables />
    </DTS:EventHandler>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnWarning]"
      DTS:CreationName="OnWarning"
      DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. SSISOps : DON'T CHANGE PREFIX. "
      DTS:DTSID="{7696D816-B028-4960-95BA-19A70CA7F3E9}"
      DTS:EventID="80495"
      DTS:EventName="OnWarning"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{6BF7D881-ED13-4E66-ABCB-9E5CB3C0012B}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="SSISOpsNF : DON'T CHANGE PREFIX. "
          DTS:DTSID="{23CFD87C-F760-43B9-AE0A-5AF881B47B43}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="varSSISOpsNF_CHECK">
          <DTS:VariableValue
            DTS:DataType="8">{EC02EBFE-E5E0-4110-86C0-FD29B6233FE4}</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables />
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph" xmlns:mssge="clr-namespace:Microsoft.SqlServer.Graph.Extended;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <NodeLayout
          Size="235,42"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database\Delete ConstantCurrentRates File"
          TopLeft="5.5,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="246,103"
          Size="246,146"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Delete XLSX File after Processing into the Database"
          TopLeft="17,211.5" />
        <NodeLayout
          Size="253,42"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving\Rename  &quot;ConstantCurrentRates file&quot;"
          TopLeft="5.5,6.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="281,103"
          Size="281,146"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory\Loop Through Directory and Get Matching File for Archiving"
          TopLeft="5.5,5.5" />
        <EdgeLayout
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory.PrecedenceConstraints[Constraint]"
          TopLeft="143,151.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="316,412"
          Size="316,455"
          Id="Package\Archive &quot;MergedAccounts&quot; File to Historical Directory and Delete from Staging Directory"
          TopLeft="200,1476.5" />
        <NodeLayout
          Size="224,42"
          Id="Package\Completion (Audit)\Mark Job As Complete in Job"
          TopLeft="23,12" />
        <NodeLayout
          Size="256,42"
          Id="Package\Completion (Audit)\Mark Job as Complete in JobInstance"
          TopLeft="283,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="544,109"
          Size="544,152"
          Id="Package\Completion (Audit)"
          TopLeft="73.5000000000002,1972.5" />
        <NodeLayout
          Size="286,42"
          Id="Package\Get LastRecordsProcessedDate For Package"
          TopLeft="202.5,226.5" />
        <NodeLayout
          Size="223,42"
          Id="Package\Initialization\Validate Connection Managers"
          TopLeft="27,27" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="False"
          PanelSize="274,129"
          Size="159,43"
          Id="Package\Initialization"
          TopLeft="259,7.5" />
        <NodeLayout
          Size="385,42"
          Id="Package\Initialization (Audit)\Execute cmd shell and retrieve environment variable information"
          TopLeft="20,317" />
        <NodeLayout
          Size="161,42"
          Id="Package\Initialization (Audit)\Log Environment"
          TopLeft="137,384" />
        <NodeLayout
          Size="273,42"
          Id="Package\Initialization (Audit)\Log Processed  Table JobInstanceSource"
          TopLeft="79,245" />
        <NodeLayout
          Size="163,42"
          Id="Package\Initialization (Audit)\Populate ETLUser"
          TopLeft="133.0952380628,18.9607842851263" />
        <NodeLayout
          Size="155,42"
          Id="Package\Initialization (Audit)\Populate Joblog"
          TopLeft="136,105" />
        <NodeLayout
          Size="208,42"
          Id="Package\Initialization (Audit)\Populate new Job Instance"
          TopLeft="110,174.388235285538" />
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint]"
          TopLeft="214.0476190314,60.9607842851263">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,44.0392157148737"
              Start="0,0"
              End="0,36.5392157148737">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.5392157148737" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint 1]"
          TopLeft="213.75,147">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,27.388235285538"
              Start="0,0"
              End="0,19.888235285538">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.888235285538" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint 2]"
          TopLeft="214.7,215.988235285538">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,29.0117647144621"
              Start="0,0"
              End="0,21.5117647144621">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.5117647144621" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint 3]"
          TopLeft="215,359">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Initialization (Audit).PrecedenceConstraints[Constraint 4]"
          TopLeft="214,287">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,30"
              Start="0,0"
              End="0,22.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,3.25,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="False"
          PanelSize="422,481"
          Size="195,43"
          Id="Package\Initialization (Audit)"
          TopLeft="247,123.5" />
        <NodeLayout
          Size="336,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Detect index and prepare drop and create index script"
          TopLeft="32.5,313.5" />
        <NodeLayout
          Size="134,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Drop Index"
          TopLeft="5.50000000000006,415.5" />
        <NodeLayout
          Size="226,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\ExSQL Delete Duplicated Rows"
          TopLeft="87.5000000000001,825.5" />
        <NodeLayout
          Size="257,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Get XLSX File Matching Name Criteria"
          TopLeft="67,27" />
        <NodeLayout
          Size="275,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination"
          TopLeft="6.50000000000003,111.5" />
        <NodeLayout
          Size="188,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\TF File Properties Task"
          TopLeft="50,5.5" />
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File.PrecedenceConstraints[Constraint]"
          TopLeft="144,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,64"
              Start="0,0"
              End="0,56.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,56.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="288,205"
          Size="288,248"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File"
          TopLeft="56.5000000000001,517.5" />
        <NodeLayout
          Size="152,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Recreate Index"
          TopLeft="124.5,927.5" />
        <NodeLayout
          Size="230,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand\Truncate &quot;Constant Currency &quot;"
          TopLeft="15.5,24.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="285,122"
          Size="285,165"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Truncate Target Table Beforehand"
          TopLeft="58,107.5" />
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint]"
          TopLeft="198,69">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,38.5"
              Start="0,0"
              End="0,31">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,7.5,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 1]"
          TopLeft="200.5,272.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,41"
              Start="0,0"
              End="0,33.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,33.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 2]"
          TopLeft="145.833333333333,355.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-73.3333333333333,60"
              Start="0,0"
              End="-73.3333333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.1706161137441" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.1706161137441"
                    Point2="0,24.1706161137441"
                    Point3="-4,24.1706161137441" />
                  <mssgle:LineSegment
                    End="-69.3333333333333,24.1706161137441" />
                  <mssgle:CubicBezierSegment
                    Point1="-69.3333333333333,24.1706161137441"
                    Point2="-73.3333333333333,24.1706161137441"
                    Point3="-73.3333333333333,28.1706161137441" />
                  <mssgle:LineSegment
                    End="-73.3333333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-44.6666666666667,29.1706161137441,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 3]"
          TopLeft="251.166666666667,355.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,162"
              Start="0,0"
              End="0,154.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,154.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,69.25,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 4]"
          TopLeft="72.5000000000001,457.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="81.3333333333334,60"
              Start="0,0"
              End="81.3333333333334,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.8011049723757" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.8011049723757"
                    Point2="0,35.8011049723757"
                    Point3="4,35.8011049723757" />
                  <mssgle:LineSegment
                    End="77.3333333333334,35.8011049723757" />
                  <mssgle:CubicBezierSegment
                    Point1="77.3333333333334,35.8011049723757"
                    Point2="81.3333333333334,35.8011049723757"
                    Point3="81.3333333333334,39.8011049723757" />
                  <mssgle:LineSegment
                    End="81.3333333333334,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 5]"
          TopLeft="200.5,765.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination.PrecedenceConstraints[Constraint 6]"
          TopLeft="200.5,867.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,18.25,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="374,1025"
          Size="374,1068"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination"
          TopLeft="157.5,331.5" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="341.5,50.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,73"
              Start="0,0"
              End="0,65.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,65.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="344.5,1399.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="13.5,77"
              Start="0,0"
              End="13.5,69.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,34.5"
                    Point2="0,38.5"
                    Point3="4,38.5" />
                  <mssgle:LineSegment
                    End="9.5,38.5" />
                  <mssgle:CubicBezierSegment
                    Point1="9.5,38.5"
                    Point2="13.5,38.5"
                    Point3="13.5,42.5" />
                  <mssgle:LineSegment
                    End="13.5,69.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-1.25,43.5,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="345,166.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="345,268.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,63"
              Start="0,0"
              End="0,55.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,55.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="358,1931.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-12.4999999999998,41"
              Start="0,0"
              End="-12.4999999999998,33.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.5"
                    Point2="0,20.5"
                    Point3="-4,20.5" />
                  <mssgle:LineSegment
                    End="-8.49999999999977,20.5" />
                  <mssgle:CubicBezierSegment
                    Point1="-8.49999999999977,20.5"
                    Point2="-12.4999999999998,20.5"
                    Point3="-12.4999999999998,24.5" />
                  <mssgle:LineSegment
                    End="-12.4999999999998,33.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="Package Development By: Ahmet Ciftcioglu.  Version 1.1   Version Original Date: 07/02/2018 1:00PM PST&#xA;&#xA;Purpose: Load Finance Constant Currency Rates flat file into a table in FinanceAdjustments  table based on file availability. &#xA;&#xA;Copyright (c)  2018 Quidel Corporation"
          ParentId="Package"
          Size="641,92"
          Id="3fcb6751-ce70-4c44-9e8f-501638a99d4b"
          TopLeft="585,28">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Family="Tahoma"
              Size="11.25"
              Color="#FFFFFFFF">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
        <AnnotationLayout
          Text="d"
          ParentId="Package"
          Size="35,37"
          Id="e6fb357b-9313-4349-9846-08e87a965e1c"
          TopLeft="1085,131">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Color="#FFF1F1F1">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="{3393044C-07B8-46B6-A28F-9845149E9627}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{13A32AB5-B692-4707-A7A5-72A1DAEB40AB}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{2BDDA39C-92B1-4465-B3F3-3CAA8A625E79}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{C78AD76C-23CD-4052-A8B7-C51DCFC03946}"
          TopLeft="NaN,NaN" />
        <EdgeLayout
          Id="{F29D31D7-D2CD-47CB-87D6-44624CD80A09}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{1BD17277-705A-4774-8D77-BC5F37E4B860}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnPostExecute]">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="{E294809A-2721-4795-A02B-C3285ADC98B1}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{52B70CD6-168D-460F-B8C3-E750C3BACFA9}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{4579AEA5-1BC5-43E7-87ED-5FD85BACB163}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{9CD6CF1D-404E-4DB3-B489-5199DEA02E69}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{78DB5B39-CD31-4287-B91E-6859348229E6}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{156B1A37-D068-4194-9ABB-63D6F3A14275}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{58110C2F-180F-4286-A22E-472BBA6B42CD}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{18EC4A8F-AD90-4FCC-84A0-235E950018DB}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{E9704D32-310A-4E88-BFD0-80AA77013D58}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{DBFFE3A8-C2A8-46DC-978D-5F6ED0843C61}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{B1E235D3-F45D-4E23-9E8C-1E6C5D02A7F8}"
          TopLeft="NaN,NaN" />
        <EdgeLayout
          Id="{4A9DC728-67FB-486C-892C-E5FB68078A06}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{0BE61D69-ED47-477E-A140-A73FDD6ADCF7}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{36B0789B-BACE-4B15-B7F7-C05575900CA9}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{936415A7-D630-4AC5-B86E-7D2106488563}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{79D57A70-778C-4201-B43A-A4EEAE7CF910}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{96629DD8-652F-410B-B785-AED59757EC9C}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{24A5A7D5-1373-4594-91AC-73B0F528A902}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{FB4072A6-8936-4186-83F3-F01FBA31A52F}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{933DC5D2-29ED-45E0-811D-760E1426E44C}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnPreExecute]">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="{90503E18-3A5B-4D68-AD56-9ABAC9EAE9DF}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{721156AA-F22F-40E0-BA22-2E0ECD15C599}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{F6DDE332-6EB7-4113-951C-B31E131C1BE3}"
          TopLeft="NaN,NaN" />
        <EdgeLayout
          Id="{205B4ECB-82F8-4C96-993A-E19AE268E494}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{AE5849F8-F45F-440F-B41C-C8B6C7E9FE96}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnVariableValueChanged]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="{AE4E42D6-2760-4729-AB92-ECE7755E51C7}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{DF25C99D-AA7C-4F93-B1CE-7C485E52DD48}"
          TopLeft="NaN,NaN" />
        <EdgeLayout
          Id="{6C409BC9-0B24-46FE-92C4-9A444E072836}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnWarning]">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="{CC310AC5-7B87-46EF-9E53-AF810F790BE6}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{E85294FE-ED70-4F34-B39E-862A04C67780}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{3EE46D24-2474-4524-9DDA-B41367E34C1A}"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="{822B7463-653A-4DA9-AA93-084AACAC4C42}"
          TopLeft="NaN,NaN" />
        <EdgeLayout
          Id="{73B8BBF2-A592-4441-BC53-6206B664E626}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="{343790BE-23C1-4D74-A261-1249C4ECBA85}"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <TaskHost
    design-time-name="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="158,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Data Conversion"
          TopLeft="234.5,209.5" />
        <NodeLayout
          Size="139,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source"
          TopLeft="249,18" />
        <NodeLayout
          Size="170,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get AuditDateTime"
          TopLeft="229.5,413.5" />
        <NodeLayout
          Size="245,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates"
          TopLeft="190.5,689.5" />
        <NodeLayout
          Size="365,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Insert Redirected or Rejected Rows to Exception Table"
          TopLeft="138,1199.5" />
        <NodeLayout
          Size="338,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table"
          TopLeft="151.5,1301.5" />
        <NodeLayout
          Size="298,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\DEST Destination SFDC Future_Products Table"
          TopLeft="171.5,587.5" />
        <NodeLayout
          Size="227,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Concatenate Rejected Columns"
          TopLeft="207,893.5" />
        <NodeLayout
          Size="216,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Get Records Total RowCount"
          TopLeft="206.5,311.5" />
        <NodeLayout
          Size="209,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\TF Error Output Description"
          TopLeft="216,791.5" />
        <NodeLayout
          Size="241,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\SRC Excel Source Future_Products"
          TopLeft="194,107.5" />
        <NodeLayout
          Size="249,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\RowCount - Get TotalRejectedRows"
          TopLeft="196,1097.5" />
        <NodeLayout
          Size="198,42"
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Add JobInstance Column"
          TopLeft="221.5,995.5" />
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 31]"
          TopLeft="320.5,1241.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 3]"
          TopLeft="314,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 2]"
          TopLeft="320.5,1139.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 11]"
          TopLeft="316.75,629.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Row Count Output 1]"
          TopLeft="314.5,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Output 0]"
          TopLeft="320.5,935.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[OLE DB Destination Error Output]"
          TopLeft="316.75,731.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-73.20890625,20.533203125,146.4178125,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Excel Source Output]"
          TopLeft="316.5,60">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,47.5"
              Start="0,0"
              End="0,40">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,40" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Error Description Output]"
          TopLeft="320.5,833.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Derived Column Output1]"
          TopLeft="317.5,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,132"
              Start="0,0"
              End="0,124.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,124.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Derived Column Output]"
          TopLeft="320.5,1037.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination.Paths[Data Conversion Output]"
          TopLeft="314,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Excel Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Destination ConstantCurrencyRates">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Load Excel (xls and xlsx) Files from Source to Destination\Loop Through Folder and Get Appropirate File\DFT Load Source Excel File to Destination\Insert Redirected or Rejected Rows to Exception Table">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>